#####################################################################################
## 	© 2019,2020 Hewlett Packard Enterprise Development LP
########
##
## 	Permission is hereby granted, free of charge, to any person obtaining a
## 	copy of this software and associated documentation files (the "Software"),
## 	to deal in the Software without restriction, including without limitation
## 	the rights to use, copy, modify, merge, publish, distribute, sublicense,
## 	and/or sell copies of the Software, and to permit persons to whom the
## 	Software is furnished to do so, subject to the following conditions:
##
## 	The above copyright notice and this permission notice shall be included
## 	in all copies or substantial portions of the Software.
##
## 	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## 	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## 	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## 	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
## 	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
## 	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
## 	OTHER DEALINGS IN THE SOFTWARE.
##
##
##	File Name:		HPE3PARPSToolkit-CLI.psm1
## 	Description: 	Module functions to automate management of HPE 3PAR StoreServ Storage System
##		
## 	Pre-requisites: Needs HPE 3PAR cli.exe for New-3parCLIConnection
##		  			Needs SSH library for New-3ParPoshSshConnection
##
##	Created:		June 2015
##	Last Modified:	January 2019
##	
##	History:		v1.0 - Created
##					v2.0 - Added Replication, System Reporter, Sparing, Performance Management cmdlets
##						 - Added Disk Enclosure Management, System Management cmdlets
##					v2.1 - Added Cmdlets for Real Madrid Release drivers.
##					v2.2 - Support for HPE 3PAR StoreServ Storage Operating System 3.3.1 (MU2 & MU3)
##                       - Support all parameters for the Cmdlets.
##					VASA:
##						Get-3ParVVolSC
##						Show-3ParVVolvm
##						Set-3ParVVolSC							
##					Replication:
##						Add-3parRcopytarget 
##						Add-3parRcopyVV 
##						Approve-3parRCopyLink
##						Test-3parRcopyLink
##						Sync-Recover3ParDRRcopyGroup
##						Disable-3ParRcopylink
##						Disable-3ParRcopytarget
##						Disable-3ParRcopyVV
##						Get-3parRCopy
##						New-3parRCopyGroup
##						New-3parRCopyGroupCPG
##						Remove-3parRCopyTargetFromGroup
##						Remove-3parRCopyVVFromGroup
##						Remove-3parRCopyGroup
##						Remove-3parRCopyTarget 
##						Set-3parRCopyGroupPeriod
##						Set-3parRCopyGroupPol
##						Set-3parRCopyTargetName
##						Set-3parRCopyTarget
##						Set-3parRCopyTargetPol
##						Set-3parRCopyTargetWitness
##						Show-3ParRcopyTransport
##						Start-3parRcopy
##						Start-3parRCopyGroup
##						Get-3parStatRCopy
##						Stop-3parRCopy
##						Stop-3parRCopyGroup
##						Sync-3parRCopy								 
##					System Reporter cmdlets: 
##						Set-3parSRAlertCrit
##						Get-3ParHistRcopyVV
##						Get-3parSRAlertCrit
##						Get-3parSRAOMoves
##						Get-3parSRCPGSpace
##						Get-3parSRHistLD
##						Get-3parSRHistPD
##						Get-3parSRHistPort
##						Get-3parSRHistVLUN
##						Get-3parSRLDSpace
##						Get-3parSRPDSpace
##						Get-3parSRStatCache
##						Get-3parSRStatCMP
##						Get-3parSRStatCPU
##						Get-3parSRStatLD
##						Get-3parSRStatPD
##						Get-3parSRStatPort
##						Get-3parSRStatVLUN
##						Get-3parSRVVSpace
##						Get-3parVLUN
##						Show-3pariSCSIStatistics
##						Show-3pariSCSISessionStatistics
##						Show-3parSRSTATISCSISession
##						Show-3parSRStatIscsi
##					User Management cmdlet: 
##						Get-3parUserConnection
##						Disk Enclosure Management cmdlets: 
##						Approve-3parPD
##						Test-3parPD
##						Find-3parCage
##						Set-3parCage
##						Set-3parPD
##						Get-3parCage
##						Get-3parPD
##					Sparing cmdlets: 
##						New-3parSpare
##						Push-3parChunklet
##						Push-3parChunkletToSpare
##						Push-3parPD
##                      Push-3parPDToSpare
##						Push-3parRelocPD
##						Remove-3parSpare
##						Get-3parSpare
##					System Management cmdlets:
##						Get-3parSR
##						Start-3parSR
##						Stop-3parSR
##					Performance Management cmdlets: 
##						Get-3parHistChunklet,
##						Get-3parHistLD
##						Get-3parHistPD
##						Get-3parHistPort
##						Get-3parHistRCopyVV
##						Get-3parHistVLUN
##						Get-3parHistVV
##						Get-3parStatChunklet
##						Get-3parStatCMP
##						Get-3parStatCPU
##						Get-3parStatLD
##						Get-3parStatLink
##						Get-3parStatPD
##						Get-3parStatPort
##						Get-3parStatRCVV
##						Get-3parStatVLUN
##						Get-3parStatVV
##						Compress-3parVV
##  				Volume Management:
##						Add-3parVV
##						Test-3parVV
##						Get-3parSpace
##						Import-3parVV
##						Remove-3parVLUN
##						Show-3parPeer
##						Update-3parVV
##					Node Subsystem Management:
##						Show-3parISCSISession
##						Show-3parPortARP
##						Show-3parPortISNS
##					Starting and configuring the WSAPI server.
##						Start-3parWsapi
##						Stop-3parWsapi
##						Get-3parWsapi
##						Set-3PARWsapi
##						Get-3parWsapiSession
##						Remove-3PARWsapiSession								
##					Major changes:
##						1. Added support for secure connections using HPE 3PAR CLI and POSH SSH Library 						
##
#######################################################################################

$Info = "INFO:"
$Debug = "DEBUG:"
$global:VSLibraries = Split-Path $MyInvocation.MyCommand.Path

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12


add-type @" 

public struct _SANConnection{
public string SessionId;
public string IPAddress;
public string UserName;
public string epwdFile;
public string CLIDir;
public string CLIType;
}

"@ 

add-type @" 

public struct _TempSANConn{
public string SessionId;
public string IPAddress;
public string UserName;
public string epwdFile;
public string CLIDir;
public string CLIType;
}

"@ 

add-type @" 
public struct _vHost {
	public string Id;
	public string Name;
	public string Persona;
	public string Address;
	public string Port;
}

"@

add-type @" 
public struct _vLUN {
		public string Name;
		public string LunID;
		public string PresentTo;
		public string vvWWN;
}

"@

add-type @"
public struct _Version{
		public string ReleaseVersionName;
		public string Patches;
		public string CliServer;
		public string CliClient;
		public string SystemManager;
		public string Kernel;
		public string TPDKernelCode;
		
}
"@

add-type @" 
public struct _vHostSet {
		public string ID;
		public string Name;
		public string Members;		
}

"@

############################################################################################################################################
## FUNCTION Test-3parObject
############################################################################################################################################
Function Test-3parobject 
{
Param( 	
    [string]$ObjectType, 
	[string]$ObjectName ,
	[string]$ObjectMsg = $ObjectType, 
	$SANConnection = $global:SANConnection
	)

	$IsObjectExisted = $True
	$ObjCmd = $ObjectType -replace ' ', '' 
	$Cmds = "show$ObjCmd $ObjectName"
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmds
	if ($Result -like "no $ObjectMsg listed")
	{
		$IsObjectExisted = $false
	}
	return $IsObjectExisted
	
} # End FUNCTION Test-3parObject

######################################################################################################################
## FUNCTION New-3ParPoshSshConnection
######################################################################################################################
Function New-3ParPoshSshConnection
{
<#
  .SYNOPSIS
    Builds a SAN Connection object using Posh SSH connection
  
  .DESCRIPTION
    Note : This cmdlet (New-3ParPoshSshConnection) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-PoshSshConnection) instead.
  
	Creates a SAN Connection object with the specified parameters. 
    No connection is made by this cmdlet call, it merely builds the connection object. 
        
  .EXAMPLE
    New-3ParPoshSshConnection -SANUserName Administrator -SANPassword mypassword -ArrayNameOrIPAddress 10.1.1.1 
	Creates a SAN Connection object with the specified Array Name or Array IP Address
	
  .EXAMPLE
    New-3ParPoshSshConnection -SANUserName Administrator -SANPassword mypassword -ArrayNameOrIPAddress 10.1.1.1 -AcceptKey
	Creates a SAN Connection object with the specified Array Name or Array IP Address
	
  .PARAMETER UserName 
    Specify the SAN Administrator user name. Ex: 3paradm
	
  .PARAMETER Password 
    Specify the SAN Administrator password 
	
   .PARAMETER ArrayNameOrIPAddress 
    Specify Array Name or Array IP Address
              
  .Notes
    NAME:  New-3ParPoshSshConnection    
    LASTEDIT: 13/03/2017
    KEYWORDS: New-3ParPoshSshConnection
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true, HelpMessage="Enter Array Name or IP Address")]
		[System.String]
        $ArrayNameOrIPAddress=$null,
		
		[Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$SANUserName=$null,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$SANPassword=$null,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$AcceptKey
		      
		)
		
		$Session
		
		# Check if our module loaded properly
		if (Get-Module -ListAvailable -Name Posh-SSH) 
		{ <# do nothing #> }
		else 
		{ 
			try
			{
				# install the module automatically
				[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
				iex (New-Object Net.WebClient).DownloadString("https://gist.github.com/darkoperator/6152630/raw/c67de4f7cd780ba367cccbc2593f38d18ce6df89/instposhsshdev")
			}
			catch
			{
				#$msg = "Error occurred while installing POSH SSH Module. `nPlease check the internet connection.`nOr Install POSH SSH Module using given Link. `nhttp://www.powershellmagazine.com/2014/07/03/posh-ssh-open-source-ssh-powershell-module/  `n "
				$msg = "Error occurred while installing POSH SSH Module. `nPlease check if internet is enabled. If internet is enabled and you are getting this error,`n Execute Save-Module -Name Posh-SSH -Path <path Ex D:\xxx> `n Then Install-Module -Name Posh-SSH `n If you are getting error like Save-Module is incorrect then `n Check you Power shell Version and Update to 5.1 for this particular Process  `n Or visit https://www.powershellgallery.com/packages/Posh-SSH/2.0.2 `n"
				 
				return "`n Failure : $msg"
			}
			
		}	
		
		#####
		#Write-DebugLog "start: Entering function New-3ParPoshSshConnection. Validating IP Address format." $Debug
		
		# Check IP Address Format
		#if(-not (Test-IPFormat $ArrayNameOrIPAddress))		
		#{
		#	Write-DebugLog "Stop: Invalid IP Address $ArrayNameOrIPAddress" "ERR:"
		#	return "Failure : Invalid IP Address $ArrayNameOrIPAddress"
		#}	
				
		# Authenticate
		try
		{
			if(!($SANPassword))
			{				
				$securePasswordStr = Read-Host "SANPassword" -AsSecureString				
				$mycreds = New-Object System.Management.Automation.PSCredential ($SANUserName, $securePasswordStr)
			}
			else
			{				
				$tempstring  = convertto-securestring $SANPassword -asplaintext -force				
				$mycreds = New-Object System.Management.Automation.PSCredential ($SANUserName, $tempstring)									
			}
			try
			{
				if($AcceptKey) 
				{
				   #$Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential (Get-Credential $SANUserName) -AcceptKey                      
				   $Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential $mycreds -AcceptKey
			    }
			    else 
				{
				   #$Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential (Get-Credential $SANUserName)                          
				    $Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential $mycreds
			    }
			}
			catch 
			{	
				$msg = "In function New-3ParPoshSshConnection. "
				$msg+= $_.Exception.ToString()	
				# Write-Exception function is used for exception logging so that it creates a separate exception log file.
				Write-Exception $msg -error		
				return "Failure : $msg"
			}
			Write-DebugLog "Running: Executed . Check on PS console if there are any errors reported" $Debug
			if (!$Session)
			{
				return "Failure : New-SSHSession command fail."
			}
		}
		catch 
		{	
			$msg = "In function New-3ParPoshSshConnection. "
			$msg+= $_.Exception.ToString()	
			# Write-Exception function is used for exception logging so that it creates a separate exception log file.
			Write-Exception $msg -error		
			return "Failure : $msg"
		}
		
		
		$global:SANObjArr += @()
		$global:SANObjArr1 += @()
		#write-host "objarray",$global:SANObjArr
		#write-host "objarray1",$global:SANObjArr1
		if($global:SANConnection)
		{			
			#write-host "In IF loop"
			$SANC = New-Object "_SANConnection"
			$SANC.IPAddress = $ArrayNameOrIPAddress			
			$SANC.UserName = $SANUserName
			$SANC.epwdFile = "Secure String"			
			$SANC.SessionId = $Session.SessionId			
			$SANC.CLIType = "SshClient"
			$SANC.CLIDir = "Null"
			$global:SANConnection = $SANC
			
			###making multiple object support
			$SANC1 = New-Object "_TempSANConn"
			$SANC1.IPAddress = $ArrayNameOrIPAddress			
			$SANC1.UserName = $SANUserName
			$SANC1.epwdFile = "Secure String"		
			$SANC1.SessionId = $Session.SessionId			
			$SANC1.CLIType = "SshClient"
			$SANC1.CLIDir = "Null"
			
			$global:SANObjArr += @($SANC)
			$global:SANObjArr1 += @($SANC1)			
		}
		else
		{
		
			$global:SANObjArr = @()
			$global:SANObjArr1 = @()
			#write-host "In Else loop"
			
			
			$SANC = New-Object "_SANConnection"
			$SANC.IPAddress = $ArrayNameOrIPAddress			
			$SANC.UserName = $SANUserName
			$SANC.epwdFile = "Secure String"		
			$SANC.SessionId = $Session.SessionId
			$SANC.CLIType = "SshClient"
			$SANC.CLIDir = "Null"
			
			
			$global:SANConnection = $SANC		
			
			###making multiple object support
			$SANC1 = New-Object "_TempSANConn"
			$SANC1.IPAddress = $ArrayNameOrIPAddress			
			$SANC1.UserName = $SANUserName
			$SANC1.epwdFile = "Secure String"
			$SANC1.SessionId = $Session.SessionId
			$SANC1.CLIType = "SshClient"
			$SANC1.CLIDir = "Null"		
				
			$global:SANObjArr += @($SANC)
			$global:SANObjArr1 += @($SANC1)
		
		}
		Write-DebugLog "End: If there are no errors reported on the console then the SAN connection object is set and ready to be used" $Info
		return $SANC

 }# End Function New-3ParPoshSshConnection

############################################################################################################################################
## FUNCTION Get-ConnectedSession
############################################################################################################################################
function Get-ConnectedSession 
{
<#
  .SYNOPSIS
    Command Get-ConnectedSession display connected session detail
	
  .DESCRIPTION  
	Command Get-ConnectedSession display connected session detail 
        
  .EXAMPLE
    Get-ConnectedSession
	
  .Notes
    NAME:  Get-ConnectedSession    
    LASTEDIT: 13/03/2017
    KEYWORDS: Get-ConnectedSession 
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>

    Begin{}
    Process
    {       
		return $global:SANConnection		 
    }
    End{}
}

############################################################################################################################################
## FUNCTION NEW-3PARCLICONNECTION
############################################################################################################################################
Function New-3parCLIConnection
{
<#
  .SYNOPSIS
    Builds a SAN Connection object using HPE 3par CLI.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parCLIConnection ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-CLIConnection) instead.
  
	Creates a SAN Connection object with the specified parameters. 
    No connection is made by this cmdlet call, it merely builds the connection object. 
        
  .EXAMPLE
    New-3parCLIConnection  -ArrayNameOrIPAddress 10.1.1.1 -CLIDir "C:\cli.exe" -epwdFile "C:\HPE3parepwdlogin.txt"
	Creates a SAN Connection object with the specified Array Name or Array IP Address
	
  .PARAMETER ArrayNameOrIPAddress 
    Specify Array Name or Array IP Address
    
  .PARAMETER CLIDir 
    Specify the absolute path of HPE 3par cli.exe. Default is "C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin"
  
  .PARAMETER epwdFile 
    Specify the encrypted password file location , example “c:\HPE3parstoreserv244.txt” To create encrypted password file use “Set-3parPassword” cmdlet           
	
  .Notes
    NAME:  New-3parCLIConnection    
    LASTEDIT: 04/04/2012
    KEYWORDS: New-3parCLIConnection
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe 
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $ArrayNameOrIPAddress=$null,
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        #$CLIDir="C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin",
		$CLIDir="C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin",
		[Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $epwdFile="C:\HPE3parepwdlogin.txt"
       
	) 

		#Write-DebugLog "start: Entering function New-3parCLIConnection. Validating IP Address format." $Debug
		# Check IP Address Format
		#if(-not (Test-IPFormat $ArrayNameOrIPAddress))		
		#{
		#	Write-DebugLog "Stop: Invalid IP Address $ArrayNameOrIPAddress" "ERR:"
		#	return "Failure : Invalid IP Address $ArrayNameOrIPAddress"
		#}				
		#Write-DebugLog "Running: Completed validating IP address format." $Debug		
		
		Write-DebugLog "Running: Authenticating credentials - Invoke-3parCLI for user $SANUserName and SANIP= $ArrayNameOrIPAddress" $Debug
		$test = $env:Path		
		$test1 = $test.split(";")		
		if ($test1 -eq $CLIDir)
		{
			Write-DebugLog "Running: Environment variable path for $CLIDir already exists" "INFO:"			
		}
		else
		{
			Write-DebugLog "Running: Environment variable path for $CLIDir does not exists, so added $CLIDir to environment" "INFO:"
			$env:Path += ";$CLIDir"
		}
		if (-not (Test-Path -Path $CLIDir )) 
		{		
			Write-DebugLog "Stop: Path for HPE 3par cli was not found. Make sure you have installed HPE 3par CLI." "ERR:"			
			return "Failure : Path for HPE 3par cli was not found. Make sure you have cli.exe file under $CLIDir"
		}
		$clifile = $CLIDir + "\cli.exe"		
		if( -not (Test-Path $clifile))
		{
			Write-DebugLog "Stop: Path for HPE 3par cli was not found.Please enter only directory path with out cli.exe & Make sure you have installed HPE 3par CLI." "ERR:"			
			return "Failure : Path for HPE 3par cli was not found,Make sure you have cli.exe file under $CLIDir"
		}
		#write-host "Set HPE 3par CLI path if not"
		# Authenticate		
		try
		{
			if( -not (Test-Path $epwdFile))
			{
				write-host "Encrypted password file does not exist , creating encrypted password file"				
				Set-3parPassword -CLIDir $CLIDir -ArrayNameOrIPAddress $ArrayNameOrIPAddress -epwdFile $epwdFile
				Write-DebugLog "Running: Path for HPE 3par encrypted password file  was not found. Now created new epwd file." "INFO:"
			}
			#write-host "pwd file : $epwdFile"
			Write-DebugLog "Running: Path for HPE 3par encrypted password file  was already exists." "INFO:"
			$global:epwdFile = $epwdFile	
			$Result9 = Invoke-3parCLI -DeviceIPAddress $ArrayNameOrIPAddress -CLIDir $CLIDir -epwdFile $epwdFile -cmd "showversion" 
			Write-DebugLog "Running: Executed Invoke-3parCLI. Check on PS console if there are any errors reported" $Debug
			if ($Result9 -match "FAILURE")
			{
				return $Result9
			}
		}
		catch 
		{	
			$msg = "In function New-3parCLIConnection. "
			$msg+= $_.Exception.ToString()	
			# Write-Exception function is used for exception logging so that it creates a separate exception log file.
			Write-Exception $msg -error		
			return "Failure : $msg"
		}
		
		$global:SANObjArr += @()
		#write-host "objarray",$global:SANObjArr

		if($global:SANConnection)
		{			
			#write-host "In IF loop"
			$SANC = New-Object "_SANConnection"  
			# Get the username
			$connUserName = Get-3parUserConnectionTemp -ArrayNameOrIPAddress $ArrayNameOrIPAddress -CLIDir $CLIDir -epwdFile $epwdFile -Option current
			$SANC.UserName = $connUserName.Name
			$SANC.IPAddress = $ArrayNameOrIPAddress
			$SANC.CLIDir = $CLIDir	
			$SANC.epwdFile = $epwdFile		
			$SANC.CLIType = "3parcli"
			$SANC.SessionId = "NULL"
			$global:SANConnection = $SANC
			$global:SANObjArr += @($SANC)
		}
		else
		{		
			$global:SANObjArr = @()
			#write-host "In Else loop"			
			
			$SANC = New-Object "_SANConnection"       
			$connUserName = Get-3parUserConnectionTemp -ArrayNameOrIPAddress $ArrayNameOrIPAddress -CLIDir $CLIDir -epwdFile $epwdFile -Option current
			$SANC.UserName = $connUserName.Name
			$SANC.IPAddress = $ArrayNameOrIPAddress
			$SANC.CLIDir = $CLIDir
			$SANC.epwdFile = $epwdFile
			$SANC.CLIType = "3parcli"
			$SANC.SessionId = "NULL"
			#New-3parConnection -SANConnection $SANC
			#making this object as global
			$global:SANConnection = $SANC				
			$global:SANObjArr += @($SANC)		
		}
		Write-DebugLog "End: If there are no errors reported on the console then the SAN connection object is set and ready to be used" $Info
		return $SANC

} # End Function New-3parCLIConnection

######################################################################################################################
## FUNCTION Get-3parUserConnectionTemp
######################################################################################################################
Function Get-3parUserConnectionTemp
{
<#
  .SYNOPSIS
    Displays information about users who are currently connected (logged in) to the storage system.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parUserConnectionTemp) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-UserConnectionTemp) instead.
	
	Displays information about users who are currently connected (logged in) to the storage system.
        
  .EXAMPLE
    Get-3parUserConnection  -ArrayNameOrIPAddress 10.1.1.1 -CLIDir "C:\cli.exe" -epwdFile "C:\HPE3parepwdlogin.txt" -Option current
	Shows all information about the current connection only.
  .EXAMPLE
    Get-3parUserConnection  -ArrayNameOrIPAddress 10.1.1.1 -CLIDir "C:\cli.exe" -epwdFile "C:\HPE3parepwdlogin.txt" 
	Shows information about users who are currently connected (logged in) to the storage system.
	 
  .PARAMETER ArrayNameOrIPAddress 
    Specify Array Name or Array IP Address
    
  .PARAMETER CLIDir 
    Specify the absolute path of HPE 3par cli.exe. Default is "C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin"
  
  .PARAMETER epwdFile 
    Specify the encrypted password file , if file does not exists it will create encrypted file using deviceip,username and password  
	
  .PARAMETER Option
    current
	Shows all information about the current connection only.

  .Notes
    NAME:   Get-3parUserConnectionTemp
    LASTEDIT: 04/04/2015
    KEYWORDS:  Get-3parUserConnectionTemp
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe 
 #>
 
[CmdletBinding()]
	param(
		[Parameter(Position=0,Mandatory=$false, ValueFromPipeline=$true)]
		[System.string]
		$CLIDir="C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin",
		[Parameter(Position=1,Mandatory=$true, ValueFromPipeline=$true)]
		[System.string]
		$ArrayNameOrIPAddress=$null,
		[Parameter(Position=2,Mandatory=$true, ValueFromPipeline=$true)]
		[System.string]
		$epwdFile ="C:\HPE3parepwdlogin.txt",
		[Parameter(Position=3,Mandatory=$false, ValueFromPipeline=$true)]
		[System.string]
		$Option       
	)	
	if( Test-Path $epwdFile)
	{
		Write-DebugLog "Running: HPE 3par encrypted password file was found , it will use the mentioned file" "INFO:"
	}
	#$passwordFile = $epwdFile
	#$cmd1 = $CLIDir+"\showuserconn.bat"
	$cmd2 = "showuserconn "
	$options1 = "current"
	if(!($options1 -eq $option))
	{
		return "Failure : option should be in ( $options1 )"
	}
	if($option -eq "current")
	{
		$cmd2 += " -current "
	}
	#& $cmd1 -sys $ArrayNameOrIPAddress -file $passwordFile
	$result = Invoke-3parCLI -DeviceIPAddress $ArrayNameOrIPAddress -CLIDir $CLIDir -epwdFile $epwdFile -cmd $cmd2	
	$count = $result.count - 3
	$tempFile = [IO.Path]::GetTempFileName()	
	Add-Content -Path $tempFile -Value "Id,Name,IP_Addr,Role,Connected_since,Current,Client,ClientName"	
	foreach($s in $result[1..$count])
	{
		$s= [regex]::Replace($s,"^ +","")
		$s= [regex]::Replace($s," +"," ")
		$s= [regex]::Replace($s," ",",")
		$s = $s.trim()
		Add-Content -Path $tempFile -Value $s
	}
	Import-CSV $tempFile	
    del $tempFile
}

######################################################################################################################
## FUNCTION Get-3parUserConnection
######################################################################################################################
Function Get-3parUserConnection{
<#  
  .SYNOPSIS
    Displays information about users who are currently connected (logged in) to the storage system.  
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parUserConnection) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-UserConnection) instead.
  
	Displays information about users who are currently connected (logged in) to the storage system.
    
  .EXAMPLE
    Get-3parUserConnection  
	Shows information about users who are currently connected (logged in) to the storage system.
	 
  .EXAMPLE
    Get-3parUserConnection   -Current
	Shows all information about the current connection only.
   
  .EXAMPLE
    Get-3parUserConnection   -Detailed
	Specifies the more detailed information about the user connection

  .PARAMETER Current
	Shows all information about the current connection only.
		
  .PARAMETER Detailed
	Specifies the more detailed information about the user connection.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with New-3ParPoshSshConnection or New-3parCLICOnnection
	
  .Notes
    NAME:   Get-3parUserConnection
    LASTEDIT: 04/04/2015
    KEYWORDS:  Get-3parUserConnection
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe 
 #>
 
[CmdletBinding()]
	param(
		[Parameter(Position=0,Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Current ,
		
		[Parameter(Position=1,Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Detailed ,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
      
	)
	Write-DebugLog "Start: In Get-3parUserConnection - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parUserConnection since SAN connection object values are null/empty" $Debug
				return "Failure : Exiting Get-3parUserConnection since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$cmd2 = "showuserconn "
	
	if ($Current)
	{
		$cmd2 += " -current "			
	}
	if($Detailed)
	{
		$cmd2 += " -d "
		$result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd2
		return $result
	}
	$result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd2
	$count = $result.count - 3
	$tempFile = [IO.Path]::GetTempFileName()
	Add-Content -Path $tempFile -Value "Id,Name,IP_Addr,Role,Connected_since_Date,Connected_since_Time,Connected_since_TimeZone,Current,Client,ClientName"
	foreach($s in $result[1..$count])
	{
		$s= [regex]::Replace($s,"^ +","")
		$s= [regex]::Replace($s," +"," ")
		$s= [regex]::Replace($s," ",",")
		$s = $s.trim()
		Add-Content -Path $tempFile -Value $s
	}
	Import-CSV $tempFile
	del $tempFile
} #End Get-3parUserConnection
######################################################################################################################
## FUNCTION Set-3parPassword
######################################################################################################################
Function Set-3parPassword
{
<#
  .SYNOPSIS
	Creates a encrypted password file on client machine
  
  .DESCRIPTION
    Note : This cmdlet (Set-3parPassword) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Password) instead.
  
	Creates a encrypted password file on client machine
        
  .EXAMPLE
    Set-3parPassword -CLIDir "C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin" -ArrayNameOrIPAddress "15.212.196.218"  -epwdFile "C:\HPE3paradmepwd.txt"	
	This examples stores the encrypted password file HPE3paradmepwd.txt on client machine c:\ drive, subsequent commands uses this encryped password file 
	 
  .PARAMETER ArrayNameOrIPAddress 
    Specify Array Name or Array IP Address
    
  .PARAMETER CLIDir 
    Specify the absolute path of HPE 3par cli.exe. Default is "C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin"
  
  .PARAMETER epwdFile 
    Specify the file location to create encrypted password file
	
  .Notes
    NAME:   Set-3parPassword
    LASTEDIT: 04/04/2015
    KEYWORDS:  Set-3parPassword
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe 
 #>
 
[CmdletBinding()]
	param(
		[Parameter(Position=0,Mandatory=$false, ValueFromPipeline=$true)]
		[System.string]
		$CLIDir="C:\Program Files (x86)\Hewlett Packard Enterprise\HPE 3PAR CLI\bin",
		[Parameter(Position=1,Mandatory=$true, ValueFromPipeline=$true)]
		[System.string]
		$ArrayNameOrIPAddress=$null,
		[Parameter(Position=2,Mandatory=$true, ValueFromPipeline=$true)]
		[System.string]
		$epwdFile ="C:\HPE3parepwdlogin.txt"
       
	)	
	#write-host "In connection"
	if( Test-Path $epwdFile)
	{
		Write-DebugLog "Running: HPE 3par encrypted password file was found , it will overwrite the mentioned file" "INFO:"
	}	
	$passwordFile = $epwdFile	
	$cmd1 = $CLIDir+"\setpassword.bat" 
	& $cmd1 -saveonly -sys $ArrayNameOrIPAddress -file $passwordFile
	if(!($?	))
	{
		Write-DebugLog "STOP: HPE 3par System's  cli dir path or system is not accessible or commands.bat file path was not configured properly " "ERR:"
		return "`nFailure : FATAL ERROR"
	}
	#$cmd2 = "setpassword.bat -saveonly -sys $ArrayNameOrIPAddress -file $passwordFile"
	#Invoke-expression $cmd2
	$global:epwdFile = $passwordFile
	Write-DebugLog "Running: HPE 3par System's encrypted password file has been created successfully and the file location is $passwordfile " "INFO:"
	return "Success : HPE 3par System's encrypted password file has been created successfully and the file location : $passwordfile"

} #End Set-3parPassword

############################################################################################################################################
## FUNCTION Set-3parHostPorts
############################################################################################################################################
Function Set-3parHostPorts
{
<#
  .SYNOPSIS
   Configure settings of the 3PAR array
  
  .DESCRIPTION
    Note : This cmdlet (Set-3parHostPorts) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-HostPorts) instead.
  
	Configures 3PAR with settings specified in the text file
        
  .EXAMPLE
	Set-3parHostPorts -FCConfigFile FC-Nodes.CSV
	Configures all FC host controllers on  3PAR array
	
  .EXAMPLE	
	Set-3parHostPorts -iSCSIConfigFile iSCSI-Nodes.CSV
	Configures all iSCSI host controllers on  3PAR array
	
  .EXAMPLE
	Set-3parHostPorts -LDConfigFile LogicalDisks.CSV
	Configures logical disks on 3PAR array
	
  .EXAMPLE	
	Set-3parHostPorts -FCConfigFile FC-Nodes.CSV -iSCSIConfigFile iSCSI-Nodes.CSV -LDConfigFile LogicalDisks.CSV
	Configures FC, iSCSI host controllers and logical disks on 3PAR array
		
  .EXAMPLE	
	Set-3parHostPorts -RCIPConfiguration -Port_IP 0.0.0.0 -NetMask xyz -NSP 1:2:3>
	for rcip port
	
  .EXAMPLE	
	Set-3parHostPorts -RCFCConfiguration -NSP 1:2:3>
	For RCFC port  
 
  .PARAMETER FCConfigFile
	Specify the config file containing FC host controllers information
		
  .PARAMETER iSCSIConfigFile
	Specify the config file containing iSCSI host controllers information
		
  .PARAMETER LDConfigFile
	Specify the config file containing Logical Disks information
		
  .PARAMETER Demo
	Switch to list the commands to be executed 
		
  .PARAMETE RCIPConfiguration
	go for  RCIP Configuration
		
  .PARAMETE RCFCConfiguration
	go for  RCFC Configuration
		
  .PARAMETE Port_IP
	port ip address
		
  .PARAMETE NetMask
	Net Mask Name
		
  .PARAMETE NSP
	NSP Name 
			
  .Notes
    NAME:  Set-3parHostPorts    
    LASTEDIT: June 2012
    KEYWORDS: Set-3parHostPorts  
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe
 #>
 
[CmdletBinding()]
	Param(
			[Parameter()]
			[System.String]
			$FCConfigFile,
			
			[Parameter()]
			[System.String]
			$iSCSIConfigFile,		
			
			[Parameter()]
			[System.String]
			$LDConfigFile,

			[Parameter()]
			[switch]
			$RCIPConfiguration,
			
			[Parameter()]
			[switch]
			$RCFCConfiguration,
			
			[Parameter()]
			[System.String]
			$Port_IP,
			
			[Parameter()]
			[System.String]
			$NetMask,
			
			[Parameter()]
			[System.String]
			$NSP,
			
			[Parameter()]
			[_SANConnection]
			$SANConnection = $global:SANConnection,
			
			[Parameter(Position=2)]
			[switch]$Demo

		)

Write-DebugLog "Start: In Set-3PARHostPorts- validating input values" $Debug 
#check if connection object contents are null/empty
if(!$SANConnection)
{	
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
			Write-DebugLog "Stop: Exiting Set-3PARHostPorts since SAN connection object values are null/empty" $Debug
			return " Failure : Exiting Set-3PARHostPorts since SAN connection object values are null/empty"
		}
	}
}
$plinkresult = Test-PARCli -SANConnection $SANConnection 
if($plinkresult -match "FAILURE :")
{
	write-debuglog "$plinkresult" "ERR:" 
	return $plinkresult
}

# ---------------------------------------------------------------------
#		FC Config file here
if (!(($FCConfigFile) -or ($iSCSIConfigFile) -or ($LDConfigFile) -or ($RCIPConfiguration) -or ($RCFCConfiguration))) 
{
	return "FAILURE : No config file selected"
}
if ($RCIPConfiguration)
{
	$Cmds="controlport rcip addr -f "
	if($Port_IP)
	{
		$Cmds=" $Port_IP "
	}
	else
	{
		return "port_IP required with RCIPConfiguration Option"
	}
	if($NetMask)
	{
		$Cmds=" $NetMask "
	}
	else
	{
		return "NetMask required with RCIPConfiguration Option"
	}
	if($NSP)
	{
		$Cmds=" $NSP "
	}
	else
	{
		return "NSP required with RCIPConfiguration Option"
	}
	$result = Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
	return $result
}
if ($RCFCConfiguration)
{
	$Cmds="controlport rcfc init -f "	
	if($NSP)
	{
		$Cmds=" $NSP "
	}
	else
	{
		return "NSP required with RCFCConfiguration Option"
	}
	$result = Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
	return $result
}
if ($FCConfigFile)
{
	if ( -not (Test-Path -path $FCConfigFile)) 
	{
		Write-DebugLog "Configuring FC hosts using configuration file $FCConfigFile" $Info
		
		$ListofFCPorts = Import-Csv $FCConfigFile
		foreach ( $p in $ListofFCPorts)
		{
			$Port = $p.Controller 

			Write-DebugLog "Set port $Port offline " $Info
			$Cmds = "controlport offline -f $Port"
			Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
			
			Write-DebugLog "Configuring port $Port as host " $Info
			$Cmds= "controlport config host -ct point -f $Port"
			Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds

			Write-DebugLog "Resetting port $Port " $Info
			$Cmds="controlport rst -f $Port"
			Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
		}
	}	
	else
	{
		Write-DebugLog "Can't find $FCConfigFile" "ERR:"
	}	
}

# ---------------------------------------------------------------------
#		iSCSI Config file here
if ($iSCSIConfigFile)
{
	if ( -not (Test-Path -path $iSCSIConfigFile)) 
	{
		Write-DebugLog "Configuring iSCSI hosts using configuration file $iSCSIConfigFile" $Info
		
		$ListofiSCSIPorts = Import-Csv $iSCSIConfigFile		
	
		foreach ( $p in $ListofiSCSIPorts)
		{
			$Port 		= $p.Controller
			$bDHCP 		= $p.DHCP
			$IPAddr 	= $p.IPAddress
			$IPSubnet 	= $p.Subnet
			$IPgw 		= $p.Gateway		
			if ( $bDHCP -eq "Yes")
				{ $bDHCP = $true }
			else
				{ $bDHCP = $false }
			
			if ($bDHCP)
			{
				Write-DebugLog "Enabling DHCP on port $Port " $Info
				$Cmds = "controliscsiport dhcp on -f $Port"
				Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds			
			}
			else
			{
				Write-DebugLog "Setting IP address and subnet on port $Port " $Info
				$Cmds = "controliscsiport addr $IPAddr $IPSubnet -f $Port"
				Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
				
				Write-DebugLog "Setting gateway on port $Port " $Info
				$Cmds = "controliscsiport gw $IPgw -f $Port"
				Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
			}	
		
		}
	}	
	else
	{
		Write-DebugLog "Can't find $iSCSIConfigFile" "ERR:"
		return "FAILURE : Can't find $iSCSIConfigFile"
	}	
}			
} # End Function Set-3parHostPorts

############################################################################################################################################
## FUNCTION Ping-3parRCIPPorts
############################################################################################################################################
Function Ping-3parRCIPPorts
{
<#
  .SYNOPSIS
	Verifying That the Servers Are Connected

  .DESCRIPTION
    Note : This cmdlet (Ping-3parRCIPPorts) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Ping-RCIPPorts) instead.
  
	Verifying That the Servers Are Connected.
	
  .EXAMPLE	
	Ping-3parRCIPPorts -IP_address 192.168.245.5 -NSP 0:3:1

  .EXAMPLE
	Ping-3parRCIPPorts -count 2 -IP_address 192.168.245.5 -NSP 0:3:1

  .EXAMPLE
	Ping-3parRCIPPorts -wait 2 -IP_address 192.168.245.5 -NSP 0:3:1

  .EXAMPLE
	Ping-3parRCIPPorts -size 2 -IP_address 192.168.245.5 -NSP 0:3:1

  .EXAMPLE
	Ping-3parRCIPPorts -PF -IP_address 192.168.245.5 -NSP 0:3:1
 
  .PARAMETER IP_address
	IP address on the secondary system to ping
	
  .PARAMETER NSP
	Interface from which to ping, expressed as node:slot:port	
	
  .PARAMETER pf
	Prevents packet fragmentation. This option can only be used with the
	rcip ping subcommand.
	
  .PARAMETER size 
	Specifies the packet size. If no size is specified, the option defaults
	to 64. This option can only be used with the rcip ping subcommand.

  .PARAMETER wait
	Specifies the maximum amount of time to wait for replies. The default is
	the number of requested replies plus 5. The maximum value is 30. This
	option can only be used with the rcip ping subcommand.
	
  .PARAMETER count
	Specifies the number of replies accepted by the system before
	terminating the command. The default is 1; the maximum value is 25.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Ping-3parRCIPPorts    
    LASTEDIT: March 2017
    KEYWORDS: Ping-3parRCIPPorts  
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe
 #>
 
[CmdletBinding()]
	Param(			
			[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
			[System.String]
			$IP_address,
			
			[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
			[System.String]
			$NSP,
			
			[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
			[System.String]
			$count,
			
			[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
			[System.String]
			$wait,
			
			[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
			[System.String]
			$size,
			
			[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
			[switch]
			$PF,
			
			[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
            $SANConnection = $global:SANConnection 
		)

	Write-DebugLog "Start: In Ping-3parRCIPPorts - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3PARHostPorts since 3PAR connection object values are null/empty" $Debug
				return
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection 
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
		
	$Cmds="controlport rcip ping "
	
	if($count)
	{
		$Cmds +=" -c $count "
	}
	if($wait)
	{
		$Cmds +=" -w $wait "
	}
	if($size)
	{
		$Cmds +=" -s $size "
	}
	if($PF)
	{
		$Cmds +=" -pf"
	}
	
	if($IP_address)
	{
		$Cmds +=" $IP_address "
	}
	else
	{
		return "IP_address required "
	}
	
	if($NSP)
	{
		$Cmds +=" $NSP "
	}
	else
	{
		return "NSP required Ex: 1:1:1 "
	}
	
	$result = Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds	
	return $result
} # End Function Ping-3parRCIPPorts

############################################################################################################################################
## FUNCTION GET-3parHOSTPORTS
############################################################################################################################################

Function Get-3parHostPorts
{
<#
  .SYNOPSIS
	Query 3PAR to get all ports including targets, disks, and RCIP ports.

  .DESCRIPTION
    Note : This cmdlet (Get-3parHostPorts) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HostPorts) instead.
  
	Get information for 3PAR Ports
	
  .PARAMETER I
	Shows port hardware inventory information.

  .PARAMETER C
	Displays all devices connected to the port. Such devices include cages
	(for initiator ports), hosts (for target ports) and ports from other
	storage system (for RCFC and peer ports).

  .PARAMETER PAR
	Displays a parameter listing such as the configured data rate of a port
	and the maximum data rate that the card supports. Also shown is the
	type of attachment (Direct Connect or Fabric Attached) and whether the
	unique_nwwn and VCN capabilities are enabled.

  .PARAMETER RC
	Displays information that is specific to the Remote Copy ports.

  .PARAMETER RCFC
	Displays information that is specific to the Fibre Channel Remote Copy
	ports.

  .PARAMETER PEER
	Displays information that is specific to the Fibre Channel ports for
	Data Migration.

  .PARAMETER RCIP
	Displays information specific to the Ethernet Remote Copy ports.

  .PARAMETER ISCSI
	Displays information about iSCSI ports.

  .PARAMETER ISCSINAME
	Displays iSCSI names associated with iSCSI ports.

  .PARAMETER ISCSIVLANS
	Displays information about VLANs on iSCSI ports.

  .PARAMETER Fcoe
	Displays information that is specific to Fibre Channel over Ethernet
	(FCoE) ports.

  .PARAMETER SFP
	Displays information about the SFPs attached to ports.

  .PARAMETER DDM
	Displays Digital Diagnostics Monitoring (DDM) readings from the SFPs if
	they support DDM. This option must be used with the -sfp option.

  .PARAMETER D
	Displays detailed information about the SFPs attached to ports. This
	option is used with the -sfp option.

  .PARAMETER FAILED
	Shows only failed ports.

  .PARAMETER STATE
	Displays the detailed state information. This is the same as -s.

  .PARAMETER Detailed
	Displays the detailed state information.
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER IDS
	Displays the identities hosted by each physical port.

  .PARAMETER FS
	Displays information specific to the Ethernet File Persona ports.
	To see IP address, netmask and gateway information on File Persona,
	run "showfs -net".
	
  .PARAMETER NSP
	Nede sloat poart
  	
  .EXAMPLE
	Get-3parHostPorts
		Lists all ports including targets, disks, and RCIP ports
		
  .EXAMPLE
	Get-3parHostPorts  -I

  .EXAMPLE
	Get-3parHostPorts  -I -NSP 0:0:0

  .EXAMPLE
	Get-3parHostPorts  -PAR

  .EXAMPLE
	Get-3parHostPorts  -PAR -NSP 0:0:0

  .EXAMPLE
	Get-3parHostPorts  -RC

  .EXAMPLE
	Get-3parHostPorts  -RC -NSP 0:0:0

  .EXAMPLE
	Get-3parHostPorts  -RCFC

  .EXAMPLE
	Get-3parHostPorts  -RCFC -NSP 0:0:0

  .EXAMPLE
	Get-3parHostPorts  -RCIP
				
  .Notes
    NAME:  Get-3parHostPorts  
    LASTEDIT: June 2012
    KEYWORDS: Get-3parHostPorts
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe
 #>
 
[CmdletBinding()]
	Param(				
			[Parameter(Position=0 , Mandatory=$false)]
			[switch]$I,
			
			[Parameter(Position=1 , Mandatory=$false)]
			[switch]$PAR,
			
			[Parameter(Position=2 , Mandatory=$false)]
			[switch]$RC,
			
			[Parameter(Position=3 , Mandatory=$false)]
			[switch]$RCFC,
			
			[Parameter(Position=4 , Mandatory=$false)]
			[switch]$RCIP,
			
			[Parameter(Position=5 , Mandatory=$false)]
			[switch]$PEER,
			
			[Parameter(Position=6 , Mandatory=$false)]
			[switch]$ISCSI,
			
			[Parameter(Position=7 , Mandatory=$false)]
			[switch]$ISCSINAME,
			
			[Parameter(Position=8 , Mandatory=$false)]
			[switch]$ISCSIVLANS,
			
			[Parameter(Position=9 , Mandatory=$false)]
			[switch]$FCOE,
			
			[Parameter(Position=10 , Mandatory=$false)]
			[switch]$SFP,
			
			[Parameter(Position=11 , Mandatory=$false)]
			[switch]$FAILED,
			
			[Parameter(Position=12 , Mandatory=$false)]
			[switch]$STATE,
			
			[Parameter(Position=13 , Mandatory=$false)]
			[switch]$Detailed,
			
			[Parameter(Position=14 , Mandatory=$false)]
			[switch]$IDS,
			
			[Parameter(Position=15 , Mandatory=$false)]
			[switch]$FS,
			
			[Parameter(Position=16, Mandatory=$false)]
			[System.String]
			$NSP,
			
			[Parameter(Position=17, Mandatory=$false)]
			[switch]
			$D,
			
			[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
            $SANConnection = $global:SANConnection			
		)

	Write-DebugLog "Start: In Get-3PARHostPorts- validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3PARHostPorts since 3PAR connection object values are null/empty" $Debug
				return
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection 
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}

	$Cmds = "showport"
	
	if($I)
	{
		$Cmds+=" -i "
	}
	if($C)
	{
		$Cmds+=" -c "
	}
	
	if($PAR)
	{
		$Cmds+=" -par "
	}
	
	if($RC)
	{
		$Cmds+=" -rc "
	}
	
	if($RCFC)
	{
		$Cmds+=" -rcfc "
	}
	
	if($RCIP)
	{
		$Cmds+=" -rcip "
	}
	
	if($PEER)
	{
		$Cmds+=" -peer "
	}
	
	if($ISCSI)
	{
		$Cmds+=" -iscsi "
	}
	
	if($ISCSINAME)
	{
		$Cmds+=" -iscsiname "
	}
	
	if($ISCSIVLANS)
	{
		$Cmds+=" -iscsivlans "
	}
	
	if($FCOE)
	{
		$Cmds+=" -fcoe "
	}
	
	if($SFP)
	{
		$Cmds+=" -sfp "		
	}
	
	if($FAILED)
	{
		$Cmds+=" -failed "
	}
	
	if($STATE)
	{
		$Cmds+=" -state "
	}
	
	if($Detailed)
	{
		$Cmds+=" -s "
	}
	
	if($IDS)
	{
		$Cmds+=" -ids "
	}
	
	if($FS)
	{
		$Cmds+=" -fs "
	}	
	
	if($D)
	{
		if($SFP)
		{
			$Cmds+=" -d "
		}
		else
		{
			return " -d can only be used with -sfp"
		}
	}
	
	if($NSP)
	{
		$Cmds+=" $NSP"
	}
		
	$Result=Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds 	
	
	$LastItem = $Result.Count -2  
	
	if($SFP -and $D)
	{
		return $Result
	}
	
	if($Result -match "N:S:P")
	{
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")	
			$s= [regex]::Replace($s,"-","")
			$s= [regex]::Replace($s,"\s+",",") 		
			$s= [regex]::Replace($s,"/HW_Addr","") 
			$s= [regex]::Replace($s,"N:S:P","Device")
			$s= $s.Trim() 	
			Add-Content -Path $tempFile -Value $s				
		}
		
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return  $Result
	}
	
	if($Result -match "N:S:P")
	{
		return  " Success : Executing Get-3parHostPorts"
	}
	else
	{		
		return  $Result
	}	

} # END FUNCTION Get-3parHostPorts



############################################################################################################################################
## FUNCTION GET-3parFCPORTSToCSV
############################################################################################################################################

Function Get-3parFCPortsToCSV
{
<#
  	.SYNOPSIS
		Query 3PAR to get FC ports

	.DESCRIPTION
	    Note : This cmdlet (Get-3parFCPortsToCSV ) is deprecated and will be removed in a 
		subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-FcPortsToCsv) instead.
	
		Get information for 3PAR FC Ports
 
	.PARAMETER ResultFile
		CSV file created that contains all Ports definitions
		
	.PARAMETER Demo
		Switch to list the commands to be executed 
  	
	.EXAMPLE
    	Get-3parFCPortsToCSV -ResultFile C:\3PAR-FC.CSV
			creates C:\3PAR-FC.CSV and stores all FCPorts information
			
  .Notes
    NAME:  Get-3parFCPortsToCSV
    LASTEDIT: June 2012
    KEYWORDS: Get-3parFCPortsToCSV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe
 #>
 
[CmdletBinding()]
	Param(	
			[Parameter()]
			[_SANConnection]
			$SANConnection = $global:SANConnection,
			
			[Parameter()]
			[String]$ResultFile
		)

	$plinkresult = Test-PARCli -SANConnection $SANConnection 
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if(!($ResultFile)){
		return "FAILURE : Please specify csv file path `n example: -ResultFIle C:\portsfile.csv"
	}	
	Set-Content -Path $ResultFile -Value "Controller,WWN,SWNumber"

	$ListofPorts = Get-3PARHostPorts -SANConnection $SANConnection| where { ( $_.Type -eq "host" ) -and ($_.Protocol -eq "FC")}
	if (!($ListofPorts)){
		return "FAILURE : No ports to display"
	}

	$Port_Pattern = "(\d):(\d):(\d)"							# Pattern matches value of port: 1:2:3
	$WWN_Pattern = "([0-9a-f][0-9a-f])" * 8						# Pattern matches value of WWN

	foreach ($Port in $ListofPorts)
	{
		$NSP  = $Port.Device
		$SW = $NSP.Split(':')[-1]
		if ( [Bool]($SW % 2) )			# Check whether the number is odd
		{
			$SwitchNumber = 1
		}
		else
		{
			$SwitchNumber = 2
		}
		
		
		$NSP = $NSP -replace $Port_Pattern , 'N$1:S$2:P$3'
		
		$WWN = $Port.Port_WWN
		$WWN = $WWN -replace $WWN_Pattern , '$1:$2:$3:$4:$5:$6:$7:$8'

		Add-Content -Path $ResultFile -Value "$NSP,$WWN,$SwitchNumber"
	}
	Write-DebugLog "FC ports are stored in $ResultFile" $Info
	return "Success: FC ports information stored in $ResultFile"
} # END FUNCTION Get-3parFCPortsToCSV


############################################################################################################################################
## FUNCTION GET-3parFCPORTS
############################################################################################################################################

Function Get-3parFCPORTS
{
<#
   .SYNOPSIS
	Query 3PAR to get FC ports

   .DESCRIPTION
    Note : This cmdlet (Get-3parFCPORTS) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-FcPorts) instead.
   
	Get information for 3PAR FC Ports
 
   .PARAMETER SANConnection
	Connection String to the 3PAR array
  	
   .EXAMPLE
	Get-3parFCPORTS 
			
  .Notes
    NAME:  Get-3parFCPORTS
    LASTEDIT: June 2012
    KEYWORDS: Get-3parFCPORTS
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe
 #>
 
[CmdletBinding()]
	Param(	
			[Parameter()]
			[_SANConnection]
			$SANConnection=$Global:SANConnection
		)
	$plinkresult = Test-PARCli -SANConnection $SANConnection 
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
			
	Write-Host "--------------------------------------`n"
	Write-host "Controller,WWN"	

	$ListofPorts = Get-3PARHostPorts -SANConnection $SANConnection| where { ( $_.Type -eq "host" ) -and ($_.Protocol -eq "FC")}

	$Port_Pattern = "(\d):(\d):(\d)"							# Pattern matches value of port: 1:2:3
	$WWN_Pattern = "([0-9a-f][0-9a-f])" * 8						# Pattern matches value of WWN

	foreach ($Port in $ListofPorts)
	{
		$NSP  = $Port.Device
		#$SW = $NSP.Split(':')[-1]	
		
		$NSP = $NSP -replace $Port_Pattern , 'N$1:S$2:P$3'
		
		$WWN = $Port.Port_WWN
		$WWN = $WWN -replace $WWN_Pattern , '$1:$2:$3:$4:$5:$6:$7:$8'

		Write-Host "$NSP,$WWN"
		Write-host ""
	}
} # END FUNCTION Get-3parFCPORTS


############################################################################################################################################
## FUNCTION SET-3parFCPORTS
############################################################################################################################################

Function Set-3parFCPORTS
{
<#
  	.SYNOPSIS
		Configure 3PAR FC ports

	.DESCRIPTION
	    Note : This cmdlet (Set-3parFCPORTS) is deprecated and will be removed in a 
		subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-FCPorts) instead.
	
		Configure 3PAR FC ports
 		
	.PARAMETER Port
		HPE 3par port. Use syntax N:S:P
	
	.PARAMETER DirectConnect
		If present, configure port for a direct connection to a host
		By default, the port is configured as fabric attached
  	
	.EXAMPLE
    	Set-3parFCPORTS -Ports 1:2:1
		Configure 3PAR port 1:2:1 as Fibre Channel connected to a fabric 
	.EXAMPLE
    	Set-3parFCPORTS -Ports 1:2:1 -DirectConnect
		Configure 3PAR port 1:2:1 as Fibre Channel connected to host ( no SAN fabric) 
	.EXAMPLE		
		Set-3parFCPORTS -Ports 1:2:1,1:2:2 
		Configure 3PAR ports 1:2:1 and 1:2:2 as Fibre Channel connected to a fabric 
		
  .Notes
    NAME:  Set-3parFCPORTS
    LASTEDIT: Nov 2012
    KEYWORDS: Set-3parFCPORTS
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe
 #>
 
[CmdletBinding()]
	Param(
			[Parameter(Position=0, Mandatory=$false)]
			[System.String]
			$Ports,
			
			[Parameter(Position=1, Mandatory=$false)]
			[Switch]
			$DirectConnect,
			
			[Parameter(Position=2, Mandatory=$false)]
			[Switch]
			$Demo,
			
			[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
			$SANConnection = $global:SANConnection 
		)
$Port_Pattern = "(\d):(\d):(\d)"	

foreach ($P in $Ports)
{
	if ( $p -match $Port_Pattern)
	{
		Write-DebugLog "Set port $p offline " $Info
		$Cmds = "controlport offline -f $p"
		Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds
		
		$PortConfig = "point"
		$PortMsg    = "Fabric ( Point mode)"
		
		if ($DirectConnect)
		{
			$PortConfig = "loop"
			$PortMsg    = "Direct connection ( loop mode)"
		}
		Write-DebugLog "Configuring port $p as $PortMsg " $Info
		$Cmds= "controlport config host -ct $PortConfig -f $p"
		Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds

		Write-DebugLog "Resetting port $p " $Info
		$Cmds="controlport rst -f $p"
		Invoke-3parCLICmd -Connection $SANConnection  -cmds $Cmds	
		
		Write-DebugLog "FC port $P is configured" $Info
		return 
	}
	else
	{
		Write-DebugLog "Port $p is not in correct format N:S:P. No action is taken" $Info
		return "FAILURE : Port $p is not in correct format N:S:P. No action is taken"
	}	
}


} # END FUNCTION Set-3parFCPORTS

#EndRegion Host configuration

#Region LUN Provisionning

############################################################################################################################################
## FUNCTION New-3parCPG
############################################################################################################################################

Function New-3parCPG
{
<#
  .SYNOPSIS
    The New-3parCPG command creates a Common Provisioning Group (CPG).
  
  .DESCRIPTION
    Note : This cmdlet (New-3parCPG) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-CPG) instead.
  
    The New-3parCPG command creates a Common Provisioning Group (CPG).
        
  .EXAMPLE
    New-3parCPG -cpgName "MyCPG" -Size 32G	-RAIDType r1 
	 Creates a CPG named MyCPG with initial size of 32GB and Raid configuration is r1 (RAID 1)
	 
  .EXAMPLE 
	New-3parCPG -cpgName asCpg

  .EXAMPLE 
	New-3parCPG -cpgName asCpg1 -TemplateName temp

  .EXAMPLE	
	New-3parCPG -cpgName asCpg1 -AW 1
	
  .EXAMPLE	
	New-3parCPG -cpgName asCpg1 -SDGS 1
	
  .EXAMPLE	
	New-3parCPG -cpgName asCpg1 -SDGL 12241
	
  .EXAMPLE	
	New-3parCPG -cpgName asCpg1 -saLD_name XYZ
	
  .EXAMPLE	
	New-3parCPG -cpgName asCpg1 -sdLD_name XYZ
	
  .EXAMPLE	
	New-3parCPG -cpgName asCpg1 -RAIDType r1	
	
  .PARAMETER TemplateName
	Use the options defined in template <template_name>. The template is
	created using the createtemplate command.  Options specified in the
	template are read-only or read-write. The read-write options may be
	overridden with new options at the time of their creation, but read-only
	options may not be overridden at the time of creation.

	Options not explicitly specified in the template take their default
	values, and all of these options are either read-only or read-write
	(using the -nro or -nrw options of the createtemplate command).
		
  .PARAMETER AW
	Specifies the percentage of used snapshot administration or snapshot
	data space that results in a warning alert. A percent value of 0
	disables the warning alert generation. The default is 0.
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER SDGS
	Specifies the growth increment, the amount of logical disk storage
	created on each auto-grow operation. The default growth increment may
	vary according to the number of controller nodes in the system. If <size>
	is non-zero it must be 8G or bigger. The size can be specified in MB (default)
	or GB (using g or G) or TB (using t or T). A size of 0 disables the auto-grow
	feature. The following table displays the default and minimum growth
	increments per number of nodes:
					Number of Nodes       Default     Minimum
						  1-2               32G          8G
						  3-4               64G         16G
						  5-6               96G         24G
						  7-8              128G         32G

  .PARAMETER SDGL
	Specifies that the auto-grow operation is limited to the specified
	storage amount. The storage amount can be specified in MB (default) or
	GB (using g or G) or TB (using t or T). A size of 0 (default) means no
	limit is enforced.  To disable auto-grow, set the limit to 1.

  .PARAMETER SDGW
	Specifies that the threshold of used logical disk space, when exceeded,
	results in a warning alert. The size can be specified in MB (default) or
	GB (using g or G) or TB (using t or T). A size of 0 (default) means no
	warning limit is enforced. To set the warning for any used space,
	set the limit to 1.

  .PARAMETER saLD_name
	Specifies that existing logical disks are added to the CPG and are used
	for snapshot admin (SA) space allocation. The <LD_name> argument can be
	repeated to specify multiple logical disks.
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER sdLD_name
	Specifies that existing logical disks are added to the CPG and are used
	for snapshot data (SD) space allocation. The <LD_name> argument can be
	repeated to specify multiple logical disks.
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER Domain
	Specifies the name of the domain with which the object will reside. The
	object must be created by a member of a particular domain with Edit or
	Super role. The default is to create it in the current domain, or
	no domain if the current domain is not set.

  .PARAMETER RAID_type
	Specifies the RAID type of the logical disk: r0 for RAID-0, r1 for
	RAID-1, r5 for RAID-5, or r6 for RAID-6. If no RAID type is specified,
	then the default is r6.

  .PARAMETER SSZ
	Specifies the set size in terms of chunklets. The default depends on
	the RAID type specified: 2 for RAID-1, 4 for RAID-5, and 8 for RAID-6.

  .PARAMETER RS
	Specifies the number of sets in a row. The <size> is a positive integer.
	If not specified, no row limit is imposed.

  .PARAMETER SS
	Specifies the step size from 32 KB to 512 KB. The step size should be a
	power of 2 and a multiple of 32. The default value depends on raid type and
	device type used. If no value is entered and FC or NL drives are used, the
	step size defaults to 256 KB for RAID-0 and RAID-1, and 128 KB for RAID-5.
	If SSD drives are used, the step size defaults to 32 KB for RAID-0 and
	RAID-1, and 64 KB for RAID-5. For RAID-6, the default is a function of the
	set size.

  .PARAMETER HA
	Specifies that the layout must support the failure of one port pair,
	one cage, or one drive magazine (mag). This option has no meaning
	for RAID-0. The default is cage availability.

  .PARAMETER CH
	Specifies the chunklet location characteristics: either first (attempt
	to use the lowest numbered available chunklets) or last(attempt to use
	the highest numbered available chunklets). If no argument is specified,
	the default characteristic is first.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	              
  .Notes
    NAME:  New-3parCPG 
    LASTEDIT: 15/11/2015
    KEYWORDS: New-3parCPG
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$cpgName,	
	
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$TemplateName,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$AW,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$SDGS,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$SDGL,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$SDGW,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$saLD_name,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$sdLD_name,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$Domain,
		
		[Parameter(Position=9, Mandatory=$false)]
		[System.String]
		$RAIDType,
		
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]
		$SSZ,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$RS,
		
		[Parameter(Position=12, Mandatory=$false)]
		[System.String]
		$SS,
		
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$HA,
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$CH,
		
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In New-3parCPG - validating input values" $Debug 
	
	#####
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting new-3parCPG since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting new-3parCPG since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection 
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	if(!($cpgName))
	{
		write-debuglog " No CPG name specified  - No action required" "INFO:"
		Get-Help New-3parCPG
		return
	}
	
	$CreateCPGCmd =" createcpg -f" 
	
	if($TemplateName)
	{
		$CreateCPGCmd += " -templ $TemplateName "
	}
	if($AW)
	{
		$CreateCPGCmd += " -aw $AW "
	}
	if($SDGS)
	{
		$CreateCPGCmd += " -sdgs $SDGS "
	}
	if($SDGL)
	{
		$CreateCPGCmd += " -sdgl $SDGL "
	}
	if($SDGW)
	{
		$CreateCPGCmd += " -sdgw $SDGW "
	}
	if($saLD_name)
	{
		$CreateCPGCmd += " -sa $saLD_name "
	}
	if($sdLD_name)
	{
		$CreateCPGCmd += " -sd $sdLD_name "
	}
	if($Domain)
	{
		$CreateCPGCmd += " -domain $Domain "
	}
	if($RAIDType)
	{
		$CreateCPGCmd += " -t $RAIDType "
	}
	if($SSZ)
	{
		$CreateCPGCmd += " -ssz $SSZ "
	}
	if($RS)
	{
		$CreateCPGCmd += " -rs $RS "
	}
	if($SS)
	{
		$CreateCPGCmd += " -ss $SS "
	}
	if($HA)
	{
		$a = "port","cage","mag"
		$l=$HA
		if($a -eq $l)
		{
			$CreateCPGCmd += " -ha $HA "			
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting  New-3parCPG since -HA $HA in incorrect "
			Return "FAILURE : -HA :- $HA is an Incorrect HA  [ port | cage | mag ]  can be used only . "
		}
		$CreateCPGCmd += " -ha $HA "
	}
	if($CH)
	{		
		$a = "first","last"
		$l=$CH
		if($a -eq $l)
		{
			$CreateCPGCmd += " -ch $CH "			
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting  New-3parCPG since -CH $CH in incorrect "
			Return "FAILURE : -CH :- $CH is an Incorrect CH  [ first | last ]  can be used only . "
		}	
	}
	
	$CreateCPGCmd += " $cpgName"
	
	$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreateCPGCmd	
	return $Result1
	
} # End of NEW-3parCPG

############################################################################################################################################
## FUNCTION NEW-3parVVSet
############################################################################################################################################

Function New-3parVVSet
{
<#
  .SYNOPSIS
    Creates a new VolumeSet 
  
  .DESCRIPTION
     Note : This cmdlet (New-3parVVSet) is deprecated and will be removed in a 
	 subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-VvSet) instead.
  
	 Creates a new VolumeSet
        
  .EXAMPLE
    New-3parVVSet -vvSetName "MyVolumeSet"  
	Creates a VolumeSet named MyVolumeSet
		
  .EXAMPLE	
	New-3parVVSet -vvSetName "MYVolumeSet" -Domain MyDomain
	Creates a VolumeSet named MyVolumeSet in the domain MyDomain
	
  .EXAMPLE
 	New-3parVVSet -vvSetName "MYVolumeSet" -Domain MyDomain -vvName "MyVV"
	Creates a VolumeSet named MyVolumeSet in the domain MyDomain and adds VV "MyVV" to that vvset
	
  .EXAMPLE
	New-3parVVSet -vvSetName "MYVolumeSet" -vvName "MyVV"
	adds vv "MyVV"  to existing vvset "MyVolumeSet" if vvset exist, if not it will create vvset and adds vv to vvset
	
  .EXAMPLE
	New-3parVVSet -vvSetName asVVset2 -vvName "as4 as5 as6"
	
  .EXAMPLE
	New-3parVVSet -vvSetName set:asVVset3 -Add -vvName as3
	
  .PARAMETER vvSetName 
    Specify new name of the VolumeSet
	
  .PARAMETER Domain 
    Specify the domain where the Volume set will reside
  
  .PARAMETER vvName 
    Specify the VV  to add  to the Volume set 

  .PARAMETER Comment 
     Specifies any comment or additional information for the set.	
	
  .PARAMETER Count
	Add a sequence of <num> VVs starting with "vvname". vvname should
	be of the format <basename>.<int>
	For each VV in the sequence, the .<int> suffix of the vvname is
	incremented by 1.

  .PARAMETER Add 
	Specifies that the VVs listed should be added to an existing set. At
	least one VV must be specified.	
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection	
              
  .Notes
    NAME:  New-3parVVSet 
    LASTEDIT: 05/11/2015
    KEYWORDS: New-3parVVSet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$vvSetName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Add,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Count,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Comment,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Domain,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$vvName,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		

	Write-DebugLog "Start: In New-3parVVSet - validating input values" $Debug 
	if (!($vvSetName))
	{
		Write-DebugLog "Stop: Exiting new-3parVVSet since no values specified for vvset" $Debug
		Get-Help New-3parVVSet
		return
	}
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting new-3parVVSet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting new-3parVVSet since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$CreateVolumeSetCmd = "createvvset "
	
	if($Add) 
	{
		$CreateVolumeSetCmd += " -add "			
	}
	if($Count) 
	{
		$CreateVolumeSetCmd += " -cnt $Count "			
	}
	if($Comment) 
	{
		$CreateVolumeSetCmd += " -comment $Comment "			
	}
	if($Domain) 
	{
		$CreateVolumeSetCmd += " -domain $Domain "			
	}
	if($vvSetName) 
	{
		$CreateVolumeSetCmd += " $vvSetName "			
	}
	if($vvName)
	{
		$CreateVolumeSetCmd += " $vvName "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreateVolumeSetCmd
	if($Add)
	{
		if([string]::IsNullOrEmpty($Result))
		{
			return "Success : New-3parVVSet command executed vv : $vvName is added to vvSet : $vvSetName"
		}
		else
		{
			return $Result
		}
	}	
	else
	{
		if([string]::IsNullOrEmpty($Result))
		{
			return "Success : New-3parVVSet command executed vvSet : $vvSetName is created with vv : $vvName"
		}
		else
		{
			return $Result
		}			
	}		
	
} # End of New-3parVVSet

############################################################################################################################################
## FUNCTION New-3parVV
############################################################################################################################################

Function New-3parVV
{
<#
  .SYNOPSIS
    Creates a vitual volume.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Vv) instead.
  
	Creates a vitual volume.
	
  .EXAMPLE	
	New-3parVV

  .EXAMPLE
	New-3parVV -vvName AVV

  .EXAMPLE
	New-3parVV -vvName AVV -CPGName ACPG

  .EXAMPLE
	New-3parVV -vvName XX -CPGName ZZ

  .EXAMPLE
	New-3parVV -vvName AVV -CPGName ZZ

  .EXAMPLE
	New-3parVV -vvName AVV1 -CPGName ZZ -Force

  .EXAMPLE
	New-3parVV -vvName AVV -CPGName ZZ -Force -tpvv

  .EXAMPLE
	New-3parVV -vvName AVV -CPGName ZZ -Force -Template Test_Template
        
  .EXAMPLE
    New-3parVV -vvName PassThru-Disk -Size 100g -CPGName HV -vvSetName MyVolumeSet
	The command creates a new volume named PassThru-disk of size 100GB.
	The volume is created under the HV CPG group and will be contained inside the MyvolumeSet volume set.
	If MyvolumeSet does not exist, the command creates a new volume set.	

  .EXAMPLE
    New-3parVV -vvName PassThru-Disk1 -Size 100g -CPGName MyCPG -tpvv -minalloc 2048 -vvSetName MyVolumeSet
	The command creates a new thin provision volume named PassThru-disk1 of size 100GB.
	The volume is created under the MyCPG CPG group and will be contained inside the MyvolumeSet volume set.
	If MyvolumeSet does not exist, the command creates a new volume set and allocates minimum 2048MB.
	
  .PARAMETER vvName 
    Specify new name of the virtual volume
	
  .PARAMETER Force
	Force to execute
	
  .PARAMETER Size 
    Specify the size of the new virtual volume. Valid input is: 1 for 1 MB , 1g or 1G for 1GB , 1t or 1T for 1TB
	
  .PARAMETER CPGName
    Specify the name of CPG
	
  .PARAMETER Template
	Use the options defined in template <tname>.  
		
  .PARAMETER Volume_ID
	Specifies the ID of the volume. By default, the next available ID is chosen.

  .PARAMETER Count
	Specifies the number of identical VVs to create. 

  .PARAMETER Shared
	Specifies that the system will try to share the logical disks among the VVs. 

  .PARAMETER Wait
	If the command would fail due to the lack of clean space, the -wait
            
  .PARAMETER vvSetName
    Specify the name of a volume set. If it does not exist, the command will also create new volume set.
	
  .PARAMETER minalloc	
	This option specifies the default allocation size (in MB) to be set
	
  .PARAMETER Snp_aw
	Enables a snapshot space allocation warning. A warning alert is
	generated when the reserved snapshot space of the VV
	exceeds the indicated percentage of the VV size.

  .PARAMETER Snp_al
	Sets a snapshot space allocation limit. The snapshot space of the
	VV is prevented from growing beyond the indicated
	percentage of the virtual volume size.
	
  .PARAMETER Comment
	Specifies any additional information up to 511 characters for the
	volume.
		
  .PARAMETER tdvv
	Deprecated. Should use -dedup.

  .PARAMETER tpvv
	Specifies that the volume should be a thinly provisioned volume.
		
  .PARAMETER snp_cpg 
	Specifies the name of the CPG from which the snapshot space will be
	allocated.
		
  .PARAMETER sectors_per_track
	Defines the virtual volume geometry sectors per track value that is
	reported to the hosts through the SCSI mode pages. The valid range is
	between 4 to 8192 and the default value is 304.
		
  .PARAMETER minalloc 
	This option specifies the default allocation size (in MB) to be set.
	Allocation size specified should be at least (number-of-nodes * 256) and
	less than the CPG grow size.

  .PARAMETER heads_per_cylinder
	Allows you to define the virtual volume geometry heads per cylinder
	value that is reported to the hosts though the SCSI mode pages. The
	valid range is between 1 to 255 and the default value is 8.
		
  .PARAMETER snp_aw
	Enables a snapshot space allocation warning. A warning alert is
	generated when the reserved snapshot space of the VV
	exceeds the indicated percentage of the VV size.

  .PARAMETER snp_al
	Sets a snapshot space allocation limit. The snapshot space of the
	VV is prevented from growing beyond the indicated
	percentage of the virtual volume size.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parVV  
    LASTEDIT: 05/11/2015
    KEYWORDS: New-3parVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$vvName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Size="1G", 	# Default is 1GB
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $CPGName,		
	
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $vvSetName,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Force,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Template,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Volume_ID,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Count,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Wait,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Comment,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Shared,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$tpvv,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$tdvv,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Snp_Cpg,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Sectors_per_track,
		
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Heads_per_cylinder,
		
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $minAlloc,
		
		[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Snp_aw,
		
		[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Snp_al,
		
		[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In New-vVolume - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
         
	if ($vvName)
	{
		if ($CPGName)
		{
			## Check CPG Name 
			##
			if ( !( test-3PARObject -objectType 'cpg' -objectName $CPGName -SANConnection $SANConnection))
			{
				write-debuglog " CPG $CPGName does not exist. Please use New-3parCPG to create a CPG before creating vv" "INFO:" 
				return "FAILURE : No cpg $cpgName found"
			}		

			## Check vv Name . Create if necessary
			##
			if (test-3PARObject -objectType 'vv' -objectName $vvName -SANConnection $SANConnection)
			{
				write-debuglog " virtual Volume $vvName already exists. No action is required" "INFO:" 
				return "FAILURE : vv $vvName already exists"
			}
			
			$CreateVVCmd = "createvv"
			
			if($Force)
			{
				$CreateVVCmd +=" -f "
			}
			#####v0.2 
			if ($minAlloc)
			{
				if(!($tpvv))
				{
					return "FAILURE : -minalloc optiong should not use without -tpvv"
				}
			}					
			if ($tpvv)
			{
				$CreateVVCmd += " -tpvv "
				if ($minAlloc)
				{
					$ps3parbuild = Get-3parVersion -number -SANConnection $SANConnection
					if($ps3parbuild -ge "3.2.1" -Or $ps3parbuild -ge "3.1.1")
					{
						$CreateVVCmd += " -minalloc $minAlloc"
					}
					else
					{
						return "FAILURE : -minalloc option not supported in this HPE 3par OS version: $ps3parbuild"
					}
				}
			}
			if($tdvv)
			{
				$CreateVVCmd +=" -tdvv "
			}
			#####
			if($Template)
			{
				$CreateVVCmd +=" -templ $Template "
			}
			if($Volume_ID)
			{
				$CreateVVCmd +=" -i $Volume_ID "
			}
			if($Count)
			{
				$CreateVVCmd +=" -cnt $Count "
				if($Shared)
				{
					if(!($tpvv))
					{
						$CreateVVCmd +=" -shared "
					}
				}
			}
			if($Wait)
			{
				if(!($tpvv))
				{
					$CreateVVCmd +=" -wait $Wait "
				}
			}
			if($Comment)
			{
				$CreateVVCmd +=" -comment $Comment "
			}
			if($Sectors_per_track)
			{
				$CreateVVCmd +=" -spt $Sectors_per_track "
			}
			if($Heads_per_cylinder)
			{
				$CreateVVCmd +=" -hpc $Heads_per_cylinder "
			}
			if($Snp_Cpg)
			{
				$CreateVVCmd +=" -snp_cpg $CPGName "
			}
			if($Snp_aw)
			{
				$CreateVVCmd +=" -snp_aw $Snp_aw "
			}
			if($Snp_al)
			{
				$CreateVVCmd +=" -snp_al $Snp_al "
			}
			
			$CreateVVCmd +=" $CPGName $vvName $Size"
			
			$Result1 = $Result2 = $Result3 = ""
			$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreateVVCmd
			#write-host "Result = ",$Result1
			if([string]::IsNullOrEmpty($Result1))
			{
				$successmsg += "Success : Created vv $vvName"
			}
			else
			{
				$failuremsg += "FAILURE : While creating vv $vvName"
			}
			write-debuglog " Creating Virtual Name with the command --> $CreatevvCmd" "INFO:" 

			# If VolumeSet is specified then add vv to existing Volume Set
			if ($vvSetName)
			{
				## Check vvSet Name 
				##
				if ( !( test-3PARObject -objectType 'vv set' -objectName $vvSetName -SANConnection $SANConnection))
				{
					write-debuglog " Volume Set $vvSetName does not exist. Use New-vVolumeSet to create a Volume set before creating vLUN" "INFO:" 
					$CreatevvSetCmd = "createvvset $vvSetName"
					$Result2 =Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreatevvSetCmd
					if([string]::IsNullOrEmpty($Result2))
					{
						$successmsg += "Success : Created vvset $vvSetName"
					}
					else
					{
						$failuremsg += "FAILURE : While creating vvset $vvSetName"					
					}
					write-debuglog " Creating Volume set with the command --> $CreatevvSetCmd" "INFO:"
				}
				
				$AddVVCmd = "createvvset -add $vvSetName $vvName" 	## Add vv to existing Volume set
				$Result3 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $AddVVCmd
				if([string]::IsNullOrEmpty($Result3))
				{
					$successmsg += "Success : vv $vvName added to vvset $vvSetName"
				}
				else
				{
					$failuremsg += "FAILURE : While adding vv $vvName to vvset $vvSetName"					
				}					
				write-debuglog " Adding vv to Volume set with the command --> $AddvvCmd" "INFO:"
			}
			if(([string]::IsNullOrEmpty($Result1)) -and ([string]::IsNullOrEmpty($Result2)) -and ([string]::IsNullOrEmpty($Result3)))
			{
				return $successmsg 
			}
			else
			{
				return $failuremsg
			}			
		}
		else
		{
			write-debugLog "No CPG Name specified for new virtual volume. Skip creating virtual volume" "ERR:" 
			return "FAILURE : No CPG name specified"
		}		
	}
	else
	{
		write-debugLog "No name specified for new virtual volume. Skip creating virtual volume" "ERR:"
		Get-help New-3parVV
		return	
	}		 
} # End New-3parVV

############################################################################################################################################
## FUNCTION Get-3parVV
############################################################################################################################################

Function Get-3parVV
{
<#
  .SYNOPSIS
    Get list of virtual volumes per Domain and CPG
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Vv) instead.
  
    Get list of virtual volumes per Domain and CPG
        
  .EXAMPLE
    Get-3parVV
	List all virtual volumes
	
  .EXAMPLE	
	Get-3parVV -vvName PassThru-Disk 
	List virtual volume PassThru-Disk
	
  .EXAMPLE	
	Get-3parVV -vvName PassThru-Disk -Domain mydom
	List volumes in the domain specified DomainName	
	
  .PARAMETER vvName 
    Specify name of the volume. 
	If prefixed with 'set:', the name is a volume set name.	

  .PARAMETER DomainName 
    Queries volumes in the domain specified DomainName.
	
  .PARAMETER CPGName
    Queries volumes that belongs to a given CPG.	

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parVV
    LASTEDIT: 05/11/2015
    KEYWORDS: Get-3parVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$vvName,

		[Parameter(Position=1, Mandatory=$false)]
		[System.String[]]
		$DomainName,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String[]]
		$CPGName,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$GetvVolumeCmd = "showvvcpg"

	if ($DomainName)
	{
		$GetvVolumeCmd += " -domain $DomainName"
	}	
	if ($vvName)
	{
		$GetvVolumeCmd += " $vvName"
	}

	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetvVolumeCmd
	write-debuglog "Get list of Virtual Volumes" "INFO:" 
	if($Result -match "no vv listed")
	{
		return "FAILURE: No vv $vvName found"
	}

	#$tempFile = [IO.Path]::GetTempFileName()
	$Result = $Result | where { ($_ -notlike '*total*') -and ($_ -notlike '*---*')} ## Eliminate summary lines
	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -2  
		foreach ($s in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			$s= $s.Trim() -replace ',Adm,Snp,Usr,Adm,Snp,Usr',',Adm(MB),Snp(MB),Usr(MB),New_Adm(MB),New_Snp(MB),New_Usr(MB)' 	

			Add-Content -Path $tempFile -Value $s
		}

		if($CPGName) { Import-Csv $tempFile | where  {$_.CPG -like $CPGName} }
		else { Import-Csv $tempFile }
				
		del $tempFile
	}	
	else
	{
		Write-DebugLog $result "INFO:"
		return "FAILURE: No vv $vvName found error:$result "
	}	

} # END GET-3parVV

############################################################################################################################################
## FUNCTION Remove-3parVV
############################################################################################################################################

Function Remove-3parVV
{
<#
  .SYNOPSIS
    Delete virtual volumes 
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Vv) instead.
  
	Delete virtual volumes         

  .EXAMPLE	
	Remove-3parVV -vvName PassThru-Disk -whatif
	Dry-run of deleted operation on vVolume named PassThru-Disk
		
  .EXAMPLE	
	Remove-3parVV -vvName VV1 -force -Snaponly
	
  .EXAMPLE	
	Remove-3parVV -vvName VV1 -force -Expired
	
  .EXAMPLE		
	Remove-3parVV -vvName PassThru-Disk -force
	Forcibly deletes vVolume named PassThru-Disk 
		
  .PARAMETER vvName 
    Specify name of the volume to be removed. 
	
  .PARAMETER whatif
    If present, perform a dry run of the operation and no VLUN is removed	
	
  .PARAMETER force
	If present, perform forcible delete operation
	
  .PARAMETER Pat
    Specifies that specified patterns are treated as glob-style patterns and that all VVs matching the specified pattern are removed.
	
  .PARAMETER Stale
	Specifies that all stale VVs can be removed.       

  .PARAMETER  Expired
	Remove specified expired volumes.
       
  .PARAMETER  Snaponly
	Remove the snapshot copies only.

  .PARAMETER Cascade
	Remove specified volumes and their descendent volumes as long as none has an active VLUN. 

  .PARAMETER Nowait
	Prevents command blocking that is normally in effect until the vv is removed. 
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parVV  
    LASTEDIT: 05/11/2015
    KEYWORDS: Remove-3parVV 
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$vvName,

		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$whatif, 
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$force, 
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Pat, 
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Stale, 
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Expired, 
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Snaponly, 
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Cascade, 
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Nowait, 
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Remove-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if (!($vvName))
	{
		write-debuglog "no Virtual Volume name sprcified to remove." "INFO:"
		Get-help remove-3parvv
		return
	}
	if (!(($force) -or ($whatif)))
	{
		write-debuglog "no option selected to remove/dry run of vv, Exiting...." "INFO:"
		return "FAILURE : Specify -force or -whatif options to delete or delete dryrun of a virtual volume"
	}
	
	######
	$ListofLuns = Get-3parVvList -vvName $vvName -SANConnection $SANConnection
	if($ListofLuns -match "FAILURE")
	{
		return "FAILURE : No vv $vvName found"
	}
	$ActionCmd = "removevv "
	if ($Nowait)
	{
		$ActionCmd += "-nowait "
	}
	if ($Cascade)
	{
		$ActionCmd += "-cascade "
	}
	if ($Snaponly)
	{
		$ActionCmd += "-snaponly "
	}
	if ($Expired)
	{
		$ActionCmd += "-expired "
	}
	if ($Stale)
	{
		$ActionCmd += "-stale "
	}
	if ($Pat)
	{
		$ActionCmd += "-pat "
	}
	if ($whatif)
	{
		$ActionCmd += "-dr "
	}
	else
	{
		$ActionCmd += "-f "
	}
	$successmsglist = @()
	#$failuremsglist = @()
	if ($ListofLuns)
	{
		foreach ($vVolume in $ListofLuns)
		{
			$vName = $vVolume.Name
			if ($vName)
			{
				$RemoveCmds = $ActionCmd + " $vName $($vVolume.Lun)"
				$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $removeCmds
				if( ! (Test-3PARObject -objectType "vv" -objectName $vName -SANConnection $SANConnection))
				{
					$successmsglist += "Success : Removing vv $vName"
				}
				else
				{
					$successmsglist += "FAILURE : $Result1"
				}

				write-debuglog "Removing Virtual Volumes with command $removeCmds" "INFO:" 
			}
		}
		return $successmsglist		
	}	
	else
	{
		Write-DebugLog "no Virtual Volume found for $vvName." $Info
		return "FAILURE : No vv $vvName found"
	}
	

} # END REMOVE-3parVV

############################################################################################################################################
## FUNCTION New-3parVLUN
############################################################################################################################################

Function New-3parVLUN
{
<#
  .SYNOPSIS
    The New-3parVLUN command creates a VLUN template that enables export of a
    Virtual Volume as a SCSI VLUN to a host or hosts. A SCSI VLUN is created when the
    current system state matches the rule established by the VLUN template
  
  .DESCRIPTION
    Note : This cmdlet (New-3parvLUN) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-vLun) instead.
  
	The New-3parVLUN command creates a VLUN template that enables export of a
    Virtual Volume as a SCSI VLUN to a host or hosts. A SCSI VLUN is created when the
    current system state matches the rule established by the VLUN template.

    There are four types of VLUN templates:
        Port presents - created when only the node:slot:port are specified. The
        VLUN is visible to any initiator on the specified port.

        Host set - created when a host set is specified. The VLUN is visible to
        the initiators of any host that is a member of the set.

        Host sees - created when the hostname is specified. The VLUN is visible
        to the initiators with any of the host's WWNs.

        Matched set - created when both hostname and node:slot:port are
        specified. The VLUN is visible to initiators with the host's WWNs only
        on the specified port.

    Conflicts between overlapping VLUN templates are resolved using
    prioritization, with port presents templates having the lowest priority and
    matched set templates having the highest.
        
  .EXAMPLE
    New-3parVLUN -vvName xyz -LUN 1 -HostName xyz

  .EXAMPLE
    New-3parVLUN -vvSet set:xyz -NoVcn -LUN 2 -HostSet set:xyz
	
  .PARAMETER vvName 
	Specifies the virtual volume or virtual volume set name, using up to 31 characters in length.
	The volume name is provided in the syntax of basename.int.  The VV set
	name must start with "set:".
	
  .PARAMETER vvSet 
	Specifies the virtual volume or virtual volume set name, using up to 31 characters in length.
	The volume name is provided in the syntax of basename.int.  The VV set
	name must start with "set:".
	
  .PARAMETER LUN
	Specifies the LUN as an integer from 0 through 16383. Alternatively
	n+ can be used to indicate a LUN should be auto assigned, but be
	a minimum of n, or m-n to indicate that a LUN should be chosen in the
	range m to n. In addition the keyword auto may be used and is treated
	as 0+.

  .PARAMETER HostName
	Specifies the host where the LUN is exported, using up to 31 characters.

  .PARAMETER HostSet
	Specifies the host set where the LUN is exported, using up to 31
	characters in length. The set name must start with "set:".

  .PARAMETER NSP
	Specifies the system port of the virtual LUN export.
	node
		Specifies the system node, where the node is a number from 0
		through 7.
	slot
		Specifies the PCI bus slot in the node, where the slot is a
		number from 0 through 5.
	port
		Specifies the port number on the FC card, where the port number
		is 1 through 4.

  .PARAMETER Cnt
	Specifies that a sequence of VLUNs, as specified by the num argument,
	are exported to the same system port and host that is created. The num
	argument can be specified as any integer. For each VLUN created, the
	.int suffix of the VV_name specifier and LUN are incremented by one.

  .PARAMETER NoVcn
	Specifies that a VLUN Change Notification (VCN) not be issued after
	export. For direct connect or loop configurations, a VCN consists of a
	Fibre Channel Loop Initialization Primitive (LIP). For fabric
	configurations, a VCN consists of a Registered State Change
	Notification (RSCN) that is sent to the fabric controller.

  .PARAMETER Ovrd
	Specifies that existing lower priority VLUNs will be overridden, if
	necessary. Can only be used when exporting to a specific host.

	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  	  New-3parVLUN  
    LASTEDIT: 05/11/2015
    KEYWORDS: New-3parVLUN
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$vvName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$vvSet,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$LUN,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$NSP,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$HostSet,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$HostName,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$Cnt,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$NoVcn,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$Ovrd,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In New-3parVLUN - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parVLUN since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parVLUN since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmdVlun = " createvlun -f"
	
	if($Cnt)
	{
		$cmdVlun += " -cnt $Cnt "
	}
	if($NoVcn)
	{
		$cmdVlun += " -novcn "
	}
	if($Ovrd)
	{
		$cmdVlun += " -ovrd "
	}	
	
	##### Added v2.1 : checking the parameter values if vvName or present to empty simply return
	if ($vvName -Or $vvSet)
	{
		if($vvName)
		{
			$cmdVlun += " $vvName "
		}
		else
		{
			if ($vvSet -match "^set:")	
			{
				$cmdVlun += " $vvSet "
			}
			else
			{
				return "Please make sure The VV set name must start with set: Ex:- set:xyz"
			}
		}
		
	}
	else
	{
		Write-DebugLog "No values specified for the parameters vvname. so simply exiting " "INFO:"
		Get-help New-3parVLUN
		return
	}
	
	if($LUN)
	{
		$cmdVlun += " $LUN "
	}
	else
	{
		return " Specifies the LUN as an integer from 0 through 16383."
	}
	
	if($NSP)
	{
		$cmdVlun += " $NSP "
	}
	elseif($HostSet)
	{
		if ($HostSet -match "^set:")	
		{
			$cmdVlun += " $HostSet "
		}
		else
		{
			return "Please make sure The set name must start with set: Ex:- set:xyz"
		}
	}
	elseif($HostName)
	{
		$cmdVlun += " $HostName "
	}
	else
	{
		return "Please select atlist any one from NSP | HostSet | HostName"
	}
	
	$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmdVlun
	write-debuglog "Presenting $vvName to server $item with the command --> $cmdVlun" "INFO:" 
	if($Result1 -match "no active paths")
	{
		$successmsg += $Result1
	}
	elseif([string]::IsNullOrEmpty($Result1))
	{
		$successmsg += "Success : $vvName exported to host $objName`n"
	}
	else
	{
		$successmsg += "FAILURE : While exporting vv $vvName to host $objName Error : $Result1`n"
	}		
	
	return $successmsg
	
} # End NEW-3parVLUN
############################################################################################################################################
## FUNCTION Get-3parVLUN
############################################################################################################################################
Function Get-3parVLUN
{
<#
  .SYNOPSIS
    Get list of LUNs that are exported/ presented to hosts
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parVLUN) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-vLun) instead.
  
    Get list of LUNs that are exported/ presented to hosts
        
  .EXAMPLE
    Get-3parVLUN 
	List all exported volumes

  .EXAMPLE	
	Get-3parVLUN -vvName PassThru-Disk 
	List LUN number and hosts/host sets of LUN PassThru-Disk
	
  .PARAMETER vvName 
    Specify name of the volume to be exported. 
	If prefixed with 'set:', the name is a volume set name.
	

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parVLUN  
    LASTEDIT: 02/17/2013
    KEYWORDS: Get-3parVLUN
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$vvName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$PresentTo, 	
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parVLUN - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parVLUN since SAN connection object values are null/empty" $Debug
				return
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	
	$ListofvLUNs = @()
	
	$GetvLUNCmd = "showvlun -t -showcols VVName,Lun,HostName,VV_WWN "
	if ($vvName)
	{
		$GetvLUNCmd += " -v $vvName"
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetvLUNCmd
	write-debuglog "Get list of vLUN" "INFO:" 
	if($Result -match "Invalid vv name:")
	{
		return "FAILURE : No vv $vvName found"
	}
	
	$Result = $Result | where { ($_ -notlike '*total*') -and ($_ -notlike '*------*')} ## Eliminate summary lines
	if ($Result.Count -gt 1)
	{
		foreach ($s in  $Result[1..$Result.Count] )
		{
			
			$s= $s.Trim()
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			$sTemp = $s.Split(',')
			
			$vLUN = New-Object -TypeName _vLUN
			$vLUN.Name = $sTemp[0]
			$vLUN.LunID = $sTemp[1]
			$vLUN.PresentTo = $sTemp[2]
			$vLUN.vvWWN = $sTemp[3]
			
			$ListofvLUNs += $vLUN			
		}
	}
	else
	{
		write-debuglog "LUN $vvName does not exist. Simply return" "INFO:"
		return "FAILURE : No vLUN $vvName found Error : $Result"
	}
	

	if ($PresentTo)
		{ $ListofVLUNs | where  {$_.PresentTo -like $PresentTo} }
	else
		{ $ListofVLUNs  }
	
} # End GET-3parVLUN

############################################################################################################################################
## FUNCTION Show-3parVLun
############################################################################################################################################
Function Show-3parVLun
{
<#
  .SYNOPSIS
    Get list of LUNs that are exported/ presented to hosts
  
  .DESCRIPTION
    Note : This cmdlet (Show-3parVLun ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-vLun) instead.
  
    Get list of LUNs that are exported/ presented to hosts
        
  .EXAMPLE
    Show-3parVLun 
	List all exported volumes

  .EXAMPLE	
	Show-3parVLun -vvName XYZ 
	List LUN number and hosts/host sets of LUN XYZ
	
  .EXAMPLE	
	Show-3parVLun -Listcols
	
  .EXAMPLE	
	Show-3parVLun -Nodelist 1
	
  .EXAMPLE	
	Show-3parVLun -DomainName Aslam_D	
	
  .PARAMETER vvName 
    Specify name of the volume to be exported. 
	If prefixed with 'set:', the name is a volume set name.
	
  .PARAMETER Listcols
	List the columns available to be shown in the -showcols option
	described below (see 'clihelp -col showvlun' for help on each column).

  .PARAMETER Showcols <column>[,<column>...]
	Explicitly select the columns to be shown using a comma-separated list
	of column names.  For this option the full column names are shown in
	the header.
	Run 'showvlun -listcols' to list the available columns.
	Run 'clihelp -col showvlun' for a description of each column.

  .PARAMETER ShowWWN
	Shows the WWN of the virtual volume associated with the VLUN.

  .PARAMETER ShowsPathSummary
	Shows path summary information for active VLUNs

  .PARAMETER Hostsum
	Shows mount point, Bytes per cluster, capacity information from Host Explorer
	and user reserved space, VV size from showvv.

  .PARAMETER ShowsActiveVLUNs
	Shows only active VLUNs.

  .PARAMETER ShowsVLUNTemplates
	Shows only VLUN templates.

  .PARAMETER Hostname {<hostname>|<pattern>|<hostset>}...
	Displays only VLUNs exported to hosts that match <hostname> or
	glob-style patterns, or to the host sets that match <hostset> or
	glob-style patterns(see help on sub,globpat). The host set name must
	start with "set:". Multiple host names, host sets or patterns can
	be repeated using a comma-separated list.

  .PARAMETER VV_name {<VV_name>|<pattern>|<VV_set>}...
	Displays only VLUNs of virtual volumes that match <VV_name> or
	glob-style patterns, or to the vv sets that match <VV-set> or glob-style
	patterns (see help on sub,globpat). The VV set name must start
	with "set:". Multiple volume names, vv sets or patterns can be
	repeated using a comma-separated list (for example -v <VV_name>,
	<VV_name>...).

  .PARAMETER LUN
	Specifies that only exports to the specified LUN are displayed. This
	specifier can be repeated to display information for multiple LUNs.

  .PARAMETER Nodelist
	Requests that only VLUNs for specific nodes are displayed. The node list
	is specified as a series of integers separated by commas (for example
	0,1,2). The list can also consist of a single integer (for example 1).
	
  .PARAMETER Slotlist
	Requests that only VLUNs for specific slots are displayed. The slot list
	is specified as a series of integers separated by commas (for example
	0,1,2). The list can also consist of a single integer (for example 1).

  .PARAMETER Portlist
	Requests that only VLUNs for specific ports are displayed. The port list
	is specified as a series of integers separated by commas ((for example
	1,2). The list can also consist of a single integer (for example 1).

  .PARAMETER Domain_name  
	Shows only the VLUNs whose virtual volumes are in domains with names
	that match one or more of the <domainname_or_pattern> options. This
	option does not allow listing objects within a domain of which the user
	is not a member. Multiple domain names or patterns can be repeated using
	a comma-separated list.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Show-3parVLun  
    LASTEDIT: 02/17/2013
    KEYWORDS: Show-3parVLun
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Listcols,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Showcols, 
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$ShowsWWN,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$ShowsPathSummary,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Hostsum,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$ShowsActiveVLUNs,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$ShowsVLUNTemplates,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Hostname,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$VV_name,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$LUN,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Nodelist,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Slotlist,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Portlist,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$DomainName,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Show-3parVLun - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parVLun since SAN connection object values are null/empty" $Debug
				return
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	
	$cmd = "showvlun "
	
	if($Listcols)
	{
		$cmd += " -listcols " 
	}
	if($Showcols)
	{
		$cmd += " -showcols $Showcols" 
	}
	if($ShowsWWN)
	{
		$cmd += " -lvw " 
	}
	if($ShowsPathSummary)
	{
		$cmd += " -pathsum " 
	}
	if($Hostsum)
	{
		$cmd += " -hostsum " 
	}
	if($ShowsActiveVLUNs)
	{
		$cmd += " -a " 
	}
	if($ShowsVLUNTemplates)
	{
		$cmd += " -t " 
	}
	if($Hostname)
	{
		$cmd += " -host $Hostname" 
	}
	if($VV_name)
	{
		$cmd += " -v $VV_name" 
	}
	if($LUN)
	{
		$cmd += " -l $LUN" 
	}
	if($Nodelist)
	{
		$cmd += " -nodes $Nodelist" 
	}
	if($Slotlist)
	{
		$cmd += " -slots $Slotlist" 
	}
	if($Portlist)
	{
		$cmd += " -ports $Portlist" 
	}
	if($DomainName)
	{
		$cmd += " -domain $DomainName" 
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "Get list of vLUN" "INFO:" 
	
	write-host ""
	return $Result
	
} # End Show-3parVLun



############################################################################################################################################
## FUNCTION Remove-3parVLUN
############################################################################################################################################

Function Remove-3parVLUN
{
<#
  .SYNOPSIS
    Unpresent virtual volumes 
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parVLUN) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-vLun) instead.
  
    Unpresent  virtual volumes 
        
  .EXAMPLE
	Remove-3parVLUN -vvName PassThru-Disk -force
	Unpresent the virtual volume PassThru-Disk to all hosts
	
  .EXAMPLE	
	Remove-3parVLUN -vvName PassThru-Disk -whatif 
	Dry-run of deleted operation on vVolume named PassThru-Disk
	
  .EXAMPLE		
	Remove-3parVLUN -vvName PassThru-Disk -PresentTo INF01  -force
	Unpresent the virtual volume PassThru-Disk only to host INF01.
	all other presentations of PassThru-Disk remain intact.
	
  .EXAMPLE	
	Remove-3parVLUN -PresentTo INF01 -force
	Remove all LUNS presented to host INF01
	
  .EXAMPLE	
	Remove-3parVLUN -vvName CSV* -PresentTo INF01 -force
	Remove all LUNS started with CSV* and presented to host INF01
	
  .EXAMPLE
	Remove-3parVLUN -vvName vol2 -force -Novcn
   
  .EXAMPLE
	Remove-3parVLUN -vvName vol2 -force -Pat
   
  .EXAMPLE
	Remove-3parVLUN -vvName vol2 -force -Remove_All   
	It removes all vluns associated with a VVOL Container.
	
  .PARAMETER whatif
    If present, perform a dry run of the operation and no VLUN is removed	

  .PARAMETER force
	If present, perform forcible delete operation
	
  .PARAMETER vvName 
    Specify name of the volume to be exported. 
	
  .PARAMETER PresentTo 
    Specify name of the hosts where vLUns are presented to.
	
  .PARAMETER Novcn
	Specifies that a VLUN Change Notification (VCN) not be issued after removal of the VLUN.
		
  .PARAMETER Pat
	Specifies that the <VV_name>, <LUN>, <node:slot:port>, and <host_name> specifiers are treated as glob-style patterns and that all VLUNs matching the specified pattern are removed.
	
  .PARAMETER Remove_All
	It removes all vluns associated with a VVOL Container.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parVLUN  
    LASTEDIT: 05/11/2015
    KEYWORDS: Remove-3parVLUN
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$force, 
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$whatif, 		
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$vvName,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$PresentTo, 		
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Novcn,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Pat,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Remove_All,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Remove-3parVLUN - validating input values" $Debug 
	
	##### 
	if (!(($vvName) -or ($PresentTo)))
	{
		Write-DebugLog "Action required: no vv or no host mentioned - simply exiting " $Debug
		Get-help Remove-3parVLUN
		return
	}
	if(!(($force) -or ($whatif)))
	{
		write-debuglog "no -force or -whatif option selected to remove/dry run of VLUN, Exiting...." "INFO:"
		Get-help Remove-3parVLUN
		return "FAILURE : no -force or -whatif option selected to remove/dry run of VLUN"
	}
	#####
	
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parVLUN since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parVLUN since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if($PresentTo)
	{
		$ListofvLuns = Get-3parVLUN -vvName $vvName -PresentTo $PresentTo -SANConnection $SANConnection
	}
	else
	{
		$ListofvLuns = Get-3parVLUN -vvName $vvName -SANConnection $SANConnection
	}
	if($ListofvLuns -match "FAILURE")
	{
		return "FAILURE : No vLUN $vvName found"
	}
	$ActionCmd = "removevlun "
	if ($whatif)
	{
		$ActionCmd += "-dr "
	}
	else
	{
		if($force)
		{
			$ActionCmd += "-f "
		}		
	}	
	if ($Novcn)
	{
		$ActionCmd += "-novcn "
	}
	if ($Pat)
	{
		$ActionCmd += "-pat "
	}
	if($Remove_All)
	{
		$ActionCmd += " -set "
	}
	if ($ListofvLuns)
	{
		foreach ($vLUN in $ListofvLuns)
		{
			$vName = $vLUN.Name
			if ($vName)
			{
				$RemoveCmds = $ActionCmd + " $vName $($vLun.LunID) $($vLun.PresentTo)"
				$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $RemoveCmds
				write-debuglog "Removing Virtual LUN's with command $RemoveCmds" "INFO:" 
				if ($Result1 -match "Issuing removevlun")
				{
					$successmsg += "Success: Unexported vLUN $vName from $($vLun.PresentTo)"
				}
				elseif($Result1 -match "Dry run:")
				{
					$successmsg += $Result1
				}
				else
				{
					$successmsg += "FAILURE : While unexporting vLUN $vName from $($vLun.PresentTo) "
				}				
			}
		}
		return $successmsg
	}
	
	else
	{
		Write-DebugLog "no vLUN found for $vvName presented to host $PresentTo." $Info
		return "FAILURE : no vLUN found for $vvName presented to host $PresentTo"
	}
	

} # END REMOVE-3parVLUN

############################################################################################################################################
## FUNCTION New-3parHost
############################################################################################################################################
Function New-3parHost
{
<#
  .SYNOPSIS
    Creates a new host.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parHost) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Host) instead.
  
	Creates a new host.
        
  .EXAMPLE
    New-3parHost -HostName HV01A -Persona 2 -WWN 10000000C97B142E
	Creates a host entry named HV01A with WWN equals to 10000000C97B142E
	
  .EXAMPLE	
	New-3parHost -HostName HV01B -Persona 2 -iSCSI
	Creates a host entry named HV01B with iSCSI equals to iqn.1991-06.com.microsoft:dt-391-xp.hq.3par.com
	
  .EXAMPLE
    New-3parHost -HostName HV01A -Persona 2 

  .EXAMPLE New-3parHost -HostName Host3 -iSCSI

  .EXAMPLE New-3parHost -HostName Host4 -iSCSI -Domain ZZZ
	
  .PARAMETER HostName
    Specify new name of the host
	
  .PARAMETER Add
	Add the specified WWN(s) or iscsi_name(s) to an existing host (at least
	one WWN or iscsi_name must be specified).  Do not specify host persona.

  .PARAMETER Domain
	Create the host in the specified domain or domain set. The default is to
	create it in the current domain, or no domain if the current domain is
	not set. The domain set name must start with "set:".

  .PARAMETER Forces
	Forces the tear down of lower priority VLUN exports if necessary.

  .PARAMETER Persona
	Sets the host persona that specifies the personality for all ports
	which are part of the host set.  This selects certain variations in
	scsi command behavior which certain operating systems expect.
	<hostpersonaval> is the host persona id number with the desired
	capabilities.  These can be seen with showhost -listpersona.

  .PARAMETER Location
	Specifies the host's location.

  .PARAMETER IPAddress
	Specifies the host's IP address.

  .PARAMETER OS
	Specifies the operating system running on the host.

  .PARAMETER Model
	Specifies the host's model.

  .PARAMETER Contact
	Specifies the host's owner and contact information.

  .PARAMETER Comment
	Specifies any additional information for the host.

  .PARAMETER NSP
	Specifies the desired relationship between the array port(s) and host
	for target-driven zoning. Multiple array ports can be specified by
	either using a pattern or a comma-separated list.  This option is used
	only when the Smart SAN license is installed.  At least one WWN needs
	to be specified with this option.
	
  .PARAMETER WWN
	Specifies the World Wide Name(WWN) to be assigned or added to an
	existing host. This specifier can be repeated to specify multiple WWNs.
	This specifier is optional.

  .PARAMETER IscsiName
	Host iSCSI name to be assigned or added to a host. This specifier is
	optional.

  .PARAMETER iSCSI
    when specified, it means that the address is an iSCSI address
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parHost  
    LASTEDIT: 05/11/2015
    KEYWORDS: New-3parHost
   
	.Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$HostName,	
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Iscsi,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Add,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Domain,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Forces, 
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Persona = 2,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$Location,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$IPAddress,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$OS,
		
		[Parameter(Position=9, Mandatory=$false)]
		[System.String]
		$Model,
		
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]
		$Contact,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$Comment,
		
		[Parameter(Position=12, Mandatory=$false)]
		[System.String]
		$NSP,
		
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$WWN,
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$IscsiName,
		
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In New-3parHost - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parHost since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parHost since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd ="createhost "
	
	if($Iscsi)
	{
		$cmd +="-iscsi "
	}
	if($Add)
	{
		$cmd +="-add "
	}
	if($Domain)
	{
		$cmd +="-domain $Domain "
	}
	if($Forces)
	{
		$cmd +="-f "
	}
	if($Persona)
	{
		$cmd +="-persona $Persona "
	}
	if($Location)
	{
		$cmd +="-loc $Location "
	}
	if($IPAddress)
	{
		$cmd +="-ip $IPAddress "
	}
	if($OS)
	{
		$cmd +="-os $OS "
	}
	if($Model)
	{
		$cmd +="-model $Model "
	}
	if($Contact)
	{
		$cmd +="-contact $Contact "
	}
	if($Comment)
	{
		$cmd +="-comment $Comment "
	}
	if($NSP)
	{
		$cmd +="-port $NSP "
	}
	if ($HostName)
	{
		$cmd +="$HostName "
	}
	else
	{
		write-debugLog "No name specified for new host. Skip creating host" "ERR:"
		Get-help New-3parHost
		return
	}
	if ($WWN)
	{
		$cmd +="$WWN "
	}
	if ($IscsiName)
	{
		$cmd +="$IscsiName "
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds $cmd	
		
	if([string]::IsNullOrEmpty($Result))
	{
		write-host""
		return "Success : New-3parHost command executed Host Name : $HostName is created."
	}
	else
	{
		write-host""
		return $Result
	}
	   
	 
} # End New-3parHost

############################################################################################################################################
## FUNCTION Set-3parHost
############################################################################################################################################
Function Set-3parHost
{
<#
  .SYNOPSIS
     Add WWN or iSCSI name to an existing host.
  
  .DESCRIPTION
      Note : This cmdlet (Set-3parHost) is deprecated and will be removed in a 
	  subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Host) instead.
  
	  Add WWN or iSCSI name to an existing host.
        
  .EXAMPLE
    Set-3parHost -hostName HV01A -Address  10000000C97B142E, 10000000C97B142F
	Adds WWN 10000000C97B142E, 0000000C97B142F to host HV01A
	
  .EXAMPLE	
	Set-3parHost -hostName HV01B  -iSCSI:$true -Address  iqn.1991-06.com.microsoft:dt-391-xp.hq.3par.com
	Adds iSCSI  iqn.1991-06.com.microsoft:dt-391-xp.hq.3par.com to host HV01B
	
  .EXAMPLE
    Set-3parHost -hostName HV01A  -Domain D_Aslam
	
  .EXAMPLE
    Set-3parHost -hostName HV01A  -Add
	
  .PARAMETER hostName
    Name of an existing host

  .PARAMETER Address
    Specify the list of WWNs for the new host

  .PARAMETER iSCSI
    If present, the address provided is an iSCSI address instead of WWN
	
  .PARAMETER Add
	Add the specified WWN(s) or iscsi_name(s) to an existing host (at least one WWN or iscsi_name must be specified).  Do not specify host persona.

  .PARAMETER Domain <domain | domain_set>
	Create the host in the specified domain or domain set.
		
  .PARAMETER Loc <location>
	Specifies the host's location.

  .PARAMETER  IP <IP address>
	Specifies the host's IP address.

  .PARAMETER  OS <OS>
	Specifies the operating system running on the host.

  .PARAMETER Model <model>
	Specifies the host's model.

  .PARAMETER  Contact <contact>
	Specifies the host's owner and contact information.

  .PARAMETER  Comment <comment>
	Specifies any additional information for the host.
		
  .PARAMETER  Persona <hostpersonaval>
	Sets the host persona that specifies the personality for all ports which are part of the host set.  

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3parHost  
    LASTEDIT: 05/11/2015
    KEYWORDS: Set-3parHost
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(		
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$hostName,		
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Address,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
        $iSCSI=$false,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
        $Add,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Domain,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Loc,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $IP,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $OS,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Model,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Contact,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Comment,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
        $Persona,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Set-3parHost - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parHost since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parHost since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}      
	if ($hostName)
	{
		#$objType = "host"
		#$objMsg  = "hosts"
				
		$SetHostCmd = "createhost -f "			 
		if ($iSCSI)
		{ 
			$SetHostCmd +=" -iscsi "
		}
		if($Add)
		{
			$SetHostCmd +=" -add "
		}
		if($Domain)
		{
			$SetHostCmd +=" -domain $Domain"
		}
		if($Loc)
		{
			$SetHostCmd +=" -loc $Loc"
		}
		if($Persona)
		{
			$SetHostCmd +=" -persona $Persona"
		}
		if($IP)
		{
			$SetHostCmd +=" -ip $IP"
		}
		if($OS)
		{
			$SetHostCmd +=" -os $OS"
		}
		if($Model)
		{
			$SetHostCmd +=" -model $Model"
		}
		if($Contact)
		{
			$SetHostCmd +=" -contact $Contact"
		}
		if($Comment)
		{
			$SetHostCmd +=" -comment $Comment"
		}
		
		$Addr = [string]$Address
		$SetHostCmd +=" $hostName $Addr"
		
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $SetHostCmd
		write-debuglog " Setting  Host with the command --> $SetHostCmd" "INFO:"
		if([string]::IsNullOrEmpty($Result1))
		{
			return "Success : Set host $hostName with Optn_Iscsi $Optn_Iscsi $Addr "
		}
		else
		{
			return $Result1
		}		
				
	}
	else
	{
		write-debugLog "No name specified for host. Skip updating  host" "ERR:"
		Get-help Set-3parHost
		return	
	} 
} # End Set-3parHost

############################################################################################################################################
## FUNCTION New-3parHostSet
############################################################################################################################################
Function New-3parHostSet
{
<#
  .SYNOPSIS
    Creates a new host set.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parHostSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-HostSet) instead.
  
	Creates a new host set.
        
  .EXAMPLE
    New-3parHostSet -HostSetName xyz 
	Creates an empty host set named "xyz"

  .EXAMPLE
	To create an empty hostset:
    New-3parHostSet hostset

  .EXAMPLE
    To add a host to the set:
    New-3parHostSet -Add -HostSetName hostset -HostName hosta

  .EXAMPLE
    To create a host set with hosts in it:
    New-3parHostSet -HostSetName hostset -HostName "host1 host2"
    or
    New-3parHostSet -HostSetName set:hostset -HostName "host1 host2" 

  .EXAMPLE
    To create a host set with a comment and a host in it:
    New-3parHostSet -Comment "A host set" -HostSetName hostset -HostName hosta
	
  .EXAMPLE
    New-3parHostSet -HostSetName xyz -Domain xyz
	Create the host set in the specified domain
	
  .EXAMPLE
    New-3parHostSet -hostSetName HV01C-HostSet -hostName "MyHost"
	Creates an empty host set and  named "HV01C-HostSet" and adds host "MyHost" to hostset
			(or)
	Adds host "MyHost" to hostset "HV01C-HostSet" if hostset already exists
	
  .PARAMETER HostSetName
    Specify new name of the host set

  .PARAMETER hostName
    Specify new name of the host

  .PARAMETER Add
	Specifies that the hosts listed should be added to an existing set.
	At least one host must be specified.

  .PARAMETER Comment
	Specifies any comment or additional information for the set. The
	comment can be up to 255 characters long. Unprintable characters are
	not allowed.

  .PARAMETER Domain
	Create the host set in the specified domain. For an empty set the
	default is to create it in the current domain, or no domain if the
	current domain is not set. A host set must be in the same domain as
	its members; if hosts are specified as part of the creation then
	the set will be created in their domain. The -domain option should
	still be used to specify which domain to use for the set when the
	hosts are members of domain sets. A domain cannot be specified
	when adding a host to an existing set with the -add option.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parHostSet  
    LASTEDIT: 05/11/2015
    KEYWORDS: New-3parHostSet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$HostSetName,

		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$hostName,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Add,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Comment,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Domain,				
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In New-3parHostSet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parHostSet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parHostSet since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	
	$cmdCrtHostSet =" createhostset "
	
	if($Add)
	{
		$cmdCrtHostSet +="-add "
	}
	if($Comment)
	{
		$cmdCrtHostSet +="-comment $Comment "
	}
	if($Domain)
	{
		$cmdCrtHostSet +="-domain $Domain "
	}	
	if ($HostSetName)
	{
		$cmdCrtHostSet +=" $HostSetName "
	}
	else
	{
		write-debugLog "No name specified for new host set. Skip creating host set" "ERR:"
		Get-help New-3parHostSet
		return	
	}
	if($hostName)
	{
		$cmdCrtHostSet +=" $hostName "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmdCrtHostSet
	if($Add)
	{
		if([string]::IsNullOrEmpty($Result))
		{
			write-host""
			return "Success : New-3parHostSet command executed Host Name : $hostName is added to Host Set : $HostSetName"
		}
		else
		{
			write-host""
			return $Result
		}
	}	
	else
	{
		if([string]::IsNullOrEmpty($Result))
		{
			write-host""
			return "Success : New-3parHostSet command executed Host Set : $HostSetName is created with Host : $hostName"
		}
		else
		{
			write-host""
			return $Result
		}			
	}	
		 
} # End New-3parHostSet

############################################################################################################################################
## FUNCTION Get-3parHost
############################################################################################################################################
Function Get-3parHost
{
<#
  .SYNOPSIS
	Lists hosts
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parHost) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Host) instead.
  
	Queries hosts
        
  .EXAMPLE
    Get-3parHost 
	Lists all hosts

  .EXAMPLE	
	Get-3parHost -hostName HV01A
	List host HV01A
	
	Get-3parHost -Domain scvmm
	
  .EXAMPLE	
	Get-3parHost -D

  .EXAMPLE
	Get-3parHost -CHAP

  .EXAMPLE
	Get-3parHost -Descriptor

  .EXAMPLE
	Get-3parHost -Agent

  .EXAMPLE
	Get-3parHost -Pathsum

  .EXAMPLE
	Get-3parHost -Persona

  .EXAMPLE
	Get-3parHost -Listpersona

  .PARAMETER D
	Shows a detailed listing of host and path information. This option can
	be used with -agent and -domain options.

  .PARAMETER Verb
	Shows a verbose listing of all host information. This option cannot
	be used with -d.

  .PARAMETER CHAP
	Shows the CHAP authentication properties. This option cannot be used
	with -d.

  .PARAMETER Descriptor
	Shows the host descriptor information. This option cannot be used with
	-d.

  .PARAMETER Agent
	Shows information provided by host agent.

  .PARAMETER Pathsum
	Shows summary information about hosts and paths. This option cannot be
	used with -d.

  .PARAMETER Persona
	Shows the host persona settings in effect. This option cannot be used
	with -d.

  .PARAMETER Listpersona
	Lists the defined host personas. This option cannot be used with -d.

  .PARAMETER NoName
	Shows only host paths (WWNs and iSCSI names) not assigned to any host.
	This option cannot be used with -d.

  .PARAMETER Domain 
	Shows only hosts that are in domains or domain sets that match one or
	more of the specifier <domainname_or_pattern> or set <domainset>
	arguments. The set name <domain_set> must start with "set:". This
	specifier does not allow listing objects within a domain of which the
	user is not a member.

  .PARAMETER CRCError
	Shows the CRC error counts for the host/port.
	
  .PARAMETER hostName
    Specify new name of the host
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parHost  
    LASTEDIT: 05/20/2015
    KEYWORDS: Get-3parHost
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Domain,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$D,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Verb,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$CHAP,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Descriptor,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Agent,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Pathsum,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Persona,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Listpersona,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$NoName,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$CRCError,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$hostName,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parHost - validating input values" $Debug 
	#check if connection object contents are null/empty
	if (!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHost since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHost since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if($cliresult1 -match "FAILURE :")
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	
	$CurrentId = $CurrentName = $CurrentPersona = $null
	$ListofvHosts = @()	
	
	$GetHostCmd = "showhost "
	
	if ($Domain)
	{
		$GetHostCmd +=" -domain $Domain"
	}
	if ($D)
	{
		$GetHostCmd +=" -d "
	}
	if ($Verb)
	{
		$GetHostCmd +=" -verbose "
	}
	if ($CHAP)
	{
		$GetHostCmd +=" -chap "
	}
	if ($Descriptor)
	{
		$GetHostCmd +=" -desc "
	}
	if ($Agent)
	{
		$GetHostCmd +=" -agent "
	}
	if ($Pathsum)
	{
		$GetHostCmd +=" -pathsum "
	}
	if ($Persona)
	{
		$GetHostCmd +=" -persona "
	}
	if ($Listpersona)
	{
		$GetHostCmd +=" -listpersona "
	}
	if ($NoName)
	{
		$GetHostCmd +=" -noname "
	}
	if ($CRCError)
	{
		$GetHostCmd +=" -lesb "
	}	
	if($hostName)
	{
		$objType = "host"
		$objMsg  = "hosts"
		
		## Check Host Name 
		##
		if ( -not (test-3PARObject -objectType $objType -objectName $hostName -objectMsg $objMsg -SANConnection $SANConnection))
		{
			write-debuglog "host $hostName does not exist. Nothing to List" "INFO:" 
			return "FAILURE : No host $hostName found"
		}
	}
	$GetHostCmd+=" $hostName"
	#write-host "$GetHostCmd"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetHostCmd	
	write-debuglog "Get list of Hosts" "INFO:" 
	if ($Result -match "no hosts listed")
	{
		return "Success : no hosts listed"
	}
	if ($Verb -or $Descriptor)
	{
		return $Result
	}
	
	$tempFile = [IO.Path]::GetTempFileName()
	$Header = $Result[0].Trim() -replace '-WWN/iSCSI_Name-' , ' Address' 
	
	set-content -Path $tempFile -Value $Header
	$Result_Count = $Result.Count - 3
	if($Agent)
	{
		$Result_Count = $Result.Count - 3			
	}
	if($Result.Count -gt 3)
	{	
		$CurrentId = $null
		$CurrentName = $null
		$CurrentPersona = $null		
		$address = $null
		$Port = $null
		
		$Flg = "false"
		
		foreach ($s in $Result[1..$Result_Count])
		{	
			if($Pathsum)
			{
				$s =  [regex]::Replace($s , "," , "|"  )  # Replace ','  with "|"	
			}			
			if($Flg -eq "true")
			{
				$temp = $s.Trim()
				$temp1 = $temp.Split(',')
				if($temp1[0] -match "--")
				{
					$temp =  [regex]::Replace($temp , "--" , ""  )  # Replace '--'  with ""				
					$s = $temp
				}
			}
		    $Flg = "true"
			
			$match = [regex]::match($s, "^  +")   # Match Line beginning with 1 or more spaces
			if (-not ($match.Success))
			{
				$s= $s.Trim()				
				$s= [regex]::Replace($s, " +" , "," )	# Replace spaces with comma (,)
								
				$sTemp = $s.Split(',')
				$TempCnt = $sTemp.Count
				if($TempCnt -eq 2)
				{
					$address = $sTemp[0]
					$Port = $sTemp[1] # [regex]::Replace($sTemp[4] , "-+" , ""  )  # Replace '----'  with ""  
				}
				else
				{
					$CurrentId =  $sTemp[0]
					$CurrentName = $sTemp[1]
					$CurrentPersona = $sTemp[2]			
					$address = $sTemp[3]
					$Port = $sTemp[4] # [regex]::Replace($sTemp[4] , "-+" , ""  )  # Replace '----'  with ""
				}
				
				$vHost = New-Object -TypeName _vHost 
				$vHost.ID = $CurrentId
				$vHost.Persona = $currentPersona
				$vHost.Name = $CurrentName
				$vHost.Address = $address
				$vHost.Port= $port
			}			
			else
			{
				$s = $s.trim()
				$s= [regex]::Replace($s, " +" , "," )								
				$sTemp = $s.Split(',')
				$TempCnt1 = $sTemp.Count
				
				if($TempCnt1 -eq 2)
				{
					$address = $sTemp[0]
					$Port = $sTemp[1] # [regex]::Replace($sTemp[4] , "-+" , ""  )  # Replace '----'  with ""  
				}
				else
				{
					$CurrentId =  $sTemp[0]
					$CurrentName = $sTemp[1]
					$CurrentPersona = $sTemp[2]			
					$address = $sTemp[3]
					$Port = $sTemp[4] # [regex]::Replace($sTemp[4] , "-+" , ""  )  # Replace '----'  with ""
				}
				
				$vHost = New-Object -TypeName _vHost 
				$vHost.ID = $CurrentId
				$vHost.Persona = $currentPersona
				$vHost.Name = $CurrentName
				$vHost.Address = $address
				$vHost.Port= $port
			}
			
			$ListofvHosts += $vHost		
		}	
	}	
	else
	{
		del $tempFile
		return "Success : No Data Available for Host Name :- $hostName"
	}
	del $tempFile
	$ListofvHosts	
	
} # ENd Get-3parHost


############################################################################################################################################
## FUNCTION Remove-3parHost
############################################################################################################################################
Function Remove-3parHost
{
<#
  .SYNOPSIS
    Removes a host.
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parHost) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Host) instead.
  
	Removes a host.
 
  .EXAMPLE
    Remove-3parHost -hostName HV01A 
	Remove the host named HV01A
	
  .EXAMPLE
    Remove-3parHost -hostName HV01A -address 10000000C97B142E
	Remove the WWN address of the host named HV01A
	
  .EXAMPLE	
	Remove-3parHost -hostName HV01B -iSCSI -Address  iqn.1991-06.com.microsoft:dt-391-xp.hq.3par.com
	Remove the iSCSI address of the host named HV01B
	
  .PARAMETER hostName
    Specify name of the host.

  .PARAMETER Address
    Specify the list of addresses to be removed.
	
  .PARAMETER Rvl
    Remove WWN(s) or iSCSI name(s) even if there are VLUNs exported to the host.

  .PARAMETER iSCSI
    Specify twhether the address is WWN or iSCSI
	
  .PARAMETER Pat
	Specifies that host name will be treated as a glob-style pattern and that all hosts matching the specified pattern are removed. T

  .PARAMETER  Port 
	Specifies the NSP(s) for the zones, from which the specified WWN will be removed in the target driven zoning. 
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parHost  
    LASTEDIT: 05/11/2015
    KEYWORDS: Remove-3parHost
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$hostName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch] $Rvl,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch] $ISCSI = $false,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch] $Pat = $false,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Port,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String[]]
		$Address,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Remove-3parHost - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parHost since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parHost since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}      
	if ($hostName)
	{
		$objType = "host"
		$objMsg  = "hosts"
		
		## Check Host Name 
		if ( -not ( test-3PARObject -objectType $objType -objectName $hostName -objectMsg $objMsg -SANConnection $SANConnection)) 
		{
			write-debuglog " Host $hostName does not exist. Nothing to remove"  "INFO:"  
			return "FAILURE : No host $hostName found"
		}
		else
		{
		    $RemoveCmd = "removehost "			
			if ($address)
			{			
				if($Rvl)
				{
					$RemoveCmd += " -rvl "
				}	
				if($ISCSI)
				{
					$RemoveCmd += " -iscsi "
				}
				if($Pat)
				{
					$RemoveCmd += " -pat "
				}
				if($Port)
				{
					$RemoveCmd += " -port $Port "
				}
			}			
			$Addr = [string]$address 
			$RemoveCmd += " $hostName $Addr"
			$Result1 = get-3parhostset -hostName $hostName -SANConnection $SANConnection
			
			if(($Result1 -match "No host set listed"))
			{
				$Result2 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $RemoveCmd
				write-debuglog "Removing host  with the command --> $RemoveCmd" "INFO:" 
				if([string]::IsNullOrEmpty($Result2))
				{
					return "Success : Removed host $hostName"
				}
				else
				{
					return "FAILURE : While removing host $hostName"
				}				
			}
			else
			{
				$Result3 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $RemoveCmd
				return "FAILURE : Host $hostName is still a member of set"
			}			
		}				
	}
	else
	{
		write-debuglog  "No host name mentioned to remove" "INFO:"
		Get-help Remove-3parHost			
	}
} # End of Remove-3parHost
 
#####################################################################################################################
## FUNCTION Remove-3parCPG
#####################################################################################################################
Function Remove-3parCPG
{
<#
  .SYNOPSIS
    Removes a Common Provisioning Group(CPG)
  
  .DESCRIPTION
     Note : This cmdlet (Remove-3parCPG) is deprecated and will be removed in a 
	 subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-CPG) instead.
  
	 Removes a Common Provisioning Group(CPG)
        
  .EXAMPLE
    Remove-3parCPG -cpgName "MyCPG"  -force
	 Removes a Common Provisioning Group(CPG) "MyCPG"

  .PARAMETER force
	forcefully execute the command.
 
  .PARAMETER saLDname
	Specifies that the logical disk, as identified with the <LD_name>
	argument, used for snapshot administration space allocation is removed.
	The <LD_name> argument can be repeated to specify multiple logical
	disks.
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER sdLDname
	Specifies that the logical disk, as identified with the <LD_name>
	argument, used for snapshot data space allocation is removed. The
	<LD_name> argument can be repeated to specify multiple logical disks.
	This option is deprecated and will be removed in a subsequent release.
	
  .PARAMETER cpgName 
    Specify name of the CPG
	
  .PARAMETER Pat 
    The specified patterns are treated as glob-style patterns and that all common provisioning groups matching the specified pattern are removed.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
              
  .Notes
    NAME:  Remove-3parCPG 
    LASTEDIT: 05/12/2015
    KEYWORDS: Remove-3parCPG
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$force,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$cpgName,
		
	    [Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$sdLDname,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$saLDname,

		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Pat,	
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)

	Write-DebugLog "Start: In Remove-3parCPG - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parCPG since SAN connection object values are null/empty" $Debug
				return "FAILURE: Exiting Remove-3parCPG since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	if ($cpgName)
	{
		if(!($force))
		{
			write-debuglog "no force option selected to remove CPG, Exiting...." "INFO:"
			return "FAILURE: No -force option selected to remove cpg $cpgName"
		}
		$objType = "cpg"
		$objMsg  = "cpg"
		$RemoveCPGCmd = "removecpg "
		## Check CPG Name 
		##
		if ( -not ( Test-3PARObject -objectType $objType -objectName $cpgName -objectMsg $objMsg -SANConnection $SANConnection)) 
		{
			write-debuglog " CPG $cpgName does not exist. Nothing to remove"  "INFO:"  
			return "FAILURE: No cpg $cpgName found"
		}
		else
		{			
			if($force)
			{
				$RemoveCPGCmd +=" -f "
			}
			if($Pat)
			{
				$RemoveCPGCmd +=" -pat "
			}
			if ($saLDname)
			{
				$RemoveCPGCmd +=" -sa $saLDname "
			}
			if ($sdLDname)
			{
				$RemoveCPGCmd +=" -sd $sdLDname "
			}
			$RemoveCPGCmd += " $cpgName "
			$Result3 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $RemoveCPGCmd
			write-debuglog "Removing CPG  with the command --> $RemoveCPGCmd" "INFO:" 
			
			if (Test-3PARObject -objectType $objType -objectName $cpgName -objectMsg $objMsg -SANConnection $SANConnection)
			{
				write-debuglog " CPG $cpgName exists. Nothing to remove"  "INFO:"  
				return "FAILURE: While removing cpg $cpgName `n $Result3"
			}
			else
			{
				if ($Result3 -match "Removing CPG")
				{
					return "Success : Removed cpg $cpgName"
				}
				else
				{
					return "FAILURE: While removing cpg $cpgName $Result3"
				}
			}			
		}		
	}
	else
	{
		write-debuglog  "No CPG name mentioned to remove " "INFO:"
		Get-help Remove-3parCPG
	}
		
} # End of Remove-3parCPG

#####################################################################################################################
## FUNCTION Remove-3parVVSet
#####################################################################################################################

Function Remove-3parVVSet
{
<#
  .SYNOPSIS
    Remove a Virtual Volume set or remove VVs from an existing set
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parVVSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-VvSet) instead.
  
	Removes a VV set or removes VVs from an existing set.
        
  .EXAMPLE
    Remove-3parVVSet -vvsetName "MyVVSet"  -force
	 Remove a VV set "MyVVSet"
	 
  .EXAMPLE
	Remove-3parVVSet -vvsetName "MyVVSet" -vvName "MyVV" -force
	 Remove a single VV "MyVV" from a vvset "MyVVSet"
	
  .PARAMETER vvsetName 
    Specify name of the vvsetName

  .PARAMETER vvName 
    Specify name of  a vv to remove from vvset

  .PARAMETER force
	If present, perform forcible delete operation	
	
  .PARAMETER pat
	Specifies that both the set name and VVs will be treated as glob-style patterns.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parVVSet 
    LASTEDIT: 05/11/2015
    KEYWORDS: Remove-3parVVSet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true)]
		[System.String]
		$vvsetName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$vvName,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$force,
		
		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$Pat,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		

	Write-DebugLog "Start: In Remove-3parVVSet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parVVSet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parVVSet since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	if ($vvsetName)
	{
		if (!($force))
		{
			write-debuglog "no force option is selected to remove vvset, Exiting...." "INFO:"
			return "FAILURE : no -force option is selected to remove vvset"
		}
		$objType = "vvset"
		$objMsg  = "vv set"
		
		## Check vvset Name 		
		if ( -not ( Test-3PARObject -objectType $objType -objectName $vvsetName -objectMsg $objMsg -SANConnection $SANConnection)) 
		{
			write-debuglog " vvset $vvsetName does not exist. Nothing to remove"  "INFO:"  
			return "FAILURE : No vvset $vvSetName found"
		}
		else
		{
			$RemovevvsetCmd ="removevvset "			
			
			if($force)
			{
				$RemovevvsetCmd += " -f "
			}
			if($Pat)
			{
				$RemovevvsetCmd += " -pat "
			}
			
			$RemovevvsetCmd += " $vvsetName "
			
			if($vvName)
			{
				$RemovevvsetCmd +=" $vvName"
			}
		
			$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $RemovevvsetCmd
			write-debuglog " Removing vvset  with the command --> $RemovevvsetCmd" "INFO:" 
			if([string]::IsNullOrEmpty($Result1))
			{
				if($vvName)
				{
					return  "Success : Removed vv $vvName from vvset $vvSetName"
				}
				return  "Success : Removed vvset $vvSetName"
			}
			else
			{
				return "FAILURE : While removing vvset $vvSetName $Result1"
			}
		}	
	}
	else
	{
		write-debuglog  "No name mentioned for removing vvset" "INFO:"
		Get-help Remove-3parVVSet			
	}
	
} # End of Remove-3parVVSet 

#####################################################################################################################
## FUNCTION Remove-3parHostSet
#####################################################################################################################

Function Remove-3parHostSet
{
<#
  .SYNOPSIS
    Remove a host set or remove hosts from an existing set
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parHostSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-HostSet) instead.
  
	Remove a host set or remove hosts from an existing set
        
  .EXAMPLE
    Remove-3parHostSet -hostsetName "MyHostSet"  -force 
	Remove a hostset  "MyHostSet"
	
  .EXAMPLE
	Remove-3parHostSet -hostsetName "MyHostSet" -hostName "MyHost" -force
	Remove a single host "MyHost" from a hostset "MyHostSet"
	
  .PARAMETER hostsetName 
    Specify name of the hostsetName

  .PARAMETER hostName 
    Specify name of  a host to remove from hostset
 
  .PARAMETER force
	If present, perform forcible delete operation
	
  .PARAMETER Pat
	Specifies that both the set name and hosts will be treated as glob-style patterns.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
              
  .Notes
    NAME:  Remove-3parHostSet 
    LASTEDIT: 05/08/2015
    KEYWORDS: Remove-3parHostSet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true)]
		[System.String]
		$hostsetName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$hostName,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$force,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Pat,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		

	Write-DebugLog "Start: In Remove-3parHostSet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parHostSet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parHostSet since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$RemovehostsetCmd = "removehostset "
	if ($hostsetName)
	{
		if (!($force))
		{
			write-debuglog "no force option selected to remove hostset, Exiting...." "INFO:"
			return "FAILURE : no -force option selected to remove hostset"
		}
		$objType = "hostset"
		$objMsg  = "host set"
		
		## Check hostset Name 
		##
		if ( -not ( Test-3PARObject -objectType $objType -objectName $hostsetName -objectMsg $objMsg -SANConnection $SANConnection)) 
		{
			write-debuglog " hostset $hostsetName does not exist. Nothing to remove"  "INFO:"  
			return "FAILURE : No hostset $hostsetName found"
		}
		else
		{	
			if($force)
			{
				$RemovehostsetCmd += " -f "
			}
			if($Pat)
			{
				$RemovehostsetCmd += " -pat "
			}
			
			$RemovehostsetCmd += " $hostsetName "
			
			if($hostName)
			{
				$RemovehostsetCmd +=" $hostName"
			}
		
			$Result2 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $RemovehostsetCmd
			
			write-debuglog "Removing hostset  with the command --> $RemovehostsetCmd" "INFO:"
			if([string]::IsNullOrEmpty($Result2))
			{
				if($hostName)
				{
					return "Success : Removed host $hostName from hostset $hostsetName "
				}
				else
				{
					return "Success : Removed hostset $hostsetName "
				}
			}
			else
			{
				return "FAILURE : While removing hostset $hostsetName"
			}			
		}
	}
	else
	{
			write-debuglog  "No hostset name mentioned to remove" "INFO:"
			Get-help remove-3parhostset
	}
} # End of Remove-3parHostSet 


#####################################################################################################################
## FUNCTION Get-3parCPG
#####################################################################################################################
Function Get-3parCPG
{
<#
  .SYNOPSIS
    Get list of common provisioning groups (CPGs) in the system.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parCPG) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-CPG) instead.
    
    Get list of common provisioning groups (CPGs) in the system.
        
  .EXAMPLE
    Get-3parCPG
	List all/specified common provisioning groups (CPGs) in the system.  
  
  .EXAMPLE
	Get-3parCPG -cpgName "MyCPG" 
	List Specified CPG name "MyCPG"
	
  .EXAMPLE
	Get-3parCPG -Detailed -cpgName "MyCPG" 
	Displays detailed information about the CPGs.

  .EXAMPLE
	Get-3parCPG -RawSpace -cpgName "MyCPG" 
	Specifies that raw space used by the CPGs is displayed.
	  
  .EXAMPLE
	Get-3parCPG -AlertTime -cpgName "MyCPG" 
	Show times when alerts were posted (when applicable).
	  
  .EXAMPLE
	Get-3parCPG -Domain_Name XYZ -cpgName "MyCPG" 
	Show times with domain name depict.
	 
  .PARAMETER cpgName 
    Specify name of the cpg to be listed.

  .PARAMETER ListCols
	List the columns available to be shown in the -showcols option
	described below (see "clihelp -col showcpg" for help on each column).
		
  .PARAMETER Detailed
	Displays detailed information about the CPGs. The following columns
	are shown:
	Id Name Warn% VVs TPVVs TDVVs UsageUsr UsageSnp Base SnpUsed Free Total
	LDUsr LDSnp RC_UsageUsr RC_UsageSnp DDSType DDSSize

  .PARAMETER RawSpace
	Specifies that raw space used by the CPGs is displayed. The following
	columns are shown:
	Id Name Warn% VVs TPVVs TDVVs UsageUsr UsageSnp Base RBase SnpUsed
	SnpRUsed Free RFree Total RTotal

  .PARAMETER Alert
	Indicates whether alerts are posted. The following columns are shown:
	Id Name Warn% UsrTotal DataWarn DataLimit DataAlertW% DataAlertW
	DataAlertL DataAlertF

  .PARAMETER Alerttime
	Show times when alerts were posted (when applicable). The following
	columns are shown:
	Id Name DataAlertW% DataAlertW DataAlertL DataAlertF

  .PARAMETER SAG
	Specifies that the snapshot admin space auto-growth parameters are
	displayed. The following columns are displayed:
	Id Name AdmWarn AdmLimit AdmGrow AdmArgs

  .PARAMETER SDG
	Specifies that the snapshot data space auto-growth parameters are
	displayed. The following columns are displayed:
	Id Name DataWarn DataLimit DataGrow DataArgs

  .PARAMETER Space
	Show the space saving of CPGs. The following columns are displayed:
	Id Name Warn% Shared Private Free Total Compaction Dedup DataReduce Overprov
		
  .PARAMETER Hist
	Specifies that current data from the CPG, as well as the CPG's history
	data is displayed.

  .PARAMETER Domain_Name
	Shows only CPGs that are in domains with names matching one or more of
	the <domain_name_or_pattern> argument. This option does not allow
	listing objects within a domain of which the user is not a member.
	Patterns are glob-style (shell-style) patterns (see help on sub,globpat).

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parCPG  
    LASTEDIT: 05/15/2015
    KEYWORDS: Get-3parCPG
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param
	(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$ListCols,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Detailed, 
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$RawSpace,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Alert,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$AlertTime,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$SAG,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$SDG,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$Space,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$History,
		
		[Parameter(Position=9, Mandatory=$false)]
		[System.String]
		$Domain_Name,
		
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]
		$cpgName,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parCPG - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parCPG since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parCPG since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$GetCPGCmd = "showcpg "
	
	if($ListCols)	
	{
		$GetCPGCmd += "-listcols "
	}
	if($Detailed)	
	{
		$GetCPGCmd += "-d "
	}
	if($RawSpace)	
	{
		$GetCPGCmd += "-r "
	}
	if($Alert)	
	{
		$GetCPGCmd += "-alert "
	}
	if($AlertTime)	
	{
		$GetCPGCmd += "-alerttime "
	}
	if($SAG)	
	{
		$GetCPGCmd += "-sag "
	}
	if($SDG)	
	{
		$GetCPGCmd += "-sdg "
	}
	if($Space)	
	{
		$GetCPGCmd += "-space "
	}
	if($History)	
	{
		$GetCPGCmd += "-hist "
	}
	if($Domain_Name)	
	{
		$GetCPGCmd += "-domain $Domain_Name "
	}
	if ($cpgName)
	{
		$objType = "cpg"
		$objMsg  = "cpg"
		
		## Check cpg Name 
		##
		if ( -not ( Test-3PARObject -objectType $objType -objectName $cpgName -objectMsg $objMsg -SANConnection $SANConnection)) 
		{
			write-debuglog " CPG name $cpgName does not exist. Nothing to display"  "INFO:"  
			return "FAILURE : No cpg $cpgName found"
		}
		$GetCPGCmd += "  $cpgName"
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetCPGCmd	
	if($ListCols -or $History)
	{
		write-debuglog "$Result" "ERR:" 
		return $Result
	}
	if ( $Result.Count -gt 1)
	{		
		$3parosver = Get-3parVersion -number -SANConnection  $SANConnection
		if($3parosver -eq "3.2.2")
		{			
			if($Alert -Or $AlertTime -Or $SAG -Or $SDG)
			{			
				$Cnt
				if($Alert)
				{
					$Cnt=2
				}
				if($AlertTime -Or $SAG -Or $SDG )
				{
					$Cnt=1
				}
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count
				$incre = "true"
				foreach ($s in  $Result[$Cnt..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim()
					if($AlertTime)
					{
						$TempRep = $s -replace 'L','L_Date,L_Time,L_Zone'
						$s = $TempRep
					}
					
					if($incre -eq "true")
					{		
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')
						if($Alert)
						{
							$sTemp[3]="Total_MB_Data"
							$sTemp[10]="Total_MB_Adm"							
							$sTemp[11]="W%_Alerts_Adm"
							$sTemp[12]="F_Alerts_Adm"
						}
						if($AlertTime)
						{
							$sTemp[2]="W%_DataAlerts"
							$sTemp[3]="W_DataAlerts"
							$sTemp[7]="F_DataAlerts"
							$sTemp[8]="W%_AdmAlerts"
							$sTemp[9]="F_AdmAlerts"
						}						
						
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp							
					}
					Add-Content -Path $tempFile -Value $s
					$incre="false"					
				}
				if ($CPGName)
				{ 					
					Import-Csv $tempFile | where  {$_.Name -like $CPGName} 
				}
				else
				{					
					Import-Csv $tempFile
				}			
				del $tempFile
			}
			elseif($Space -or $Domain_Name)
			{			
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count-2
				$incre = "true" 			
				foreach ($s in  $Result[2..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim()
					if($incre -eq "true")
					{		
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')
						if($Space)
						{
							$sTemp[2]="Warn%_User_MB"
							$sTemp[3]="Total_User_MB"							
							$sTemp[4]="Used_User_MB"
							$sTemp[5]="Total_Snp_MB"							
							$sTemp[6]="Used_Snp_MB"
							$sTemp[7]="Total_Adm_MB"							
							$sTemp[8]="Used_Adm_MB"
							
						}	
						if($Domain_Name)
						{
							$sTemp[8]="Total_User_MB"							
							$sTemp[9]="Used_User_MB"
							$sTemp[10]="Total_Snp_MB"							
							$sTemp[11]="Used_Snp_MB"
							$sTemp[12]="Total_Adm_MB"							
							$sTemp[13]="Used_Adm_MB"
						}
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp							
					}
					Add-Content -Path $tempFile -Value $s
					$incre="false"				
				}
				if ($CPGName)
					{					
						Import-Csv $tempFile | where  {$_.Name -like $CPGName} 
					}
				else
					{
						Import-Csv $tempFile 
					}			
				del $tempFile
			}
			else
			{			
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count - 2
				$incre = "true" 			
				foreach ($s in  $Result[2..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim()			
					if($incre -eq "true")
					{		
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')
						if($Detailed)
						{
							$sTemp[6]="Usr_Usage"
							$sTemp[7]="Snp_Usage"
							$sTemp[8]="Total_User_MB"							
							$sTemp[9]="Used_User_MB"
							$sTemp[10]="Total_Snp_MB"							
							$sTemp[11]="Used_Snp_MB"
							$sTemp[12]="Total_Adm_MB"							
							$sTemp[13]="Used_Adm_MB"
							$sTemp[14]="Usr_LD"
							$sTemp[15]="Snp_LD"
							$sTemp[16]="Adm_LD"
							$sTemp[17]="Usr_RC_Usage"
							$sTemp[18]="Snp_RC_Usage"	
						}
						elseif($RawSpace)
						{
							$sTemp[6]="Usr_Usage"
							$sTemp[7]="Snp_Usage"
							$sTemp[8]="Total_User_MB"
							$sTemp[9]="RTotal_User_MB"							
							$sTemp[10]="Used_User_MB"
							$sTemp[11]="RUsed_User_MB"
							$sTemp[12]="Total_Snp_MB"
							$sTemp[13]="RTotal_Snp_MB"
							$sTemp[14]="Used_Snp_MB"
							$sTemp[15]="RUsed_Snp_MB"
							$sTemp[16]="Total_Adm_MB"
							$sTemp[17]="RTotal_Adm_MB"
							$sTemp[18]="Used_Adm_MB"
							$sTemp[19]="RUsed_Adm_MB"
						}
						else
						{
							$sTemp[6]="Usr_Usage"
							$sTemp[7]="Snp_Usage"
							$sTemp[8]="Total_User_MB"							
							$sTemp[9]="Used_User_MB"
							$sTemp[10]="Total_Snp_MB"							
							$sTemp[11]="Used_Snp_MB"
							$sTemp[12]="Total_Adm_MB"							
							$sTemp[13]="Used_Adm_MB"
						}					
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp							
					}						
					Add-Content -Path $tempFile -Value $s	
					$incre="false"
				}
				if ($CPGName)
				{					
					Import-Csv $tempFile | where  {$_.Name -like $CPGName} 
				}
				else
				{					
					Import-Csv $tempFile
				}			
				del $tempFile
			}
		}
		else
		{
			if($Alert -Or $AlertTime -Or $SAG -Or $SDG)
			{			
				$Cnt
				if($Alert)
				{
					$Cnt=2
				}
				if($AlertTime -Or $SAG -Or $SDG )
				{
					$Cnt=1
				}
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count						
				foreach ($s in  $Result[$Cnt..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim()									
					Add-Content -Path $tempFile -Value $s				
				}
				if ($CPGName)
				{ 					
					Import-Csv $tempFile | where  {$_.Name -like $CPGName} 
				}
				else
				{					
					Import-Csv $tempFile
				}			
				del $tempFile
			}
			elseif($Space -or $Domain_Name)
			{			
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count-2
				$incre = "true" 			
				foreach ($s in  $Result[1..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim()
					if($incre -eq "true")
					{		
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')
						if($Space)
						{
							$sTemp[3]="Base(Private(MiB))"
							$sTemp[4]="Snp(Private(MiB))"							
							$sTemp[5]="Shared(MiB)"
							$sTemp[6]="Free(MiB)"
							$sTemp[7]="Total(MiB)"							
							$sTemp[8]="Compact(Efficiency)"						
							$sTemp[9]="Dedup(Efficiency)"						
							$sTemp[10]="Compress(Efficiency)"						
							$sTemp[11]="DataReduce(Efficiency)"	
							$sTemp[12]="Overprov(Efficiency)"
						}	
						if($Domain_Name)
						{
							$sTemp[3]="VVs(Volumes)"
							$sTemp[4]="TPVVs(Volumes)"							
							$sTemp[5]="TDVVs(Volumes)"
							$sTemp[6]="Usr(Usage)"
							$sTemp[7]="Snp(Usage)"							
							$sTemp[8]="Base(MiB)"						
							$sTemp[9]="Snp(MiB)"						
							$sTemp[10]="Free(MiB)"						
							$sTemp[11]="Total(MiB)"
						}
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp							
					}
					Add-Content -Path $tempFile -Value $s
					$incre="false"				
				}
				if ($CPGName)
					{					
						Import-Csv $tempFile | where  {$_.Name -like $CPGName} 
					}
				else
					{
						Import-Csv $tempFile 
					}			
				del $tempFile
			}
			else
			{			
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count - 2
				$incre = "true" 			
				foreach ($s in  $Result[1..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim()
					if($incre -eq "true")
					{		
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')
						if($Detailed)
						{
							$sTemp[3]="VVs(Volumes)"
							$sTemp[4]="TPVVs(Volumes)"							
							$sTemp[5]="TDVVs(Volumes)"
							$sTemp[6]="Usr(Usage)"
							$sTemp[7]="Snp(Usage)"							
							$sTemp[8]="Base(MiB)"						
							$sTemp[9]="Snp(MiB)"						
							$sTemp[10]="Free(MiB)"						
							$sTemp[11]="Total(MiB)"	
							$sTemp[12]="Usr(LD)"
							$sTemp[13]="Snp(LD)"
							$sTemp[14]="Usr(RC_Usage)"
							$sTemp[15]="Snp(RC_Usage)"
						}
						elseif($RawSpace)
						{
							$sTemp[3]="VVs(Volumes)"
							$sTemp[4]="TPVVs(Volumes)"							
							$sTemp[5]="TDVVs(Volumes)"
							$sTemp[6]="Usr(Usage)"
							$sTemp[7]="Snp(Usage)"							
							$sTemp[8]="Base(MiB)"
							$sTemp[9]="RBase(MiB)"
							$sTemp[10]="Snp(MiB)"
							$sTemp[11]="RSnp(MiB)"
							$sTemp[12]="Free(MiB)"
							$sTemp[13]="RFree(MiB)"
							$sTemp[14]="Total(MiB)"
							$sTemp[15]="RTotal(MiB)"
						}
						else
						{
							$sTemp[3]="VVs(Volumes)"
							$sTemp[4]="TPVVs(Volumes)"							
							$sTemp[5]="TDVVs(Volumes)"
							$sTemp[6]="Usr(Usage)"
							$sTemp[7]="Snp(Usage)"							
							$sTemp[8]="Base(MiB)"						
							$sTemp[9]="Snp(MiB)"						
							$sTemp[10]="Free(MiB)"						
							$sTemp[11]="Total(MiB)"
						}					
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp
					}						
					Add-Content -Path $tempFile -Value $s	
					$incre="false"
				}
				if ($CPGName)
				{
					Import-Csv $tempFile 
				}
				else
				{					
					Import-Csv $tempFile
				}			
				del $tempFile
			}
		}
	}
	elseif($Result -match "FAILURE")
	{		
		write-debuglog "$Result" "ERR:" 
		return $Result
	}
	else
	{
		#write-host "FINALY RETURN.."
		return $Result
	}
		
} # End Get-3parCPG

#####################################################################################################################
## FUNCTION Get-3parVVSet
#####################################################################################################################

Function Get-3parVVSet
{
<#
  .SYNOPSIS
    Get list of Virtual Volume(VV) sets defined on the storage system and their members
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parVVSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-VvSet) instead.
  
    Get lists of Virtual Volume(VV) sets defined on the storage system and their members
        
  .EXAMPLE
    Get-3parVVSet
	 List all virtual volume set(s)

  .EXAMPLE  
	Get-3parVVSet -vvSetName "MyVVSet" 
	List Specific VVSet name "MyVVSet"
	
  .EXAMPLE  
	Get-3parVVSet -vvName "MyVV" 
	List VV sets containing VVs matching vvname "MyVV"

  .EXAMPLE	
	Get-3parVVSet -VV -vvName AIX_PERF_VV_SET
	
  .PARAMETER vvSetName 
    Specify name of the vvset to be listed.

  .PARAMETER Detailed
	Show a more detailed listing of each set.
	
  .PARAMETER VV
	Show VV sets that contain the supplied vvnames or patterns
	
  .PARAMETER Summary
	Shows VV sets with summarized output with VV sets names and number of VVs in those sets
	
  .PARAMETER vvName 
     Specifies that the sets containing virtual volumes	

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parVVSet  
    LASTEDIT: 05/08/2015
    KEYWORDS: Get-3parVVSet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Detailed,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$VV,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Summary,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$vvSetName,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$vvName,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parVVSet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parVVSet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parVVSet since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	$GetVVSetCmd = "showvvset "
	
	if ($Detailed)
	{
		$GetVVSetCmd += " -d "
	}
	if ($VV)
	{
		$GetVVSetCmd += " -vv "
	}
	if ($Summary)
	{
		$GetVVSetCmd += " -summary "
	}
	
	if ($vvSetName)
	{
		$GetVVSetCmd += " $vvSetName"
	}
	elseif($vvName)
	{
		$GetVVSetCmd += " $vvName"
	}
	else
	{
		write-debuglog "VVSet parameter $vvSetName is empty. Simply return all existing vvset " "INFO:"		
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetVVSetCmd
	#write-host ""
	#return $Result	
	
	if($Result -match "No vv set listed")
	{
		return "FAILURE : No vv set listed"
	}
	if($Result -match "total")
	{		
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -3		
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")	
			#$s= [regex]::Replace($s,"-","")
			$s= $s.Trim()			
			Add-Content -Path $tempFile -Value $s
			#Write-Host	" First if statement $s"		
		}
		Import-Csv $tempFile 
		del $tempFile
	}
	else
	{
		return $Result
	}
		
} # End Get-3parVVSet

#####################################################################################################################
## FUNCTION Get-3parHostSet
#####################################################################################################################
Function Get-3parHostSet
{
<#
  .SYNOPSIS
    Get list of  host set(s) information
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parHostSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HostSet) instead.
  
    Get list of  host set(s) information
        
  .EXAMPLE
    Get-3parHostSet	
	List all host set information
	 
  .EXAMPLE
	Get-3parHostSet -hostSetName "MyVVSet"	
	List Specific HostSet name "MyVVSet"
	
  .EXAMPLE	
	Get-3parHostSet -hostName "MyHost"	 
	Show the host sets containing host "MyHost"	
	
  .EXAMPLE	
	Get-3parHostSet -D	 
	Show a more detailed listing of each set
	
  .PARAMETER D
	Show a more detailed listing of each set.
	
  .PARAMETER hostSetName 
    Specify name of the hostsetname to be listed.

  .PARAMETER hostName 
    Show the host sets containing hostName	

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parHostSet  
    LASTEDIT: 05/08/2015
    KEYWORDS: Get-3parHostSet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$hostSetName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$hostName,

		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$D,		
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parHostSet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHostSet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHostSet since SAN connection object values are null/empty"
			}
		}
	}

	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$GetHostSetCmd = "showhostset "
	if($D)
	{
		$GetHostSetCmd +=" -d "
	}
	if ($hostSetName)
	{		
		$GetHostSetCmd +=" $hostSetName "
	}	
	if ($hostName)
	{		
		$GetHostSetCmd +=" $hostName "
	}
	else
	{
		write-debuglog "HostSet parameter is empty. Simply return all hostset information " "INFO:"
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetHostSetCmd
	
	if($Result -match "total")
	{
		
		$ID = $null
		$Name = $null
		$Membr = $null		
		#$address = $null
		
		$ListofvHosts = @()	
		
		$tempFile = [IO.Path]::GetTempFileName()
		$Header = $Result[0].Trim() -replace 'id' , ' ID' 		
		set-content -Path $tempFile -Value $Header
		
		$LastItem = $Result.Count -3  
		#Write-Host " Result Count =" $Result.Count
		foreach ($s in  $Result[1..$LastItem] )
		{				
			$s= $s.Trim()				
			$s= [regex]::Replace($s, " +" , "," )	# Replace spaces with comma (,)						
			$sTemp = $s.Split(',')
			$TempCnt = $sTemp.Count			
			
			if($TempCnt -gt 1)
			{
				$ID =  $sTemp[0]
				$Name = $sTemp[1]
				$Membr = $sTemp[2]	
			}
			else
			{
				$Membr = $sTemp[0]
			}
			
			$vHost = New-Object -TypeName _vHostSet 
			$vHost.ID = $ID
			$vHost.Name = $Name
			$vHost.Members = $Membr			
			
			$ListofvHosts += $vHost
		}			
	}
	else
	{
		return $Result
	}
	del $tempFile
	$ListofvHosts
	<#
	if($Result -match "total")
	{
		Return $Result + "`n `n Success : Executing Get-3parHostSet"
	}
	else
	{
		return $Result
	}
	#>
	
} # End Get-3parHostSet

########################################
##### FUNCTION Get-3parCmdList   #######
########################################
Function Get-3parCmdList{
<#
  .SYNOPSIS
    Get list of  All HPE Primera and 3par PowerShell cmdlets
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parCmdList) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-CmdList) instead.
  
    Get list of  All HPE Primera and 3par PowerShell cmdlets 
        
  .EXAMPLE
    Get-3parCmdList	
	List all available HPE Primera and 3par PowerShell cmdlets.
	
  .EXAMPLE
    Get-3parCmdList -WSAPI
	List all available HPE Primera and 3par PowerShell WSAPI cmdlets only.
	
  .EXAMPLE
    Get-3parCmdList -CLI
	List all available HPE Primera and 3par PowerShell CLI cmdlets only.
	
  .Notes
    NAME:  Get-3parCmdList
    CREATED: 05/14/2015
    LASTEDIT: 05/26/2020
    KEYWORDS: Get-3parCmdList
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
 [CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[Switch]
		$CLI, 
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$WSAPI
	)
 
 $Array = @()
 
 $psToolKitModule = (Get-Module PowerShellToolkitForHPEPrimeraAnd3PAR);
 $nestedModules = $psToolKitModule.NestedModules;
 $noOfNestedModules = $nestedModules.Count;
 
 $totalCmdlets = 0;
 $totalCLICmdlets = 0;
 $totalWSAPICmdlets = 0;

 # If chosen to select all WSAPI cmdlets
 if($WSAPI)
 {
    foreach ($nestedModule in $nestedModules[0..$noOfNestedModules])
    {
        if ($nestedModule.Name -eq "HPE3PARPSToolkit-WSAPI")
        {
            $ExpCmdlets = $nestedModule.ExportedCommands;    
            
            foreach ($h in $ExpCmdlets.GetEnumerator()) 
            {            
                $Result1 = "" | Select CmdletName, CmdletType, ModuleVersion, SubModule, Module
                $Result1.CmdletName = $($h.Key);            
                $Result1.ModuleVersion = $psToolKitModule.Version;
                $Result1.CmdletType = "WSAPI";
                $Result1.SubModule = $nestedModule.Name;
                $Result1.Module = $psToolKitModule.Name;
                
                $totalCmdlets += 1;
                $totalWSAPICmdlets += 1;            
            
                $Array += $Result1
            }
            break;
        }        
    }
 }
 # If chosen to select all CLI cmdlets
 elseif($CLI)
 {
	foreach ($nestedModule in $nestedModules[0..$noOfNestedModules])
    {
        if ($nestedModule.Name -eq "HPE3PARPSToolkit-CLI")
        {
            $ExpCmdlets = $nestedModule.ExportedCommands;    
            
            foreach ($h in $ExpCmdlets.GetEnumerator()) 
            {            
                $Result1 = "" | Select CmdletName, CmdletType, ModuleVersion, SubModule, Module
                $Result1.CmdletName = $($h.Key);            
                $Result1.ModuleVersion = $psToolKitModule.Version;
                $Result1.CmdletType = "CLI";
                $Result1.SubModule = $nestedModule.Name;
                $Result1.Module = $psToolKitModule.Name;
                
                $totalCmdlets += 1;
                $totalCLICmdlets += 1;            
            
                $Array += $Result1                            
            }
            break;
        }        
    }
 }
 # If chosen to select all WSAPI and CLI cmdlets
 else
 {
    $doneCLI = $false;
    $doneWSAPI = $false;

	foreach ($nestedModule in $nestedModules[0..$noOfNestedModules])
    {        
        if ($nestedModule.Name -eq "HPE3PARPSToolkit-WSAPI")
        {
            $ExpCmdlets = $nestedModule.ExportedCommands;    
            
            foreach ($h in $ExpCmdlets.GetEnumerator()) 
            {            
                $Result1 = "" | Select CmdletName, CmdletType, ModuleVersion, SubModule, Module
                $Result1.CmdletName = $($h.Key);            
                $Result1.ModuleVersion = $psToolKitModule.Version;
                $Result1.CmdletType = "WSAPI";
                $Result1.SubModule = $nestedModule.Name;
                $Result1.Module = $psToolKitModule.Name;
                
                $totalCmdlets += 1;
                $totalWSAPICmdlets += 1;            
            
                $Array += $Result1
            }
            $doneWSAPI = $true;
        }
        elseif ($nestedModule.Name -eq "HPE3PARPSToolkit-CLI")
        {
            $ExpCmdlets = $nestedModule.ExportedCommands;    
            
            foreach ($h in $ExpCmdlets.GetEnumerator()) 
            {            
                $Result1 = "" | Select CmdletName, CmdletType, ModuleVersion, SubModule, Module
                $Result1.CmdletName = $($h.Key);            
                $Result1.ModuleVersion = $psToolKitModule.Version;
                $Result1.CmdletType = "CLI";
                $Result1.SubModule = $nestedModule.Name;
                $Result1.Module = $psToolKitModule.Name;
                
                $totalCmdlets += 1;
                $totalCLICmdlets += 1;            
            
                $Array += $Result1
            }
            $doneCLI = $true;
        }
        if ($doneWSAPI -eq $true -and $doneCLI -eq $true)
        {
            break;
        }
    }
 }

 $Array | Format-Table
 $Array = $null;
 Write-Host "$totalCmdlets Cmdlets listed"

 }# Ended Get-3parCmdList

##########################################
####### FUNCTION GET-3PARVersion  ########
##########################################
 
Function Get-3parVersion()
{	
<#
  .SYNOPSIS
    Get list of  HPE Primera and 3par Storage system software version information 
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parVersion) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Version) instead.
  
    Get list of  HPE Primera and 3par Storage system software version information
        
  .EXAMPLE
    Get-3parVersion	
	Get list of  HPE Primera and 3par Storage system software version information

  .EXAMPLE
    Get-3parVersion -number	
	Get list of  HPE Primera and 3par Storage system release version number only
	
  .EXAMPLE
    Get-3parVersion -build	
	Get list of  HPE Primera and 3par Storage system build levels

  .PARAMETER build
	Show build levels.

  .PARAMETER number
	Show release version number only (useful for scripting).
	
  .Notes
    NAME:  Get-3parVersion  
    LASTEDIT: 05/18/2015
    KEYWORDS: Get-3parVersion
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
 [CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$number,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$build,
	
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parVersion - validating input values" $Debug 
	
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{
		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
	
		if($Validate1 -eq "Failed")
		{
			
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
			
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parVersion since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parVersion since SAN connection object values are null/empty"
			}
		}
	}
	
	$plinkresult = Test-PARCLi -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
	
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	if($number)
	{
		$Getversion = "showversion -s"
		Invoke-3parCLICmd -Connection $SANConnection -cmds  $Getversion
		write-debuglog "Get HPE Primera and 3par version info using cmd $Getversion " "INFO:"
		return
	}
	elseif($build)
	{
		$Getversion = "showversion -b "
	}
	else
	{
		$Getversion = "showversion"
	}
	
	#write-host "test"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Getversion
	write-debuglog "Get version info " "INFO:" 
	
	$Result = $Result | where { ($_ -notlike '*total*') -and ($_ -notlike '*------*')} ## Eliminate summary lines
	write-host " "
	return $Result
	<#
	$version = New-Object -TypeName _Version
	$version.ReleaseVersionName = partempgetversion 0 2 3
	$version.Patches = partempgetversion 1 1 2
	$version.CliServer = partempgetversion 4 2 3
	$version.CliClient = partempgetversion 5 2 3
	$version.SystemManager = partempgetversion 6 2 3
	$version.Kernel = partempgetversion 7 1 2
	$version.TPDKernelCode = partempgetversion 8 3 4
	$version
	#>
}
function partempgetversion([String] $linenumber,[String] $index1 , [string] $index2)
{
	$s= $Result[$linenumber]
	$s= $s.Trim()
	$s= [regex]::Replace($s," ",",")			# Replace one  spaces with comma 
	$s= [regex]::Replace($s,",+",",")			# Replace one or more commad with with comma 
	$sTemp = $s.Split(',')
	return $sTemp[$index1]+$sTemp[$index2]			
}

######################################
### Function Get-3parTask
######################################
Function Get-3parTask
{
<#
  .SYNOPSIS
    Displays information about tasks.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parTask) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Task) instead.
  
	Displays information about tasks.
	
  .EXAMPLE
    Get-3parTask 
	Display all tasks.
        
  .EXAMPLE
    Get-3parTask -All
	Display all tasks. Unless the -all option is specified, system tasks
	are not displayed.
	
  .EXAMPLE		
	Get-3parTask -Done
	 Display includes only tasks that are successfully completed

  .EXAMPLE
	Get-3parTask -Failed
	 Display includes only tasks that are unsuccessfully completed.
	
  .EXAMPLE	
	Get-3parTask -Active
	 Display includes only tasks that are currently in progress.
	
  .EXAMPLE	
	Get-3parTask -Hours 10
	 Show only tasks started within the past <hours>
	 
  .EXAMPLE	
	Get-3parTask -Task_type xyz
	 Specifies that specified patterns are treated as glob-style patterns and that all tasks whose types match the specified pattern are displayed
	
  .EXAMPLE	
	Get-3parTask -taskID 4
	 Show detailed task status for specified task 4.

  .PARAMETER All	
	Displays all tasks.
  
  .PARAMETER Done	
	Displays only tasks that are successfully completed.
  
  .PARAMETER Failed	
	Displays only tasks that are unsuccessfully completed.
  
  .PARAMETER Active	
	Displays only tasks that are currently in progress
	
  .PARAMETER Hours 
    Show only tasks started within the past <hours>, where <hours> is an integer from 1 through 99999.
	
  .PARAMETER Task_type 
     Specifies that specified patterns are treated as glob-style patterns and that all tasks whose types match the specified pattern are displayed. To see the different task types use the showtask column help.
	
  .PARAMETER TaskID 
     Show detailed task status for specified tasks. Tasks must be explicitly specified using their task IDs <task_ID>. Multiple task IDs can be specified. This option cannot be used in conjunction with other options.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parTask
    LASTEDIT: 01/23/2017
    KEYWORDS: Get-3parTask
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[Switch]
		$All,	
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$Done,
		
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$Failed,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$Active,

		[Parameter(Position=4, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Hours,
		
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Task_type,
		
		[Parameter(Position=6, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$TaskID,   

		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 		
	)		
	
	Write-DebugLog "Start: In Get-3parTask - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parTask since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parTask since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$taskcmd = "showtask "
	
	if($All)	
	{
		$taskcmd +=" -all "
	}
	if($Done)	
	{
		$taskcmd +=" -done "
	}
	if($Failed)	
	{
		$taskcmd +=" -failed "
	}
	if($Active)	
	{
		$taskcmd +=" -active "
	}
	if($Hours)	
	{
		$taskcmd +=" -t $Hours "
	}
	if($Task_type)	
	{
		$taskcmd +=" -type $Task_type "
	}
	if($TaskID)	
	{
		$taskcmd +=" -d $TaskID "
	}	
	
	$result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $taskcmd
	#write-host $result 
	write-debuglog " Running get task status  with the command --> $taskcmd" "INFO:"
	if($TaskID)	
	{
		return $result
	}	
	if($Result -match "Id" )
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count  
		$incre = "true"
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")	
			$s= [regex]::Replace($s,"-","")			
			$s= $s.Trim() -replace 'StartTime,FinishTime','Date(ST),Time(ST),Zome(ST),Date(FT),Time(FT),Zome(FT)' 
			if($incre -eq "true")
			{
				$s=$s.Substring(1)					
			}
			Add-Content -Path $tempFile -Value $s
			$incre="false"		
		}
		Import-Csv $tempFile 
		del $tempFile
	}	
	if($Result -match "Id")
	{
		return  " Success : Executing Get-3parTask"
	}
	else
	{			
		return  $Result
	}	
} #END Get-3parTask

#####################################################################################################################
## FUNCTION New-3parVVCopy
#####################################################################################################################
Function New-3parVVCopy
{
<#
  .SYNOPSIS
    Creates a full physical copy of a Virtual Volume (VV) or a read/write virtual copy on another VV.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parVVCopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-VvCopy) instead.
  
	Creates a full physical copy of a Virtual Volume (VV) or a read/write virtual copy on another VV.
        
  .EXAMPLE
    New-3parVVCopy -parentName VV1 -vvCopyName VV2
	
  .EXAMPLE		
	New-3parVVCopy -parentName VV1 -vvCopyName VV2 -online -CPGName ZZZ

  .EXAMPLE
	New-3parVVCopy -parentName as1 -vvCopyName as3 -online -CPGName asCpg -Tpvv

  .EXAMPLE
	New-3parVVCopy -parentName as1 -vvCopyName as3  -Tdvv

  .EXAMPLE
	New-3parVVCopy -parentName as1 -vvCopyName as3  -Dedup

  .EXAMPLE
	New-3parVVCopy -parentName as1 -vvCopyName as3  -Compr

  .EXAMPLE
	New-3parVVCopy -parentName as1 -vvCopyName as3  -AddToSet

  .EXAMPLE
	New-3parVVCopy -parentName as1 -vvCopyName as3 -Priority med
	
  .PARAMETER parentName 
    Specify name of the parent Virtual Volume
	
  .PARAMETER Online 
    Create an online copy of Virtual Volume
	
  .PARAMETER vvCopyName 
    Specify name of the virtual Volume Copy name
	
  .PARAMETER CPGName
    Specify the name of CPG

  .PARAMETER snapcpg
	Specifies the name of the CPG from which the snapshot space will be allocated
 
  .PARAMETER Tpvv
	Indicates that the VV the online copy creates should be a thinly
	provisioned volume. Cannot be used with the -dedup option.

  .PARAMETER Tdvv
	This option is deprecated, see -dedup.

  .PARAMETER Dedup
	Indicates that the VV the online copy creates should be a thinly
	deduplicated volume, which is a thinly provisioned volume with inline
	data deduplication. This option can only be used with a CPG that has
	SSD (Solid State Drive) device type. Cannot be used with the -tpvv
	option.

  .PARAMETER Compr
	Indicates that the VV the online copy creates should be a compressed
	virtual volume.
		
  .PARAMETER AddToSet 
	Adds the VV copies to the specified VV set. The set will be created if
	it does not exist. Can only be used with -online option.
		
  .PARAMETER R
	Specifies that the destination volume be re-synchronized with its parent
	volume using a saved snapshot so that only the changes since the last
	copy or resynchronization need to be copied.

  .PARAMETER Halt
	Specifies that an ongoing physical copy to be stopped. This will cause
	the destination volume to be marked with the 'cpf' status, which will be
	cleared up when a new copy is started.

  .PARAMETER Save
	Saves the snapshot of the source volume after the copy of the volume is
	completed. This enables a fast copy for the next resynchronization. If
	not specified, the snapshot is deleted and the association of the
	destination volume as a copy of the source volume is removed.  The -s
	option is implied when the -r option is used and need not be explicitly
	specified.

  .PARAMETER Blocks
	Specifies that this command blocks until the operation is completed. If
	not specified, the createvvcopy command operation is started as a
	background task.

  .PARAMETER priority
	Specifies the priority of the copy operation when it is started. This
	option allows the user to control the overall speed of a particular
	task.  If this option is not specified, the createvvcopy operation is
	started with default priority of medium. High priority indicates that
	the operation will complete faster. Low priority indicates that the
	operation will run slower than the default priority task. This option
	cannot be used with -halt option.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parVVCopy  
    LASTEDIT: 05/26/2015
    KEYWORDS: New-3parVVCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true)]
		[System.String]
		$parentName,
		
		[Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$vvCopyName,

		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $online,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $CPGName,		
	
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $snapcpg,
	
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Tpvv,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Tdvv,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Dedup,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Compr,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$AddToSet,

		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $R,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Halt,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Saves,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Blocks,
		
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Priority,
	
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	
	Write-DebugLog "Start: In New-3parVVCopy - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parVVCopy since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parVVCopy since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	if(!(($parentName) -and ($vvCopyName)))
	{
		write-debuglog " Please specify values for parentName and vvCopyName " "INFO:" 
		Get-help new-3parVVcopy
		return "FAILURE : Please specify values for parentName and vvCopyName"	
	}
	if ( $parentName -match "^set:")	
	{
		$objName = $item.Split(':')[1]
		$vvsetName = $objName
		$objType = "vv set"
		#$objMsg  = $objType
		if(!( test-3PARObject -objectType $objType  -objectName $vvsetName -SANConnection $SANConnection))
		{
			write-debuglog " vvset $vvsetName does not exist. Please use New-3parVVSet to create a new vvset " "INFO:" 
			return "FAILURE : No vvset $vvSetName found"
		}
	}
	else
	{
		if(!( test-3PARObject -objectType "vv"  -objectName $parentName -SANConnection $SANConnection))
		{
			write-debuglog " vv $parentName does not exist. Please use New-3parVV to create a new vv " "INFO:" 
			return "FAILURE : No parent VV  $parentName found"
		}
	}
	if($online)
	{			
		if(!( test-3PARObject -objectType 'cpg' -objectName $CPGName -SANConnection $SANConnection))
		{
			write-debuglog " CPG $CPGName does not exist. Please use New-3parCPG to create a CPG " "INFO:" 
			return "FAILURE : No cpg $CPGName found"
		}		
		if( test-3PARObject -objectType 'vv' -objectName $vvCopyName -SANConnection $SANConnection)
		{
			write-debuglog " vv $vvCopyName is exist. For online option vv should not be exists..." "INFO:" 
			#return "FAILURE : vv $vvCopyName is exist. For online option vv should not be exists..."
		}		
		$vvcopycmd = "createvvcopy -p $parentName -online "
		if($snapcpg)
		{
			if(!( test-3PARObject -objectType 'cpg' -objectName $snapcpg -SANConnection $SANConnection))
			{
				write-debuglog " Snapshot CPG $snapcpg does not exist. Please use New-3parCPG to create a CPG " "INFO:" 
				return "FAILURE : No snapshot cpg $snapcpg found"
			}
			$vvcopycmd += " -snp_cpg $snapcpg"
		}
				
		if($Tpvv)
		{
			$vvcopycmd += " -tpvv "
		}
		if($Tdvv)
		{
			$vvcopycmd += " -tdvv "
		}
		if($Dedup)
		{
			$vvcopycmd += " -dedup "
		}
		if($Compr)
		{
			$vvcopycmd += " -compr "
		}
		if($AddToSet)
		{
			$vvcopycmd += " -addtoset "
		}
		if($Halt)
		{
			$vvcopycmd += " -halt "
		}
		if($Saves)
		{
			$vvcopycmd += " -s "
		}
		if($Blocks)
		{
			$vvcopycmd += " -b "
		}
		if($Priority)
		{
			$a = "high","med","low"
			$l=$Priority
			if($a -eq $l)
			{
				$vvcopycmd += " -pri $Priority "			
			}
			else
			{ 
				Write-DebugLog "Stop: Exiting Since -Priority $Priority in incorrect "
				Return "FAILURE : -Priority :- $Priority is an Incorrect Priority  [high | med | low]  can be used only . "
			}
			
		}
		if($CPGName)
		{
			$vvcopycmd += " $CPGName "
		}
		
		$vvcopycmd += " $vvCopyName"
		
		$Result4 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $vvcopycmd
		write-debuglog " Creating online vv copy with the command --> $vvcopycmd" "INFO:" 
		if($Result4 -match "Copy was started.")
		{		
			return "Success : $Result4"
		}
		else
		{
			return "FAILURE : $Result4"
		}		
	}
	else
	{
		$vvcopycmd = " createvvcopy "
		if($R)
		{ 
			$vvcopycmd += " -r"
		}
		if($Halt)
		{
			$vvcopycmd += " -halt "
		}
		if($Saves)
		{
			$vvcopycmd += " -s "
		}
		if($Blocks)
		{
			$vvcopycmd += " -b "
		}
		if($Priority)
		{
			$a = "high","med","low"
			$l=$Priority
			if($a -eq $l)
			{
				$vvcopycmd += " -pri $Priority "			
			}
			else
			{ 
				Write-DebugLog "Stop: Exiting Since -Priority $Priority in incorrect "
				Return "FAILURE : -Priority :- $Priority is an Incorrect Priority  [high | med | low]  can be used only . "
			}			
		}
		if( !(test-3PARObject -objectType 'vv' -objectName $vvCopyName -SANConnection $SANConnection))
		{
			write-debuglog " vv $vvCopyName does not exist.Please speicify existing vv name..." "INFO:" 
			return "FAILURE : No vv $vvCopyName found"
		}
		$vvcopycmd += " -p $parentName $vvCopyName"
		
		$Result3 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $vvcopycmd
		write-debuglog " Creating Virtual Copy with the command --> $vvcopycmd" "INFO:" 
		write-debuglog " Check the task status using Get-3parTask command --> Get-3parTask " "INFO:"
		if($Result3 -match "Copy was started")
		{
			return "Success : $Result3"
		}
		else
		{
			return "FAILURE : $Result3"
		}
	}

}# End New-3parVVCopy

#####################################################################################################################
## FUNCTION New-3parGroupVVCopy
######################################################################################################################

Function New-3parGroupVVCopy
{
<#
  .SYNOPSIS
    Creates consistent group physical copies of a list of virtualvolumes.
  
  .DESCRIPTION
  Note : This cmdlet (New-3parGroupVVCopy) is deprecated and will be removed in a 
  subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-GroupVvCopy) instead.
  
	Creates consistent group physical copies of a list of virtualvolumes.
  
  .EXAMPLE
    New-3parGroupVVCopy -P -parent_VV ZZZ -destination_VV ZZZ 
	
  .EXAMPLE
    New-3parGroupVVCopy -P -Online -parent_VV ZZZ -destination_cpg ZZZ -VV_name ZZZ -wwn 123456
	
  .EXAMPLE
    New-3parGroupVVCopy -R -destination_VV ZZZ
	
  .EXAMPLE
    New-3parGroupVVCopy -Halt -destination_VV ZZZ
	
  .PARAMETER parent_VV 
    Indicates the parent virtual volume.
	
  .PARAMETER destination_VV
	Indicates the destination virtual volume. 
	
  .PARAMETER destination_cpg
	 Specifies the destination CPG to use for the destination volume if the -online option is specified.
	 
  .PARAMETER VV_name
     Specifies the virtual volume name to use for the destination volume if the -online option is specified.
	 
  .PARAMETER wwn
     Specifies the WWN to use for the destination volume if the -online option is specified.
  
  .PARAMETER P
	Starts a copy operation from the specified parent volume (as indicated
	using the <parent_VV> specifier) to its destination volume (as indicated
	using the <destination_VV> specifier).
		
  .PARAMETER  R
	Resynchronizes the set of destination volumes (as indicated using the
	<destination_VV> specifier) with their respective parents using saved
	snapshots so that only the changes made since the last copy or
	resynchronization are copied. 

  .PARAMETER Halt
	Cancels an ongoing physical copy. 

  .PARAMETER S
	Saves snapshots of the parent volume (as indicated with the <parent_VV>
	specifier) for quick resynchronization and to retain the parent-copy
	relationships between each parent and destination volume. 

  .PARAMETER B
	Use this specifier to block until all the copies are complete. Without
	this option, the command completes before the copy operations are
	completed (use the showvv command to check the status of the copy
	operations).

  .PARAMETER Priority <high|med|low>
	Specifies the priority of the copy operation when it is started. This
	option allows the user to control the overall speed of a particular task.
	If this option is not specified, the creategroupvvcopy operation is
	started with default priority of medium. High priority indicates that
	the operation will complete faster. Low priority indicates that the
	operation will run slower than the default priority task. This option
	cannot be used with -halt option.

  .PARAMETER Online
	Specifies that the copy is to be performed online. 

  .PARAMETER Skip_zero
	When copying from a thin provisioned source, only copy allocated
	portions of the source VV.

  .PARAMETER TPVV
	Indicates that the VV the online copy creates should be a thinly
	provisioned volume. Cannot be used with the -dedup option.

  .PARAMETER TdVV
	This option is deprecated, see -dedup.

  .PARAMETER Dedup
	Indicates that the VV the online copy creates should be a thinly
	deduplicated volume, which is a thinly provisioned volume with inline
	data deduplication. This option can only be used with a CPG that has
	SSD (Solid State Drive) device type. Cannot be used with the -tpvv
	option.

  .PARAMETER Compressed
	Indicates that the VV the online copy creates should be a compressed
	virtual volume.    

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with New-3ParPoshSshConnection Or New-3parCLIConnection
	
  .Notes
    NAME:  New-3parGroupVVCopy  
    LASTEDIT: 05/26/2015
    KEYWORDS: New-3parGroupVVCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$parent_VV,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$destination_VV,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$destination_cpg,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$VV_name,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$wwn,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$P,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$R,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Halt,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$S,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$B,
		
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]		
		$Priority,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Skip_zero,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Online,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$TPVV,
		
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$TdVV,
		
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Dedup,
		
		[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Compressed,		
		
		[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection
	)		
	
	Write-DebugLog "Start: In New-3parGroupVVCopy - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parRCopy   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parRCopy   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
		
	$groupvvcopycmd = "creategroupvvcopy "		
	
	if($P)
	{
		$groupvvcopycmd += " -p "
	}
	elseif($R)
	{
		$groupvvcopycmd += " -r "
	}
	elseif($Halt)
	{
		$groupvvcopycmd += " -halt "
	}
	else
	{
		return "Select At least One from P R or Halt"
	}
	
	if($S)
	{
		$groupvvcopycmd += " -s "
	}
	if($B)
	{
		$groupvvcopycmd += " -b "
	}
	if($Priority)
	{
		$groupvvcopycmd += " -pri $Priority "
	}
	if($Skip_zero)
	{
		$groupvvcopycmd += " -skip_zero "
	}
	if($Online)
	{
		$groupvvcopycmd += " -online "
		if($TPVV)
		{
			$groupvvcopycmd += " -tpvv "
		}
		if($TdVV)
		{
			$groupvvcopycmd += " -tdvv "
		}
		if($Dedup)
		{
			$groupvvcopycmd += " -dedup "
		}
		if($Compressed)
		{
			$groupvvcopycmd += " -compr "
		}								
	}
	if($parent_VV)
	{
		$groupvvcopycmd += " $parent_VV"
		$groupvvcopycmd += ":"
	}
	if($destination_VV)
	{
		$groupvvcopycmd += "$destination_VV"
	}
	if($destination_cpg)
	{
		$groupvvcopycmd += "$destination_cpg"
		$groupvvcopycmd += ":"
	}
	if($VV_name)
	{
		$groupvvcopycmd += "$VV_name"
	}
	if($wwn)
	{
		$groupvvcopycmd += ":"
		$groupvvcopycmd += "$wwn"
	}	
	$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $groupvvcopycmd
	write-debuglog " Creating consistent group fo Virtual copies with the command --> $groupvvcopycmd" "INFO:"
	if ($Result1 -match "TaskID")
	{
		$outmessage += "Success : `n $Result1"
	}
	else
	{
		$outmessage += "FAILURE : `n $Result1"
	}
	return $outmessage
}# END New-3parGroupVVCopy

#####################################################################################################################
## FUNCTION Push-3parVVCopy
######################################################################################################################

Function Push-3parVVCopy
{
<#
  .SYNOPSIS
    Promotes a physical copy back to a regular base volume
  
  .DESCRIPTION
    Note : This cmdlet (Push-3parVVCopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Push-VvCopy) instead.
  
	Promotes a physical copy back to a regular base volume
        
  .EXAMPLE
    Push-3parVVCopy –physicalCopyName volume1
		Promotes virtual volume "volume1" to a base volume
	
  .PARAMETER –physicalCopyName 
    Specifies the name of the physical copy to be promoted.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parVVCopy 
    LASTEDIT: 05/26/2015
    KEYWORDS: Push-3parVVCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$physicalCopyName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Promote-3parVVCopy - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Promote-3parVVCopy since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Promote-3parVVCopy since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	if($physicalCopyName)
	{
		if(!( test-3PARObject -objectType "vv"  -objectName $physicalCopyName -SANConnection $SANConnection))
		{
			write-debuglog " vv $physicalCopyName does not exist. Please use New-3parVV to create a new vv" "INFO:" 
			return "FAILURE : No vv $physicalCopyName found"
		}
		$promotevvcopycmd = "promotevvcopy $physicalCopyName"
		$Result3 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $promotevvcopycmd
		
		write-debuglog " Promoting Physical volume with the command --> $promotevvcopycmd" "INFO:"
		if( $Result3 -match "not a physical copy")
		{
			return "FAILURE : $Result3"
		}
		elseif($Result3 -match "FAILURE")
		{
			return "FAILURE : $Result3"
		}
		else
		{
			return $Result3
		}
	}
	else 
	{
		write-debuglog " Please specify values for physicalCopyName " "INFO:" 
		Get-help Push-3parVVCopy
		return
	}
}#END Push-3parVVCopy

####################################################################################################################
## FUNCTION Set-3parVV
#####################################################################################################################

Function Set-3parVV
{
<#
  .SYNOPSIS
    Updates a snapshot Virtual Volume (VV) with a new snapshot.
  
  .DESCRIPTION
    Note : This cmdlet (Set-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Vv) instead.
  
	Updates a snapshot Virtual Volume (VV) with a new snapshot.
        
  .EXAMPLE
    Set-3parVV -Name volume1 -Force
	snapshot update of snapshot VV "volume1"
		
  .EXAMPLE
    Set-3parVV -Name volume1,volume2 -Force
	snapshot update of snapshot VV's "volume1" and "volume2"
		
  .EXAMPLE
    Set-3parVV -Name set:vvset1 -Force
	snapshot update of snapshot VVSet "vvset1"
		
  .EXAMPLE
    Set-3parVV -Name set:vvset1,set:vvset2 -Force
	snapshot update of snapshot VVSet's "vvset1" and "vvset2"

  .EXAMPLE	
	Set-3parVV -Name as2 -RO
	
  .EXAMPLE	
	Set-3parVV -Name as2 -Force -RemoveAndRecreate 
	
  .PARAMETER Name 
    Specifies the name(s) of the snapshot virtual volume(s) or virtual volume set(s) to be updated.

  .PARAMETER RO 
    Specifies that if the specified VV (<VV_name>) is a read/write snapshot the snapshot’s read-only
	parent volume is also updated with a new snapshot if the parent volume is not a member of a
	virtual volume set

  .PARAMETER Force
   Specifies that the command is forced.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3parVV 
    LASTEDIT: 12/09/2017
    KEYWORDS: Set-3parVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Name,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Force,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$RemoveAndRecreate,

		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$RO, 	
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Set-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if(!($Name))
	{
		Get-help Set-3parVV
		return
	}
			
	if($Name)
	{			
		$updatevvcmd="updatevv -f "
		
		if($RO)
		{
			$updatevvcmd += " -ro "
		}
		if($RemoveAndRecreate)
		{
			$updatevvcmd += " -removeandrecreate  "
		}
		
		$vvtempnames = $Name.split(",")
		$limit = $vvtempnames.Length - 1
		foreach ($i in 0..$limit)
		{				
			if ( $vvtempnames[$i] -match "^set:")	
			{
				$objName = $vvtempnames[$i].Split(':')[1]
				$vvsetName = $objName
				$objType = "vv set"
				#$objMsg  = $objType
				if(!( test-3PARObject -objectType $objType  -objectName $vvsetName -SANConnection $SANConnection))
				{
					write-debuglog " vvset $vvsetName does not exist. Please use New-3parVVSet to create a new vvset " "INFO:" 
					return "FAILURE : No vvset $vvsetName found"
				}
			}				
			else
			{					
				$subcmd = $vvtempnames[$i]
				if(!( test-3PARObject -objectType "vv"  -objectName $subcmd -SANConnection $SANConnection))
				{
					write-debuglog " vv $vvtempnames[$i] does not exist. Please use New-3parVV to create a new vv" "INFO:" 
					return "FAILURE : No vv $subcmd found"
				}
			}
		}		

		$updatevvcmd += " $vvtempnames "
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $updatevvcmd
		write-debuglog " updating a snapshot Virtual Volume (VV) with a new snapshot using--> $updatevvcmd" "INFO:" 
		return $Result1				
	}
	else
	{
		write-debuglog " Please specify values for vvname parameter " "INFO:" 
		return "FAILURE : Please specify values for vvname parameter"
	}
	
}#END Set-3parVV
####################################################################################################################
## FUNCTION New-3parSnapVolume
#####################################################################################################################
Function New-3parSnapVolume
{
<#
  .SYNOPSIS
    creates a point-in-time (snapshot) copy of a virtual volume.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parSnapVolume) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-SnapVolume) instead.
  
	creates a point-in-time (snapshot) copy of a virtual volume.
        
  .EXAMPLE
   New-3parSnapVolume -svName svr0_vv0 -vvName vv0 
   Ceates a read-only snapshot volume "svro_vv0" from volume "vv0" 
   
  .EXAMPLE
   New-3parSnapVolume  -svName svr0_vv0 -vvName vv0 -ro -exp 25H
   Ceates a read-only snapshot volume "svro_vv0" from volume "vv0" and that will expire after 25 hours
   
  .EXAMPLE
   New-3parSnapVolume -svName svrw_vv0 -vvName svro_vv0
   creates snapshot volume "svrw_vv0" from the snapshot "svro_vv0"
   
  .EXAMPLE
   New-3parSnapVolume -ro svName svro-@vvname@ -vvSetName set:vvcopies 
   creates a snapshot volume for each member of the VV set "vvcopies". Each snapshot will be named svro-<name of parent virtual volume>:
  
  .PARAMETER svName 
    Specify  the name of the Snap shot	
	
  .PARAMETER vvName 
    Specifies the parent volume name or volume set name. 

  .PARAMETER vvSetName 
    Specifies the virtual volume set names as set: vvset name example: "set:vvcopies" 
	
  .PARAMETER Comment 
    Specifies any additional information up to 511 characters for the volume. 
	
  .PARAMETER VV_ID 
    Specifies the ID of the copied VV set. This option cannot be used when VV set is specified. 
	
  .PARAMETER Rcopy 
     Specifies that synchronous snapshots be taken of a volume in a remote copy group. 
	
  .PARAMETER exp 
    Specifies the relative time from the current time that volume will expire.-exp <time>[d|D|h|H]
	<time> is a positive integer value and in the range of 1 - 43,800 hours (1,825 days). Time can be optionally specified in days or hours providing either d or D for day and h or H for hours following the entered time value. 
	
  .PARAMETER retain
	Specifies the amount of time, relative to the current time, that the volume will be retained. <time>
	is a positive integer value and in the range of 1 - 43,800 hours (1,825 days). Time can be
	optionally specified in days or hours providing either d or D for day and h or H for hours following
	the entered time value.

  .PARAMETER ro
	Specifies that the copied volume is read-only. If not specified, the
	volume is read/write.	
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parSnapVolume  
    LASTEDIT: 05/26/2015
    KEYWORDS: New-3parSnapVolume
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
 [CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$svName,
				
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$vvName,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$VV_ID,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$exp,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$retain,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$ro, 
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Rcopy,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$vvSetName,	

		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Comment,
						
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)	

	Write-DebugLog "Start: In New-3parSnapVolume - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parSnapVolume since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parSnapVolume since SAN connection object values are null/empty"
			}
		}
	}	
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	if ($svName)
	{
		if ($vvName)
		{
			## Check vv Name 
			if ( !( test-3PARObject -objectType 'vv' -objectName $vvName -SANConnection $SANConnection))
			{
				write-debuglog " VV $vvName does not exist. Please use New-3parVV to create a VV before creating SV" "INFO:" 
				return "FAILURE :  No vv $vvName found"
			}
			
			$CreateSVCmd = "createsv" 
			
			if($ro)
			{
				$CreateSVCmd += " -ro "
			}
			if($Rcopy)
			{
				$CreateSVCmd += " -rcopy "
			}
			if($VV_ID)
			{
				$CreateSVCmd += " -i $VV_ID "
			}
			if($exp)
			{
				$CreateSVCmd += " -exp $exp "
			}
			if($retain)
			{
				$CreateSVCmd += " -f -retain $retain  "
			}
			if($Comment)
			{
				$CreateSVCmd += " -comment $Comment  "
			}
			$CreateSVCmd +=" $svName $vvName "

			$result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreateSVCmd
			write-debuglog " Creating Snapshot Name $svName with the command --> $CreateSVCmd" "INFO:"
			if([string]::IsNullOrEmpty($result1))
			{
				return  "Success : Created virtual copy $svName"
			}
			else
			{
				return  "FAILURE : While creating virtual copy $svName $result1"
			}		
		}
		# If VolumeSet is specified then add SV to VVset
		elseif ($vvSetName)
		{
			if ( $vvSetName -match "^set:")	
			{
				$objName = $vvSetName.Split(':')[1]
				$objType = "vv set"
				if ( ! (Test-3PARObject -objectType $objType -objectName $objName -SANConnection $SANConnection))
				{
					Write-DebugLog " VV set $vvSetName does not exist. Please use New-3parVVSet to create a VVSet before creating SV" "INFO:"
					return "FAILURE : No vvset $vvsetName found"
				}
				$CreateSVCmdset = "createsv" 
				
				if($ro)
				{
					$CreateSVCmdset += " -ro "
				}
				if($Rcopy)
				{
					$CreateSVCmdset += " -rcopy "
				}
				if($exp)
				{
					$CreateSVCmdset += " -exp $exp "
				}
				if($retain)
				{
					$CreateSVCmdset += " -f -retain $retain  "
				}
				if($Comment)
				{
					$CreateSVCmdset += " -comment $Comment  "
				}
				$CreateSVCmdset +=" $svName $vvSetName "
				
				$result2 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreateSVCmdset
				write-debuglog " Creating Snapshot Name $svName with the command --> $CreateSVCmdset" "INFO:" 	
				if([string]::IsNullOrEmpty($result2))
				{
					return  "Success : Created virtual copy $svName"
				}
				elseif($result2 -match "use by volume")
				{
					return "FAILURE : While creating virtual copy $result2"
				}
				else
				{
					return  "FAILURE : While creating virtual copy $svName $result2"
				}
			}
			else
			{
				return "VV Set name must contain set:"
			}
		}
		else
		{
			write-debugLog "No VVset or VVName specified to assign snapshot to it" "ERR:" 
			return "FAILURE : No vvset or vvname specified"
		}
		
		
	}
	else
	{
		write-debugLog "No svName specified for new Snapshot volume. Skip creating Snapshot volume" "ERR:"
		Get-help New-3parSnapVolume
		return	
	}
}#END New-3parSnapVolume

####################################################################################################################
## FUNCTION Push-3parSnapVolume
#####################################################################################################################
Function Push-3parSnapVolume
{
<#
  .SYNOPSIS
    This command copies the differences of a snapshot back to its base volume, allowing
	you to revert the base volume to an earlier point in time.
  
  .DESCRIPTION
    Note : This cmdlet (Push-3parSnapVolume) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Push-SnapVolume) instead.
  
	This command copies the differences of a snapshot back to its base volume, allowing
	you to revert the base volume to an earlier point in time.
        
  .EXAMPLE
   Push-3parSnapVolume -name vv1 
	copies the differences of a snapshot back to its base volume "vv1"
	
  .EXAMPLE
   Push-3parSnapVolume -target vv23 -name vv1 
	copies the differences of a snapshot back to target volume "vv23" of volume "vv1"
	
  .PARAMETER name 
    Specifies the name of the virtual copy volume or set of virtual copy volumes to be promoted 
	
  .PARAMETER target 
    Copy the differences of the virtual copy to the specified RW parent in the same virtual volume
    family tree.
	
  .PARAMETER RCP
	Allows the promote operation to proceed even if the RW parent volume is
	currently in a Remote Copy volume group, if that group has not been
	started. If the Remote Copy group has been started, this command fails.
	This option cannot be used in conjunction with the -halt option.
  
  .PARAMETER Halt
	Cancels an ongoing snapshot promotion. Marks the RW parent volume with
	the "cpf" status that can be cleaned up using the promotevvcopy command
	or by issuing a new instance of the promotesv command. This option
	cannot be used in conjunction with any other option.    
   
  .PARAMETER PRI
	Specifies the priority of the copy operation when it is started. This
	option allows the user to control the overall speed of a particular
	task.  If this option is not specified, the promotesv operation is
	started with default priority of medium. High priority indicates that
	the operation will complete faster. Low priority indicates that the
	operation will run slower than the default priority task. This option
	cannot be used with -halt option.    
  
  .PARAMETER Online
	Indicates that the promote operation will be executed while the target
	volume has VLUN exports. The host should take the target LUN offline to
	initiate the promote command, but can bring it online and use it during
	the background task. The specified virtual copy and its base volume must
	be the same size. The base volume is the only possible target of online
	promote, and is the default. To halt a promote started with the online
	option, use the canceltask command. The -halt, -target, and -pri options
	cannot be combined with the -online option.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parSnapVolume 
    LASTEDIT: 05/27/2015
    KEYWORDS: Push-3parSnapVolume
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
 [CmdletBinding()]
	param(	
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$name,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$target,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$RCP,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Halt,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$PRI,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Online,		
							
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)	
	Write-DebugLog "Start: In Push-3parSnapVolume - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parSnapVolume since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parSnapVolume since SAN connection object values are null/empty"
			}
		}
	}	
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$promoCmd = "promotesv"	
	if($target)
	{
		## Check Target Name 
		if ( !( test-3PARObject -objectType 'vv' -objectName $target -SANConnection $SANConnection))
		{
			write-debuglog " VV $target does not exist. " "INFO:" 
			$promoCmd += " -target $target "
			return "FAILURE : No vv $target found"
		}
		$promoCmd += " -target $target "	
	}
	if ($RCP)
 	{
		$promoCmd += " -rcp "
	}
	if ($Halt)
 	{
		$promoCmd += " -halt "
	}
	if ($PRI)
 	{
		$promoCmd += " -pri $PRI "
	}
	if ($Online)
 	{
		$promoCmd += " -online "
	}
	if ($name)
 	{		
		## Check vv Name 
		if ( !( test-3PARObject -objectType 'vv' -objectName $name -SANConnection $SANConnection))
		{
			write-debuglog " VV $vvName does not exist. Please use New-3parVV to create a VV before creating SV" "INFO:" 
			return "FAILURE : No vv $vvName found"
		}								
		$promoCmd += " $name "
		$result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $promoCmd
		#write-host $result -ForegroundColor DARKGRAY
		write-debuglog " Promoting Snapshot Volume Name $vvName with the command --> $promoCmd" "INFO:" 
		Return $result
	}		
	else
	{
		write-debugLog "No vvName specified to Promote snapshot " "ERR:" 
		Get-help Push-3parSnapVolume
		return
	}
}#END Push-3parSnapVolume

#####################################################################################################################
## FUNCTION New-3parGroupSnapVolume
#####################################################################################################################

Function New-3parGroupSnapVolume
{
<#
  .SYNOPSIS
    creates consistent group snapshots
  
  .DESCRIPTION
    Note : This cmdlet (New-3parGroupSnapVolume) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-GroupSnapVolume) instead.
  
	creates consistent group snapshots
        
  .EXAMPLE
	New-3parGroupSnapVolume.

  .EXAMPLE
	New-3parGroupSnapVolume -vvNames WSDS_compr02F.
	
  .EXAMPLE
	New-3parGroupSnapVolume -vvNames WSDS_compr02F -exp 2d
 
  .EXAMPLE
	New-3parGroupSnapVolume -vvNames WSDS_compr02F -retain 2d
  
  .EXAMPLE
	NNew-3parGroupSnapVolume -vvNames WSDS_compr02F -Comment Hello
	
  .EXAMPLE
	New-3parGroupSnapVolume -vvNames WSDS_compr02F -OR
	
  .PARAMETER vvNames 
    Specify the Existing virtual volume with comma(,) seperation ex: vv1,vv2,vv3.

  .PARAMETER OR
	-or
	
  .PARAMETER Comment 	
	 Specifies any additional information up to 511 characters for the volume.
	
  .PARAMETER exp 
	Specifies the relative time from the current time that volume will expire. <time>[d|D|h|H] <time> is a positive integer value and in the range of 1 - 43,800 hours (1,825 days). Time can be optionally specified in days
	or hours providing either d or D for day and h or H for hours following the entered time value.
    
  .PARAMETER retain
	Specifies the amount of time, relative to the current time, that the volume will be retained.-retain <time>[d|D|h|H]
	<time> is a positive integer value and in the range of 1 - 43,800 hours (1,825 days). Time can be
	optionally specified in days or hours providing either d or D for day and h or H for hours following
	the entered time value.
	
  .PARAMETER Match
	By default, all snapshots are created read-write. The -ro option
	instead specifies that all snapshots created will be read-only.
	The -match option specifies that snapshots are created matching
	each parent's read-only or read-write setting. The -ro and -match
	options cannot be combined. Either of these options can be overridden
	for an individual snapshot VV in the colon separated specifiers.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parGroupSnapVolume  
    LASTEDIT: 05/26/2015
    KEYWORDS: New-3parGroupSnapVolume
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
 [CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$vvNames,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$OR, 
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$exp,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$retain,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Comment,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Match,
								
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)	
	Write-DebugLog "Start: In New-3parGroupSnapVolume - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parGroupSnapVolume since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parGroupSnapVolume since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	if ($vvNames)
	{
		$CreateGSVCmd = "creategroupsv" 

		if($exp)
		{
			$CreateGSVCmd += " -exp $exp "
		}
		if($retain)
		{
			$CreateGSVCmd += " -f -retain $retain "
		}		
		if($Comment)
		{
			$CreateGSVCmd += " -comment $Comment "
		}
		if($OR)
		{
			$CreateGSVCmd += " -ro "
		}
		if($Match)
		{
			$CreateGSVCmd += " -match "
		}
		$vvName1 = $vvNames.Split(',')
		## Check vv Name 
		$limit = $vvName1.Length - 1
		foreach($i in 0..$limit)
		{
			if ( !( test-3PARObject -objectType 'vv' -objectName $vvName1[$i] -SANConnection $SANConnection))
			{
				write-debuglog " VV $vvName1[$i] does not exist. Please use New-3parVV to create a VV before creating 3parGroupSnapVolume" "INFO:" 
				return "FAILURE : No vv $vvName1[$i] found"
			}
		}
		
		$CreateGSVCmd += " $vvName1 "	
		$result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $CreateGSVCmd
		write-debuglog " Creating Snapshot Name with the command --> $CreateGSVCmd" "INFO:"
		if($result1 -match "CopyOfVV")
		{
			return "Success : Executing New-3parGroupSnapVolume `n $result1"
		}
		else
		{
			return "FAILURE : Executing New-3parGroupSnapVolume `n $result1"
		}		
	}
	else
	{
		write-debugLog "No vvNames specified for new Snapshot volume. Skip creating Group Snapshot volume" "ERR:"
		Get-help New-3parGroupSnapVolume
		return	
	}
}# END New-3parGroupSnapVolume	

#####################################################################################################################
## FUNCTION Push-3parGroupSnapVolume
#####################################################################################################################

Function Push-3parGroupSnapVolume
{
<#
  .SYNOPSIS
    Copies the differences of snapshots back to their base volumes.
  
  .DESCRIPTION
    Note : This cmdlet (Push-3parGroupSnapVolume) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Push-GroupSnapVolume) instead.
  
	Copies the differences of snapshots back to their base volumes.
        
  .EXAMPLE
    Push-3parGroupSnapVolume
	
  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr02F

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames "WSDS_compr02F"

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames "tesWSDS_compr01t_lun"

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr01 -RCP

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr01 -Halt

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr01 -PRI high

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr01 -Online

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr01 -TargetVV at

  .EXAMPLE
	Push-3parGroupSnapVolume -VVNames WSDS_compr01 -TargetVV y

  .PARAMETER VVNames 
    Specify virtual copy name of the Snap shot
	
  .PARAMETER TargetVV 
    Target vv Name

  .PARAMETER RCP 
	Allows the promote operation to proceed even if the RW parent volume is
	currently in a Remote Copy volume group, if that group has not been
	started. If the Remote Copy group has been started, this command fails.
	This option cannot be used in conjunction with the -halt option.

  .PARAMETER Halt 
    Cancels ongoing snapshot promotions. Marks the RW parent volumes with
	the "cpf" status that can be cleaned up using the promotevvcopy command
	or by issuing a new instance of the promotesv/promotegroupsv command.
	This option cannot be used in conjunction with any other option.

  .PARAMETER PRI 
    Specifies the priority of the copy operation when it is started. This
	option allows the user to control the overall speed of a particular
	task.  If this option is not specified, the promotegroupsv operation is
	started with default priority of medium. High priority indicates that
	the operation will complete faster. Low priority indicates that the
	operation will run slower than the default priority task. This option
	cannot be used with -halt option.

  .PARAMETER Online 
    Indicates that the promote operation will be executed while the target
	volumes have VLUN exports. The hosts should take the target LUNs offline
	to initiate the promote command, but can be brought online and used
	during the background tasks. Each specified virtual copy and its base
	volume must be the same size. The base volume is the only possible
	target of online promote, and is the default. To halt a promote started
	with the online option, use the canceltask command. The -halt, -target,
	and -pri options cannot be combined with the -online option.	
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parGroupSnapVolume
    LASTEDIT: 05/27/2015
    KEYWORDS: Push-3parGroupSnapVolume
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
 [CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$VVNames,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$TargetVV,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$RCP,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Halt,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$PRI,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Online,
						
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)	
	Write-DebugLog "Start: In Push-3parGroupSnapVolume - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parGroupSnapVolume since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parGroupSnapVolume since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$PromoteCmd = "promotegroupsv " 	
	
	if ($RCP)
	{
		$PromoteCmd += " -rcp "
	}
	if ($Halt)
	{
		$PromoteCmd += " -halt "
	}
	if ($PRI)
	{
		$val = "high","med","low"
		$orgVal=$PRI
		if($val -eq $orgVal)
		{
			$PromoteCmd += " -pri $PRI "			
		}
		else
		{ 
			Write-DebugLog "Stop: Push-3parGroupSnapVolume  since -PRI $PRI in incorrect "
			Return "FAILURE : -PRI :- $PRI is an Incorrect,[ high | med | low]  can be used only . "
		}		
	}
	if ($Online)
	{
		$PromoteCmd += " -online "
	}
	if($VVNames)
	{
		$PromoteCmd += " $VVNames"
	}
	else
	{
		write-debugLog "No VVNames specified to promote " "ERR:" 
		Get-help Push-3parGroupSnapVolume
		return
	}
	if ($TargetVV)
	{
		$PromoteCmd += ":"
		$PromoteCmd += "$TargetVV "
	}
			
	$result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $PromoteCmd
	write-debuglog " Promoting Group Snapshot with $VVNames with the command --> $PromoteCmd" "INFO:" 
	if( $result -match "has been started to promote virtual copy")
	{
		return "Success : Execute Push-3parGroupSnapVolume `n $result"
	}
	elseif($result -match "Error: Base volume may not be promoted")
	{
		return "FAILURE : While Executing Push-3parGroupSnapVolume `Error: Base volume may not be promoted"
	}
	elseif($result -match "has exports defined")
	{
		return "FAILURE : While Executing Push-3parGroupSnapVolume `n $result"
	}
	else
	{
		return "FAILURE : While Executing Push-3parGroupSnapVolume `n $result"
	}
	
}#END Push-3parGroupSnapVolume	

########################################################################################################
## FUNCTION Get-3parVvList
########################################################################################################
Function Get-3parVvList
{
<#
  .SYNOPSIS
    The Get-3parVvList command displays information about all Virtual Volumes (VVs) or a specific VV in a system. 
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parVVList) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-VvList) instead.
  
    The Get-3parVvList command displays information about all Virtual Volumes (VVs) or a specific VV in a system.
        
  .EXAMPLE
    Get-3parVvList
	List all virtual volumes
	
  .EXAMPLE	
	Get-3parVvList -vvName xyz 
	List virtual volume xyz
	
  .EXAMPLE	
	Get-3parVvList -Space -vvName xyz 
	
  .EXAMPLE	
	Get-3parVvList -Pattern -Prov full
	List virtual volume  provision type as "tpvv"
	
  .EXAMPLE	
	Get-3parVvList -Pattern -Type base
	List snapshot(vitual copy) volumes 
	
  .EXAMPLE	
	Get-3parVvList -R -Pattern -Prov tp* -Host TTest -Baseid 50
	
  .EXAMPLE	
	Get-3parVvList -Showcols "Id,Name"
	
  .PARAMETER Listcols
	List the columns available to be shown in the -showcols option
	described below

  .PARAMETER D
	Displays detailed information about the VVs.  The following columns
	are shown:
	Id Name Rd Mstr Prnt Roch Rwch PPrnt PBlkRemain VV_WWN CreationTime Udid

  .PARAMETER Pol
	Displays policy information about the VVs. The following columns
	are shown: Id Name Policies

  .PARAMETER Space
	Displays Logical Disk (LD) space use by the VVs.  The following columns
	are shown:
	Id Name Prov Compr Dedup Type Adm_Rsvd_MB Adm_Used_MB Snp_Rsvd_MB
	Snp_Used_MB Snp_Used_Perc Warn_Snp_Perc Limit_Snp_Perc Usr_Rsvd_MB
	Usr_Used_MB Usr_Used_Perc Warn_Usr_Perc Limit_Usr_Perc Tot_Rsvd_MB
	Tot_Used_MB VSize_MB Host_Wrt_MB Compaction Compression

	Note: For snapshot (vcopy) VVs, the Adm_Used_MB, Snp_Used_MB,
	Usr_Used_MB and the corresponding _Perc columns have a '*' before
	the number for two reasons: to indicate that the number is an estimate
	that must be updated using the updatesnapspace command, and to indicate
	that the number is not included in the total for the column since the
	corresponding number for the snapshot's base VV already includes that
	number.

  .PARAMETER R
	Displays raw space use by the VVs.  The following columns are shown:
	Id Name Prov Compr Dedup Type Adm_RawRsvd_MB Adm_Rsvd_MB Snp_RawRsvd_MB
	Snp_Rsvd_MB Usr_RawRsvd_MB Usr_Rsvd_MB Tot_RawRsvd_MB Tot_Rsvd_MB
	VSize_MB

  .PARAMETER Zone
	Displays mapping zone information for VVs.
	The following columns are shown:
	Id Name Prov Compr Dedup Type VSize_MB Adm_Zn Adm_Free_Zn Snp_Zn
	Snp_Free_Zn Usr_Zn Usr_Free_Zn

  .PARAMETER G
	Displays the SCSI geometry settings for the VVs.  The following
	columns are shown: Id Name SPT HPC SctSz

  .PARAMETER Alert
	Indicates whether alerts are posted on behalf of the VVs.
	The following columns are shown:
	Id Name Prov Compr Dedup Type VSize_MB Snp_Used_Perc Warn_Snp_Perc
	Limit_Snp_Perc Usr_Used_Perc Warn_Usr_Perc Limit_Usr_Perc
	Alert_Adm_Fail_Y Alert_Snp_Fail_Y Alert_Snp_Wrn_Y Alert_Snp_Lim_Y
	Alert_Usr_Fail_Y Alert_Usr_Wrn_Y Alert_Usr_Lim_Y

  .PARAMETER AlertTime
	Shows times when alerts were posted (when applicable).
	The following columns are shown:
	Id Name Alert_Adm_Fail Alert_Snp_Fail Alert_Snp_Wrn Alert_Snp_Lim
	Alert_Usr_Fail Alert_Usr_Wrn Alert_Usr_Lim

  .PARAMETER CPProg
	Shows the physical copy and promote progress.
	The following columns are shown:
	Id Name Prov Compr Dedup Type CopyOf VSize_MB Copied_MB Copied_Perc

  .PARAMETER CpgAlloc
	Shows CPGs associated with each VV.  The following columns are
	shown: Id Name Prov Compr Dedup Type UsrCPG SnpCPG

  .PARAMETER State
	Shows the detailed state information for the VVs.  The following
	columns are shown: Id Name Prov Compr Dedup Type State Detailed_State SedState

  .PARAMETER Hist
	Shows the history information of the VVs.
	The following columns are shown:
	Id Name Prov Compr Dedup Type CreationTime RetentionEndTime ExpirationTime SpaceCalcTime Comment

  .PARAMETER RCopy
	This option appends two columns, RcopyStatus and RcopyGroup, to
	any of the display options above.

  .PARAMETER NoTree
	Do not display VV names in tree format.
	Unless either the -notree or the -sortcol option described below
	are specified, the VVs are ordered and the  names are indented in
	tree format to indicate the virtual copy snapshot hierarchy.
	
  .PARAMETER Expired
	Show only VVs that have expired.

  .PARAMETER Retained
	Shows only VVs that have a retention time.

  .PARAMETER Failed
	Shows only failed VVs.
	
  .PARAMETER Domain
    Shows only VVs that are in domains with names matching one or more of
	the specified domain_name or patterns. This option does not allow
	listing objects within a domain of which the user is not a member.
	
  .PARAMETER Pattern
	Pattern for matching VVs to show (see below for description
	of <pattern>) If the -p option is specified multiple times, each
	instance of <pattern> adds additional candidate VVs that match that
	pattern.        

  .PARAMETER CPG
    Show only VVs whose UsrCPG or SnpCPG matches the one or more of
    the cpgname_or_patterns.
	  
  .PARAMETER Prov
    Show only VVs with Prov (provisioning) values that match the
    prov_or_pattern.
	  
  .PARAMETER Type
   Show only VVs of types that match the type_or_pattern.
	  
  .PARAMETER Host
    Show only VVs that are exported as VLUNs to hosts with names that
    match one or more of the hostname_or_patterns.
	  
  .PARAMETER Baseid
    Show only VVs whose BsId column matches one more of the
    baseid_or_patterns.
  
  .PARAMETER Copyof
    Show only VVs whose CopyOf column matches one more of the
    vvname_or_patterns.
	
  .PARAMETER Rcopygroup
	Show only VVs that are in Remote Copy groups that match
	one or more of the groupname_or_patterns.
	
  .PARAMETER Policy
	Show only VVs whose policy matches the one or more of the
	policy_or_pattern.
	
  .PARAMETER vmName
	Show only VVs whose vmname matches one or more of the
	vvname_or_patterns.
	
  .PARAMETER vmId
	Show only VVs whose vmid matches one or more of the
	vmids.
	
  .PARAMETER vmHost
	Show only VVs whose vmhost matches one or more of the
	vmhost_or_patterns.
	
  .PARAMETER vvolState
	Show only VVs whose vvolstate matches the specified
	state - bound or unbound.
	
  .PARAMETER vvolsc
	Show only VVs whose storage container (vvset) name matches one
	or more of the vvset_name_or_patterns.
	
  .PARAMETER vvName 
    Specify name of the volume. 
	If prefixed with 'set:', the name is a volume set name.	

  .PARAMETER Prov 
    Specify name of the Prov type (full | tpvv |tdvv |snp |cpvv ). 
	
  .PARAMETER Type 
    Specify name of the Prov type ( base | vcopy ).
	
  .PARAMETER ShowCols 
        Explicitly select the columns to be shown using a comma-separated list
        of column names.  For this option the full column names are shown in
        the header.
        Run 'showvv -listcols' to list the available columns.
        Run 'clihelp -col showvv' for a description of each column.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parVvList
    LASTEDIT: 05/29/2015
    KEYWORDS: Get-3parVvList
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Listcols,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$D,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Pol,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Space,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$R,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$Zone,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$G,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$Alert,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$AlertTime,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$CPProg,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$CpgAlloc,
		
		[Parameter(Position=11, Mandatory=$false)]
		[switch]
		$State,
		
		[Parameter(Position=12, Mandatory=$false)]
		[switch]
		$Hist,
		
		[Parameter(Position=13, Mandatory=$false)]
		[switch]
		$RCopy,
		
		[Parameter(Position=14, Mandatory=$false)]
		[switch]
		$NoTree,
		
		[Parameter(Position=15, Mandatory=$false)]
		[System.String]
		$Domain,
		
		[Parameter(Position=16, Mandatory=$false)]
		[switch]
		$Expired,
		
		[Parameter(Position=17, Mandatory=$false)]
		[switch]
		$Retained,
		
		[Parameter(Position=18, Mandatory=$false)]
		[switch]
		$Failed,	
		
		[Parameter(Position=19, Mandatory=$false)]
		[System.String]
		$vvName,
	
		[Parameter(Position=20, Mandatory=$false)]
		[System.String]
		$Type,
		
		[Parameter(Position=21, Mandatory=$false)]
		[System.String]
		$Prov,
		
		[Parameter(Position=22, Mandatory=$false)]
		[switch]
		$Pattern,
		
		[Parameter(Position=23, Mandatory=$false)]
		[System.String]
		$CPG,
		
		[Parameter(Position=24, Mandatory=$false)]
		[System.String]
		$Host,
		
		[Parameter(Position=25, Mandatory=$false)]
		[System.String]
		$Baseid,
		
		[Parameter(Position=26, Mandatory=$false)]
		[System.String]
		$Copyof,
		
		[Parameter(Position=27, Mandatory=$false)]
		[System.String]
		$Rcopygroup,
		
		[Parameter(Position=28, Mandatory=$false)]
		[System.String]
		$Policy,
		
		[Parameter(Position=29, Mandatory=$false)]
		[System.String]
		$vmName,
		
		[Parameter(Position=30, Mandatory=$false)]
		[System.String]
		$vmId,
		
		[Parameter(Position=31, Mandatory=$false)]
		[System.String]
		$vmHost,
		
		[Parameter(Position=32, Mandatory=$false)]
		[System.String]
		$vvolState,
		
		[Parameter(Position=33, Mandatory=$false)]
		[System.String]
		$vvolsc,
		
		[Parameter(Position=34, Mandatory=$false)]
		[System.String]
		$ShowCols,
		
		[Parameter(Position=35, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parVV - validating input values" $Debug 

	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parVvList since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parVvList since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection

	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	
	$GetvVolumeCmd = "showvv "
	$cnt=1
	
	if ($Listcols)
	{
		$GetvVolumeCmd += "-listcols "
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetvVolumeCmd
		return $Result				
	}
	
	if($D)
	{
		$GetvVolumeCmd += "-d "
		$cnt=0
	}	
	if($Pol)
	{
		$GetvVolumeCmd += "-pol "
		$cnt=0
	}
	if($Space)
	{
		$GetvVolumeCmd += "-space "
		$cnt=2
	}	
	if($R)
	{
		$GetvVolumeCmd += "-r "
		$cnt=2
	}
	if($Zone)
	{
		$GetvVolumeCmd += "-zone "
		$cnt=1
	}
	if($G)
	{
		$GetvVolumeCmd += "-g "
		$cnt=0
	}
	if($Alert)
	{
		$GetvVolumeCmd += "-alert "
		$cnt=2
	}
	if($AlertTime)
	{
		$GetvVolumeCmd += "-alerttime "
		$cnt=2
	}
	if($CPProg)
	{
		$GetvVolumeCmd += "-cpprog "
		$cnt=0
	}
	if($CpgAlloc)
	{
		$GetvVolumeCmd += "-cpgalloc "
		$cnt=0
	}
	if($State)
	{
		$GetvVolumeCmd += "-state "
		$cnt=0
	}
	if($Hist)
	{
		$GetvVolumeCmd += "-hist "
		$cnt=0
	}
	if($RCopy)
	{
		$GetvVolumeCmd += "-rcopy "
		$cnt=1
	}
	if($NoTree)
	{
		$GetvVolumeCmd += "-notree "
		$cnt=1
	}
	if($Domain)
	{
		$GetvVolumeCmd += "-domain $Domain "
		$cnt=0
	}
	if($Expired)
	{
		$GetvVolumeCmd += "-expired "
		$cnt=1
	}
	if($Retained)
	{
		$GetvVolumeCmd += "-retained "
		$cnt=0
	}
	if($Failed)
	{
		$GetvVolumeCmd += "-failed "
		$cnt=1
	}
	if($pattern)
	{
		if($CPG)
		{
			$GetvVolumeCmd += "-p -cpg $CPG "
		}
		if($Prov)
		{
			$GetvVolumeCmd += "-p -prov $Prov "
		}
		if($Type)
		{
			$GetvVolumeCmd += "-p -type $Type "
		}
		if($Host)
		{
			$GetvVolumeCmd += "-p -host $Host "
		}
		if($Baseid)
		{
			$GetvVolumeCmd += "-p -baseid $Baseid "
		}
		if($Copyof)
		{
			$GetvVolumeCmd += "-p -copyof $Copyof "
		}
		if($Rcopygroup)
		{
			$GetvVolumeCmd += "-p -rcopygroup $Rcopygroup "
		}
		if($Policy)
		{
			$GetvVolumeCmd += "-p -policy $Policy "
		}
		if($vmName)
		{
			$GetvVolumeCmd += "-p -vmname $vmName "
		}
		if($vmId)
		{
			$GetvVolumeCmd += "-p -vmid $vmId "
		}
		if($vmHost)
		{
			$GetvVolumeCmd += "-p -vmhost $vmHost "
		}
		if($vvolState)
		{
			$GetvVolumeCmd += "-p -vvolstate $vvolState "
		}		
		if($vvolsc)
		{
			$GetvVolumeCmd += "-p -vvolsc $vvolsc "
		}
	}
	
	if($ShowCols)
	{
		$GetvVolumeCmd += "-showcols $ShowCols "
		$cnt=0
	}
	
	if ($vvName)
	{
		$GetvVolumeCmd += " $vvName"
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetvVolumeCmd
	write-debuglog "Get list of Virtual Volumes" "INFO:" 
	
	if($Result -match "no vv listed")
	{
		return "FAILURE : No vv $vvName found"
	}
		
	if ( $Result.Count -gt 1)
	{		
		$incre = "true"
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -3  
		foreach ($s in  $Result[$cnt..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")		
			$s= $s.Trim()
			$temp1 = $s -replace 'Adm,Snp,Usr,VSize','Adm(MB),Snp(MB),Usr(MB),VSize(MB)' 
			$s = $temp1			
			$temp2 = $s -replace '-CreationTime-','Date(Creation),Time(Creation),Zone(Creation)'
			$s = $temp2	
			$temp3 = $s -replace '-SpaceCalcTime-','Date,Time,Zone'
			$s = $temp3	
			if($Space)
			{			
				if($incre -eq "true")
				{								
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')	
					$sTemp[6]="Rsvd(MiB/Snp)"					
					$sTemp[7]="Used(MiB/Snp)"				
					$sTemp[8]="Used(VSize/Snp)"
					$sTemp[9]="Wrn(VSize/Snp)"
					$sTemp[10]="Lim(VSize/Snp)"  
					$sTemp[11]="Rsvd(MiB/Usr)"					
					$sTemp[12]="Used(MiB/Usr)"				
					$sTemp[13]="Used(VSize/Usr)"
					$sTemp[14]="Wrn(VSize/Usr)"
					$sTemp[15]="Lim(VSize/Usr)"
					$sTemp[16]="Rsvd(MiB/Total)"					
					$sTemp[17]="Used(MiB/Total)"
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
			}
			if($R)
			{			
				if($incre -eq "true")
				{					
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')	
					$sTemp[6]="RawRsvd(Snp)"					
					$sTemp[7]="Rsvd(Snp)"				
					$sTemp[8]="RawRsvd(Usr)"
					$sTemp[9]="Rsvd(Usr)"
					$sTemp[10]="RawRsvd(Tot)"  
					$sTemp[11]="Rsvd(Tot)"					
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
			}
			if($Zone)
			{
				if($incre -eq "true")
				{				
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')											
					$sTemp[7]="Zn(Adm)"				
					$sTemp[8]="Free_Zn(Adm)"
					$sTemp[9]="Zn(Snp)"	
					$sTemp[10]="Free_Zn(Snp)"
					$sTemp[11]="Zn(Usr)"		
					$sTemp[12]="Free_Zn(Usr)"					
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp				
				}
			}
			if($Alert)
			{
				if($incre -eq "true")
				{				
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')											
					$sTemp[7]="Used(Snp(%VSize))"				
					$sTemp[8]="Wrn(Snp(%VSize))"
					$sTemp[9]="Lim(Snp(%VSize))"	
					$sTemp[10]="Used(Usr(%VSize))"				
					$sTemp[11]="Wrn(Usr(%VSize))"
					$sTemp[12]="Lim(Usr(%VSize))"	
					$sTemp[13]="Fail(Adm)"	
					$sTemp[14]="Fail(Snp)"	
					$sTemp[15]="Wrn(Snp)"	
					$sTemp[16]="Lim(Snp)"	
					$sTemp[17]="Fail(Usr)"	
					$sTemp[18]="Wrn(Usr)"	
					$sTemp[19]="Lim(Usr)"					
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
			}
			if($AlertTime)
			{
				if($incre -eq "true")
				{				
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')											
					$sTemp[2]="Fail(Adm))"				
					$sTemp[3]="Fail(Snp)"
					$sTemp[4]="Wrn(Snp)"	
					$sTemp[5]="Lim(Snp)"				
					$sTemp[6]="Fail(Usr)"
					$sTemp[7]="Wrn(Usr)"	
					$sTemp[8]="Lim(Usr)"										
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
			}
			Add-Content -Path $tempFile -Value $s
			$incre="false"
		}
		Import-Csv $tempFile
		del $tempFile
	}	
	else
	{
		Write-DebugLog $result "INFO:"
		return "FAILURE : No vv $vvName found Error : $Result"
	}
	

} # END Get-3parVvList
# End

#######################################################################################################
## FUNCTION Get-3parSystem
########################################################################################################
Function Get-3parSystem
{
<#
  .SYNOPSIS
    Command displays the 3PAR Storage system information. 
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSystem) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-System) instead.
  
    Command displays the 3PAR Storage system information.
        
  .EXAMPLE
    Get-3parSystem 
	Command displays the 3PAR Storage system information.such as system name, model, serial number, and system capacity information.
	
  .EXAMPLE
    Get-3parSystem -SystemCapacity
	Lists 3PAR Storage system space information in MB(1024^2 bytes)

  .EXAMPLE	
	Get-3parSystem -DevType FC
  
  .PARAMETER Detailed
	Specifies that more detailed information about the system is displayed.

  .PARAMETER SystemParameters
	Specifies that the system parameters are displayed.

  .PARAMETER Fan
	Displays the system fan information.

  .PARAMETER SystemCapacity
	Displays the system capacity information in MiB.

  .PARAMETER vvSpace
	Displays the system capacity information in MiB with an emphasis on
	VVs.

  .PARAMETER Domainspace
	Displays the system capacity information broken down by domain in MiB.

  .PARAMETER Descriptor
	Displays the system descriptor properties.

  .PARAMETER DevType FC|NL|SSD
	Displays the system capacity information where the disks must have a
	device type string matching the specified device type; either Fast
	Class (FC), Nearline (NL), Solid State Drive (SSD). This option can
	only be issued with -space or -vvspace.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSystem
    LASTEDIT: 01/23/2017
    KEYWORDS: Get-3parSystem
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Detailed,

		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$SystemParameters,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Fan,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$SystemCapacity,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$vvSpace,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$DomainSpace,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$Descriptor,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$DevType,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection
       
	)
	
	Write-DebugLog "Start: In Get-3parSystem - validating input values" $Debug 

	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSystem since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSystem since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$sysinfocmd = "showsys "
	
	if($Detailed)
	{
		$sysinfocmd += " -d "		
	}
	if($SystemParameters)
	{
		$sysinfocmd += " -param "		
	}
	if($Fan)
	{
		$sysinfocmd += " -fan "		
	}
	if($SystemCapacity)
	{
		$sysinfocmd += " -space "		
	}
	if($vvSpace)
	{
		$sysinfocmd += " -vvspace "		
	}
	if($DomainSpace)
	{
		$sysinfocmd += " -domainspace "		
	}
	if($Descriptor)
	{
		$sysinfocmd += " -desc "		
	}
	if($DevType)
	{
		$sysinfocmd += " -devtype $DevType"		
	}
	write-debuglog "Get 3par system information " "INFO:" 
	write-debuglog "Get 3par system fan information cmd -> sysinfocmd " "INFO:"
	$Result3 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysinfocmd	
	if($Fan -or $DomainSpace -or $sysinfocmd -eq "showsys ")
	{
		$incre = "True"
		$FirstCnt = 1
		$rCount = $Result3.Count
		$noOfColumns = 0
		
		if($Fan)
		{
			$FirstCnt = 0
		}
		if($DomainSpace)
		{
			$rCount = $Result3.Count - 3
		}
		$tempFile = [IO.Path]::GetTempFileName()
		
		if ($Result3.Count -gt 1)
		{
			foreach ($s in  $Result3[$FirstCnt..$rCount] )
			{				
				$s= [regex]::Replace($s,"^ +","")
				if(!$DomainSpace)
				{
					$s= [regex]::Replace($s,"-","")
				}				
				$s= [regex]::Replace($s," +",",")

                if ($noOfColumns -eq 0)
                {
                    $noOfColumns = $s.Split(",").Count;
                }
                else
                {
                    $noOfValues = $s.Split(",").Count;

                    if ($noOfValues -ge $noOfColumns)
                    {
                        [System.Collections.ArrayList]$CharArray1 = $s.Split(",");
                        $CharArray1[2] = $CharArray1[2] + " " + $CharArray1[3];
                        $CharArray1.RemoveAt(3);
                        $s = $CharArray1 -join ',';
                    }
                }
							
				if($DomainSpace)
				{
					if($incre -eq "True")
					{						
						$sTemp = $s.Split(',')											
						$sTemp[1]="Used_Legacy(MiB)"				
						$sTemp[2]="Snp_Legacy(MiB)"
						$sTemp[3]="Base_Private(MiB)"				
						$sTemp[4]="Snp_Private(MiB)"
						$sTemp[5]="Shared_CPG(MiB)"				
						$sTemp[6]="Free_CPG(MiB)"
						$sTemp[7]="Unmapped(MiB)"	
						$sTemp[8]="Total(MiB)"
						$sTemp[9]="Compact_Efficiency"
						$sTemp[10]="Dedup_Efficiency"
						$sTemp[11]="Compress_Efficiency"
						$sTemp[12]="DataReduce_Efficiency"
						$sTemp[13]="Overprov_Efficiency"
						
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp							
					}
				}				
				
				Add-Content -Path $tempFile -Value $s				
				$incre = "False"
			}
			
			Import-Csv $tempFile			
			del $tempFile
		}
		else
		{
			del $tempFile
			write-host""
			return	$Result3			
		}
	}		
	else
	{
		write-host""
		return	$Result3	
	}
	
}
##### END Get-3parSystem #####
##### Start Get-3parSpace #####
Function Get-3parSpace
{
<#
  .SYNOPSIS
    Displays estimated free space for logical disk creation.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSpace) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Space) instead.
  
    Displays estimated free space for logical disk creation.
        
  .EXAMPLE
    Get-3parSpace 
	Displays estimated free space for logical disk creation.
	
  .EXAMPLE
    Get-3parSpace -RaidType r1
	 Example displays the estimated free space for a RAID-1 logical disk:
	 
  .PARAMETER cpgName
    Specifies that logical disk creation parameters are taken from CPGs that match the specified CPG
	name or pattern,Multiple CPG names or patterns can be specified using a comma separated list, for
	example cpg1,cpg2,cpg3.

  .PARAMETER RaidType
	Specifies the RAID type of the logical disk: r0 for RAID-0, r1 for RAID-1, r5 for RAID-5, or r6 for
	RAID-6. If no RAID type is specified, the default is r1 for FC and SSD device types and r6 is for
	the NL device types
	
  .PARAMETER Cage 
	Specifies one or more drive cages. Drive cages are identified by one or more integers (item).
	Multiple drive cages are separated with a single comma (1,2,3). A range of drive cages is
	separated with a hyphen (0–3). The specified drive cage(s) must contain disks.
	
  .PARAMETER Disk
	Specifies one or more disks. Disks are identified by one or more integers (item). Multiple disks
	are separated with a single comma (1,2,3). A range of disks is separated with a hyphen (0–3).
	Disks must match the specified ID(s).
	
  .PARAMETER History
	 Specifies that free space history over time for CPGs specified

  .PARAMETER SSZ
	Specifies the set size in terms of chunklets.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSpace
    LASTEDIT: 08/06/2015
    KEYWORDS: Get-3parSpace
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$cpgName,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$RaidType,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Cage,
		
		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Disk,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$History,
		
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$SSZ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)	
	Write-DebugLog "Start: In Get-3parSpace - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSpace since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSpace since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$sysspacecmd = "showspace "
	$sysinfo = @{}	
	if($cpgName)
	{		
		if(($RaidType) -or ($Cage) -or($Disk))
		{
			return "FAILURE : Use only One parameter at a time."
		}		
		$sysspacecmd += " -cpg $cpgName"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysspacecmd
		write-debuglog "Get 3par system space cmd -> $sysspacecmd " "INFO:"
		if ($Result -match "FAILURE :")
		{
			write-debuglog "no CPGs found or matched" "Info:"
			return "FAILURE : no CPGs found or matched"			
		}
		if( $Result -match "There is no free space information")
		{
			write-debuglog "FAILURE : There is no free space information" "Info:"
			return "FAILURE : There is no free space information"			
		}
		if( $Result.Count -lt 4 )
		{
			return "$Result"		
		}
		$tempFile = [IO.Path]::GetTempFileName()
		$3parosver = Get-3parVersion -number -SANConnection  $SANConnection 
		$incre = "true" 
		foreach ($s in  $Result[2..$Result.Count] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			
			if($3parosver -eq "3.1.1")
			{
				$s= $s.Trim() -replace 'Name,RawFree,LDFree,Total,Used,Total,Used,Total,Used','CPG_Name,EstFree_RawFree(MB),EstFree_LDFree(MB),Usr_Total(MB),Usr_Used(MB),Snp_Total(MB),Snp_Used(MB),Adm_Total(MB),Adm_Used(MB)'
			}
			if($3parosver -eq "3.1.2")
			{
				$s= $s.Trim() -replace 'Name,RawFree,LDFree,Total,Used,Total,Used,Total,Used','CPG_Name,EstFree_RawFree(MB),EstFree_LDFree(MB),Usr_Total(MB),Usr_Used(MB),Snp_Total(MB),Snp_Used(MB),Adm_Total(MB),Adm_Used(MB)' 
			}
			else
			{
				$s= $s.Trim() -replace 'Name,RawFree,LDFree,Total,Used,Total,Used,Total,Used,Compaction,Dedup','CPG_Name,EstFree_RawFree(MB),EstFree_LDFree(MB),Usr_Total(MB),Usr_Used(MB),Snp_Total(MB),Snp_Used(MB),Adm_Total(MB),Adm_Used(MB),Compaction,Dedup'
			}
			
			if($incre -eq "true")
			{				
				$sTemp = $s.Split(',')							
				$sTemp[1]="RawFree(MiB)"				
				$sTemp[2]="LDFree(MiB)"
				$sTemp[3]="OPFree(MiB)"				
				$sTemp[4]="Base(MiB)"
				$sTemp[5]="Snp(MiB)"				
				$sTemp[6]="Free(MiB)"
				$sTemp[7]="Total(MiB)"		
				
				$newTemp= [regex]::Replace($sTemp,"^ ","")			
				$newTemp= [regex]::Replace($sTemp," ",",")				
				$newTemp= $newTemp.Trim()
				$s=$newTemp							
			}			
			Add-Content -Path $tempFile -Value $s
			$incre="false"
		}		
		Import-Csv $tempFile
		del $tempFile
		return
	}		
	if($RaidType)
	{
		if(($cpgName) -or ($Cage) -or($Disk))
		{
			return "FAILURE : Use only One parameter at a time."
		}
		$RaidType = $RaidType.toLower()
		$sysspacecmd += " -t $RaidType"
		write-debuglog "Get 3par system space cmd -> $sysspacecmd " "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysspacecmd
		if ($Result -match "Illegal raid type")
		{
			write-debuglog "FAILURE : Illegal raid type $RaidType, specify r0, r1, r5, or r6" "Info:"
			return "FAILURE : Illegal raid type $RaidType, specify r0, r1, r5, or r6"
		}
		
		foreach ($s in $Result[2..$Result.count])
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")
			$s = $s.split(",")
			$sysinfo.add("RawFree(MB)",$s[0])
			$sysinfo.add("UsableFree(MB)",$s[1])
			$sysinfo
		}
		return
	}
	if($Cage)
	{
		if(($RaidType) -or ($cpgName) -or($Disk))
		{
			return "FAILURE : Use only One parameter at a time."
		}
		$sysspacecmd += " -p -cg $Cage"
		write-debuglog "Get 3par system space cmd -> $sysspacecmd " "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysspacecmd
		if ($Result -match "Illegal pattern integer or range")
		{
			write-debuglog "FAILURE : Illegal pattern integer or range: $Cage" "ERR:"
			return "FAILURE : $Result "
		}
		foreach ($s in $Result[2..$Result.count])
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")
			$s = $s.split(",")
			$sysinfo.add("RawFree(MB)",$s[0])
			$sysinfo.add("UsableFree(MB)",$s[1])
			$sysinfo
		}
		return
	}
	if($Disk)
	{
		if(($RaidType) -or ($Cage) -or($cpgName)){
			return "FAILURE : Use only One parameter at a time."
		}
		$sysspacecmd += "-p -dk $Disk"
		write-debuglog "Get 3par system space cmd -> $sysspacecmd " "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysspacecmd
		if ($Result -match "Illegal pattern integer or range")
		{
			write-debuglog "FAILURE : Illegal pattern integer or range: $Disk" "ERR:"
			return "FAILURE : Illegal pattern integer or range: $Disk"
		}
		foreach ($s in $Result[2..$Result.count])
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")
			$s = $s.split(",")
			$sysinfo.add("RawFree(MB)",$s[0])
			$sysinfo.add("UsableFree(MB)",$s[1])
			$sysinfo
		}
	}
	if($History)
	{
		if(($RaidType) -or ($Cage) -or($cpgName) -or($Disk))
		{
			return "FAILURE : Use only One parameter at a time."
		}
		$sysspacecmd += " -hist "
	}
	if($SSZ)
	{
		if(($RaidType) -or ($Cage) -or($cpgName) -or($Disk) -or($History))
		{
			return "FAILURE : Use only One parameter at a time."
		}
		$sysspacecmd += " -ssz $SSZ "
		write-debuglog "Get 3par system space cmd -> $sysspacecmd " "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysspacecmd
		if ($Result -match "Invalid setsize" -Or $Result -match "Expecting a non-negative integer")
		{
			write-debuglog "FAILURE : Illegal raid type $RaidType, specify r0, r1, r5, or r6" "Info:"
			return "FAILURE : $Result"
		}
		
		foreach ($s in $Result[2..$Result.count])
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")
			$s = $s.split(",")
			$sysinfo.add("RawFree(MB)",$s[0])
			$sysinfo.add("UsableFree(MB)",$s[1])
			$sysinfo
		}
		return
	}
	if(-not(( ($Disk) -or ($Cage)) -or (($RaidType) -or ($cpg))))
	{		
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysspacecmd
		write-debuglog "Get 3par system space cmd -> $sysspacecmd " "INFO:"
		if ($Result -match "Illegal pattern integer or range")
		{
			write-debuglog "FAILURE : Illegal pattern integer or range: $Disk" "ERR:"
			return "FAILURE : Illegal pattern integer or range: $Disk"
		}
		foreach ($s in $Result[2..$Result.count])
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")
			$s = $s.split(",")
			$sysinfo.add("RawFree(MB)",$s[0])
			$sysinfo.add("UsableFree(MB)",$s[1])
			$sysinfo
		}
	}
}
#### End Get-3parSpace #####

#### Spare commandlets ##########

#### Start New-3parSpare #####
Function New-3parSpare
{
<#
  .SYNOPSIS
    Allocates chunklet resources as spares. Chunklets marked as spare are not used 
	for logical disk creation and are reserved explicitly for spares, thereby 
	guaranteeing a minimum amount of spare space.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parSpare) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Spare) instead.
  
    Allocates chunklet resources as spares. Chunklets marked as spare are not used 
	for logical disk creation and are reserved explicitly for spares, thereby 
	guaranteeing a minimum amount of spare space. 
        
  .EXAMPLE
    New-3parSpare -Pdid_chunkNumber "15:1"
	This example marks chunklet 1 as spare for physical disk 15
	
  .EXAMPLE
	New-3parSpare –pos "1:0.2:3:121"
	This example specifies the position in a drive cage, drive magazine, physical disk,and chunklet number. –pos 1:0.2:3:121, where 1 is the drive cage, 0.2 is the drive magazine, 3 is the physical disk, and 121 is the chunklet number.
 	
  .PARAMETER Pdid_chunkNumber
    Specifies the identification of the physical disk and the chunklet number on the disk.
	
  .PARAMETER pos
    Specifies the position of a specific chunklet identified by its position in a drive cage, drive magazine, physical disk, and chunklet number.
  
  .PARAMETER Partial
   Specifies that partial completion of the command is acceptable.
        
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parSpare
    LASTEDIT: 08/06/2015
    KEYWORDS: New-3parSpare
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Pdid_chunkNumber,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$pos,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Partial,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In New-3parSpare - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parSpare since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parSpare since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$newsparecmd = "createspare "
	if($Partial)
	{
		$newsparecmd +=" -p "
	}
	if(!(($pos) -or ($Pdid_chunkNumber)))
	{
		return "FAILURE : Please specify any one of the params , specify either -PDID_chunknumber or -pos"
	}
	if($Pdid_chunkNumber)
	{
		$newsparecmd += " -f $Pdid_chunkNumber"
		if($pos)
		{
			return "FAILURE : Do not specify both the params , specify either -PDID_chunknumber or -pos"
		}
	}
	if($pos)
	{
		$newsparecmd += " -f -pos $pos"
		if($Pdid_chunkNumber)
		{
			return "FAILURE : Do not specify both the params , specify either -PDID_chunknumber or -pos"
		}
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $newsparecmd
	write-debuglog "3par spare  cmd -> $newsparecmd " "INFO:"
	#write-host "Result = $Result"
	if(-not $Result)
	{
		write-host "Success : Create spare chunklet "
	}
	else
	{
		return "$Result"
	}
}
#### End New-3parSpare ####
#### Start Remove-3parSpare #####
Function Remove-3parSpare
{
<#
  .SYNOPSIS
    Command removes chunklets from the spare chunklet list.
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parSpare) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Spare) instead.
  
    Command removes chunklets from the spare chunklet list.
	
  .EXAMPLE
    Remove-3parSpare -Pdid_chunkNumber "1:3"
	Example removes a spare chunklet from position 3 on physical disk 1:
	
  .EXAMPLE
	Remove-3parSpare –pos "1:0.2:3:121"
	Example removes a spare chuklet from  the position in a drive cage, drive magazine, physical disk,and chunklet number. –pos 1:0.2:3:121, where 1 is the drive cage, 0.2 is the drive magazine, 3 is the physical disk, and 121 is the chunklet number. 	
	
  .PARAMETER Pdid_chunkNumber
    Specifies the identification of the physical disk and the chunklet number on the disk.
	
  .PARAMETER pos
    Specifies the position of a specific chunklet identified by its position in a drive cage, drive magazine, physical disk, and chunklet number.
 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parSpare
    LASTEDIT: 08/06/2015
    KEYWORDS: Remove-3parSpare
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Pdid_chunkNumber,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$pos,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Remove-3parSpare - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parSpare since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parSpare since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$newsparecmd = "removespare "
	if(!(($Pdid_chunkNumber) -or ($pos)))
	{
		return "FAILURE: No parameters specified"
	}
	if($Pdid_chunkNumber)
	{
		$newsparecmd += " -f $Pdid_chunkNumber"
		if($pos)
		{
			return "FAILURE: Please select only one params, either -Pdid_chunkNumber or -pos "
		}
	}
	if($pos)
	{
		$newsparecmd += " -f -pos $pos"
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $newsparecmd
	write-debuglog "Remove spare command -> newsparecmd " "INFO:"
	#write-host "Result = $Result"
	if($Result -match "removed")
	{
		write-debuglog "Success : Removed spare chunklet "  "INFO:"
		return "Success : $Result"
	}
	else
	{
		return "$Result"
	}
}
#### End Remove-3parSpare ####

#### Start Push-3parChunklet ####
Function Push-3parChunklet
{
<#
  .SYNOPSIS
   Moves a list of chunklets from one physical disk to another.
  
  .DESCRIPTION
   Note : This cmdlet (push-3parchunklet) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Move-Chunklet) instead.
  
   Moves a list of chunklets from one physical disk to another.
        
  .EXAMPLE
    Push-3parChunklet -SourcePD_Id 24 -SourceChunk_Position 0  -TargetPD_Id	64 -TargetChunk_Position 50 
	This example moves the chunklet in position 0 on disk 24, to position 50 on 
	disk 64 and chunklet in position 0 on disk 25, to position 1 on disk 27
	
  .PARAMETER SourcePD_Id
    Specifies that the chunklet located at the specified PD
	
  .PARAMETER SourceChunk_Position
    Specifies that the the chunklet’s position on that disk
	
  .PARAMETER TargetPD_Id	
	specified target destination disk
	
  .PARAMETER TargetChunk_Position	
	Specify target chunklet position
	
  .PARAMETER nowait
   Specifies that the command returns before the operation is completed.
   
  .PARAMETER Devtype
	Permits the moves to happen to different device types.

  .PARAMETER Perm
	Specifies that chunklets are permanently moved and the chunklets'
	original locations are not remembered.
		
  .PARAMETER Ovrd
	Permits the moves to happen to a destination even when there will be
	a loss of quality because of the move. 
	
  .PARAMETER DryRun
	Specifies that the operation is a dry run
   
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parChunklet
    LASTEDIT: 08/06/2015
    KEYWORDS: Push-3parChunklet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$SourcePD_Id,
		
		[Parameter(Position=1, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$SourceChunk_Position,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$TargetPD_Id,
		
		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$TargetChunk_Position,
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$DryRun,
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$NoWait,
		
		[Parameter(Position=7, Mandatory=$false)]
		[Switch]
		$Devtype,
		
		[Parameter(Position=8, Mandatory=$false)]
		[Switch]
		$Perm,
		
		[Parameter(Position=9, Mandatory=$false)]
		[Switch]
		$Ovrd,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Push-3parChunklet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parChunklet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parChunklet since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$movechcmd = "movech -f"
		
	if($DryRun)
	{
		$movechcmd += " -dr "
	}
	if($NoWait)
	{
		$movechcmd += " -nowait "
	}
	if($Devtype)
	{
		$movechcmd += " -devtype "
	}
	if($Perm)
	{
		$movechcmd += " -perm "
	}
	if($Ovrd)
	{
		$movechcmd += " -ovrd "
	}
	if(($SourcePD_Id)-and ($SourceChunk_Position))
	{
		$params = $SourcePD_Id+":"+$SourceChunk_Position
		$movechcmd += " $params"
		if(($TargetPD_Id) -and ($TargetChunk_Position))
		{
			$movechcmd += "-"+$TargetPD_Id+":"+$TargetChunk_Position
		}
	}
	else
	{
		return "FAILURE :  No parameters specified "
	}
	
	write-debuglog "move chunklet cmd -> $movechcmd " "INFO:"	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $movechcmd	
	if([string]::IsNullOrEmpty($Result))
	{
		return "FAILURE : Disk $SourcePD_Id chunklet $SourceChunk_Position is not in use. "
	}
	if($Result -match "Move")
	{
		$range = $Result.count
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{			
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			$s= $s.Trim() -replace 'Move,-State-,-Detailed_State-','Move,State,Detailed_State'			
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
}
#### End Push-3parChunklet ######
#### Start Push-3parChunkletToSpare ####
Function Push-3parChunkletToSpare
{
<#
  .SYNOPSIS
   Moves data from specified Physical Disks (PDs) to a temporary location selected by the system
  
  .DESCRIPTION
   Note : This cmdlet (Push-3parChunkletToSpare) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Move-ChunkletToSpare) instead.
  
   Moves data from specified Physical Disks (PDs) to a temporary location selected by the system
        
  .EXAMPLE
    Push-3parChunkletToSpare -SourcePD_Id 66 -SourceChunk_Position 0  -force 
	Examples shows chunklet 0 from physical disk 66 is moved to spare

  .EXAMPLE	
	Push-3parChunkletToSpare -SourcePD_Id 3 -SourceChunk_Position 0

  .EXAMPLE	
	Push-3parChunkletToSpare -SourcePD_Id 4 -SourceChunk_Position 0 -nowait
	
  .EXAMPLE
    Push-3parChunkletToSpare -SourcePD_Id 5 -SourceChunk_Position 0 -Devtype
	
  .PARAMETER SourcePD_Id
    Indicates that the move takes place from the specified PD
	
  .PARAMETER SourceChunk_Position
    Indicates that the move takes place from  chunklet position
	
  .PARAMETER force
    Specifies that the command is forced. If this option is not used,it will do dry run,No chunklets are actually moved.
	
  .PARAMETER nowait
   Specifies that the command returns before the operation is completed.
   
   .PARAMETER Devtype
	Permits the moves to happen to different device types.
	
  .PARAMETER DryRun
	Specifies that the operation is a dry run
   
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parChunkletToSpare
    LASTEDIT: 08/11/2015
    KEYWORDS: Push-3parChunkletToSpare
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$SourcePD_Id,
		
		[Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$SourceChunk_Position,

		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$DryRun,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$nowait,
		
		[Parameter(Position=4, Mandatory=$false)]
		[Switch]
		$Devtype,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Push-3parChunkletToSpare - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parChunkletToSpare since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parChunkletToSpare since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$movechcmd = "movechtospare -f"
	if($DryRun)
	{
		$movechcmd += " -dr "
	}
	
	if($nowait)
	{
		$movechcmd += " -nowait "
	}
	if($Devtype)
	{
		$movechcmd += " -devtype "
	}
	if(($SourcePD_Id) -and ($SourceChunk_Position)){
		$params = $SourcePD_Id+":"+$SourceChunk_Position
		$movechcmd += " $params"
	}
	else
	{
		return "FAILURE : No parameters specified"
	}
	#write-host "cmd = $movechcmd"
	write-debuglog "cmd is -> $movechcmd " "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $movechcmd
	#write-host "=========== = $Result"
	if([string]::IsNullOrEmpty($Result))
	{
		#write-host "IF = $Result"
		return "FAILURE : "
	}
	elseif($Result -match "does not exist")
	{
		#write-host "ELSEIF = $Result"
		return $Result
	}
	elseif($Result.count -gt 1)
	{
		#write-host "ELSE = $Result"
		$range = $Result.count
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{
			#write-host "s = $s"
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			$s= $s.Trim() -replace 'Move,-State-,-Detailed_State-','Move,State,Detailed_State'
			#write-host "s = $s"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
}
#### End Push-3parChunkletToSpare #####
#### Start Push-3parPd ####
Function Push-3parPd
{
<#
  .SYNOPSIS
   Moves data from specified Physical Disks (PDs) to a temporary location selected by the system
  
  .DESCRIPTION
   Note : This cmdlet (Push-3parPD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Move-PD) instead.
  
   Moves data from specified Physical Disks (PDs) to a temporary location selected by the system
        
  .EXAMPLE
    Push-3parPd -PD_Id 0 -force
	Example shows moves data from Physical Disks 0  to a temporary location
	
  .EXAMPLE	
	Push-3parPd -PD_Id 0  
	Example displays a dry run of moving the data on physical disk 0 to free or sparespace
	
  .PARAMETER PD_Id
    Specifies the physical disk ID. This specifier can be repeated to move multiple physical disks.

  .PARAMETER force
    Specifies that the command is forced. If this option is not used,it will do dry run,No chunklets are actually moved.
	
  .PARAMETER DryRun
	Specifies that the operation is a dry run, and no physical disks are
	actually moved.

  .PARAMETER Nowait
	Specifies that the command returns before the operation is completed.

  .PARAMETER Devtype
	Permits the moves to happen to different device types.

  .PARAMETER Perm
	Makes the moves permanent, removes source tags after relocation
   
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parPd
    LASTEDIT: 08/11/2015
    KEYWORDS: Push-3parPd
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$DryRun,
				
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$nowait,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$Devtype,
		
		[Parameter(Position=4, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$PD_Id,		
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Push-3parPd - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parPd since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parPd since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$movechcmd = "movepd -f"
	
	if($DryRun)
	{
		$movechcmd += " -dr "
	}
	if($nowait)
	{
		$movechcmd += " -nowait "
	}
	if($Devtype)
	{
		$movechcmd += " -devtype "
	}
	if($PD_Id)
	{
		$params = $PD_Id
		$movechcmd += " $params"
	}
	else
	{
		return "FAILURE : No parameters specified"		
	}
	write-debuglog "Push physical disk command => $movechcmd " "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $movechcmd
	#write-host ""
	#return $Result
	#write-host "Result = $Result"
	if([string]::IsNullOrEmpty($Result))
	{
		return "FAILURE : $Result"
	}
	if($Result -match "FAILURE")
	{
		return $Result
	}
	if($Result -match "-Detailed_State-")
	{		
		$range = $Result.count
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{			
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			
			$s= $s.Trim() -replace 'Move,-State-,-Detailed_State-','Move,State,Detailed_State'
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{		
		return $Result
	}
}
#### End Push-3parPd ####
#### Start Push-3parPdToSpare ####
Function Push-3parPdToSpare
{
<#
  .SYNOPSIS
   Moves data from specified Physical Disks (PDs) to a temporary location selected by the system.
  
  .DESCRIPTION
   Note : This cmdlet (Push-3parPDToSpare) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Move-PDToSpare) instead.
  
   Moves data from specified Physical Disks (PDs) to a temporary location selected by the system.
        
  .EXAMPLE
    Push-3parPdToSpare -PD_Id 0 -force  
	Displays  moving the data on PD 0 to free or spare space
	
  .EXAMPLE
    Push-3parPdToSpare -PD_Id 0 
	Displays a dry run of moving the data on PD 0 to free or spare space

  .EXAMPLE
    Push-3parPdToSpare -PD_Id 0 -DryRun
	
  .EXAMPLE
    Push-3parPdToSpare -PD_Id 0 -Vacate
	
  .EXAMPLE
    Push-3parPdToSpare -PD_Id 0 -Permanent
	
  .PARAMETER PD_Id
    Specifies the physical disk ID.

  .PARAMETER force
    Specifies that the command is forced. If this option is not used,it will do dry run,No chunklets are actually moved.
	
  .PARAMETER nowait
   Specifies that the command returns before the operation is completed.
   
   .PARAMETER Devtype
	Permits the moves to happen to different device types.

   .PARAMETER DryRun	
	Specifies that the operation is a dry run. No physical disks are actually moved.

   .PARAMETER Vacate
    Deprecated, use -perm instead.
	
   .PARAMETER Permanent
	 Makes the moves permanent, removes source tags after relocation.

   .PARAMETER Ovrd
	Permits the moves to happen to a destination even when there will be
	a loss of quality because of the move. This option is only necessary
	when the target of the move is not specified and the -perm flag is
	used.
	 
   .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
   .Notes
    NAME:  Push-3parPdToSpare
    LASTEDIT: 08/11/2015
    KEYWORDS: Push-3parPdToSpare
   
   .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$PD_Id,
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$DryRun,
		
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$nowait,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$DevType,
		
		[Parameter(Position=4, Mandatory=$false)]
		[Switch]
		$Vacate,
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$Permanent, 
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Ovrd,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Push-3parPdToSpare - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parPdToSpare since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parPdToSpare since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	
	$movechcmd = "movepdtospare -f"
	
	if($DryRun)
	{
		$movechcmd += " -dr "
	}	
	if($nowait)
	{
		$movechcmd += " -nowait "
	}
	if($DevType)
	{
		$movechcmd += " -devtype "
	}
	if($Vacate)
	{
		$movechcmd += " -vacate "
	}
	if($Permanent)
	{
		$movechcmd += " -perm "
	}
	if($Ovrd)
	{
		$movechcmd += " -ovrd "
	}
	if($PD_Id)
	{
		$params = $PD_Id
		$movechcmd += " $params"
	}
	else
	{
		return "FAILURE : No parameters specified"		
	}
	
	write-debuglog "push physical disk to spare cmd is  => $movechcmd " "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $movechcmd
	if([string]::IsNullOrEmpty($Result))
	{
		return "FAILURE : "
	}
	if($Result -match "Error:")
	{
		return $Result
	}
	if($Result -match "Move")
	{
		$range = $Result.count
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{
			#write-host "s = $s"
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			$s= $s.Trim() -replace 'Move,-State-,-Detailed_State-','Move,State,Detailed_State'
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
}
#### End Push-3parPdToSpare ####
#### Start Push-3parRelocPD ####
Function Push-3parRelocPD
{
<#
  .SYNOPSIS
   Command moves chunklets that were on a physical disk to the target of relocation.
  
  .DESCRIPTION
   Note : This cmdlet (Push-3parRelocPD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Move-RelocPD) instead.
  
   Command moves chunklets that were on a physical disk to the target of relocation.
        
  .EXAMPLE
    Push-3parRelocPD -diskID 8 -DryRun
	moves chunklets that were on physical disk 8 that were relocated to another position, back to physical disk 8
	
  .PARAMETER diskID    
	Specifies that the chunklets that were relocated from specified disk (<fd>), are moved to the 
	specified destination disk (<td>). If destination disk (<td>) is not specified then the chunklets are moved back
    to original disk (<fd>). The <fd> specifier is not needed if -p option is used, otherwise it 
	must be used at least once on the command line. If this specifier is repeated then the 
	operation is performed on multiple disks.

  .PARAMETER DryRun	
	Specifies that the operation is a dry run. No physical disks are actually moved.  
	
  .PARAMETER nowait
   Specifies that the command returns before the operation is completed.
   
  .PARAMETER partial
    Move as many chunklets as possible. If this option is not specified, the command fails if not all specified chunklets can be moved.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Push-3parRelocPD
    LASTEDIT: 08/11/2015
    KEYWORDS: Push-3parRelocPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$diskID,
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$DryRun,
		
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$nowait,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$partial,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Push-3parRelocPD - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Push-3parRelocPD since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Push-3parRelocPD since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$movechcmd = "moverelocpd -f "
	if($DryRun)
	{
		$movechcmd += " -dr "
	}	
	if($nowait)
	{
		$movechcmd += " -nowait "
	}
	if($partial)
	{
		$movechcmd += " -partial "
	}
	if($diskID)
	{
		$movechcmd += " $diskID"
	}
	else
	{
		return "FAILURE : No parameters specified"		
	}
	#write-host "cmd = $movechcmd"
	write-debuglog "move relocation pd cmd is => $movechcmd " "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $movechcmd
	if([string]::IsNullOrEmpty($Result))
	{
		return "FAILURE : "
	}
	if($Result -match "Error:")
	{
		return $Result
	}	
	if($Result -match "There are no chunklets to move")
	{
		return "There are no chunklets to move"
	}	
	if($Result -match " Move -State- -Detailed_State-")
	{
		$range = $Result.count
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{			
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			$s= $s.Trim() -replace 'Move,-State-,-Detailed_State-','Move,State,Detailed_State'
			Add-Content -Path $tempFile -Value $s			
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
}
#### End Push-3parRelocPD ####

#### Start Get-3parSpare  ####
Function Get-3parSpare
{
<#
  .SYNOPSIS
    Displays information about chunklets in the system that are reserved for spares
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSpare) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Spare) instead.
  
    Displays information about chunklets in the system that are reserved for 
	spares and previously free chunklets selected for spares by the system. 
        
  .EXAMPLE
    Get-3parSpare 
	Displays information about chunklets in the system that are reserved for spares
 	
  .PARAMETER used 
    Display only used spare chunklets
	
  .PARAMETER count
	Number of loop iteration
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSpare
    LASTEDIT: 08/06/2015
    KEYWORDS: Get-3parSpare
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$used,
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$count,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSpare - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSpare since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSpare since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$spareinfocmd = "showspare "
	if($used)
	{
		$spareinfocmd+= " -used "
	}
	write-debuglog "Get list of spare information cmd is => $spareinfocmd " "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $spareinfocmd
	$tempFile = [IO.Path]::GetTempFileName()
	$range1 = $Result.count - 3 
	$range = $Result.count	
	if($count)
	{		
		foreach ($s in  $Result[0..$range] )
		{
			if ($s -match "Total chunklets")
			{
				del $tempFile
				return $s
			}
		}
	}	
	if($Result.count -eq 3)
	{
		del $tempFile
		return "No data available"			
	}	
	foreach ($s in  $Result[0..$range1] )
	{
		if (-not $s)
		{
			write-host "No data available"
			write-debuglog "No data available" "INFO:"\
			del $tempFile
			return
		}
		$s= [regex]::Replace($s,"^ +","")
		$s= [regex]::Replace($s," +"," ")
		$s= [regex]::Replace($s," ",",")
		#write-host "s is $s="
		Add-Content -Path $tempFile -Value $s
	}
	Import-Csv $tempFile
	del $tempFile
}
#### End Get-3parSpare ####

#### Start System Reporter commandlets ####

#### Start Get-3parSR ####
Function Get-3parSR
{
<#
  .SYNOPSIS
    Displays the amount of space consumed by the various System Reporter databases on the System Reporter volume.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSR) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SR) instead.
  
    Displays the amount of space consumed by the various System Reporter 
	databases on the System Reporter volume.
        
  .EXAMPLE
    Get-3parSR 
	shows how to display the System Reporter status:
	
  .EXAMPLE
    Get-3parSR -Btsecs 10

  .PARAMETER ldrg
	Displays which LD region statistic samples are available.  This is used
	with the -btsecs and -etsecs options.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is
	specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSR
    LASTEDIT: 20/09/2017
    KEYWORDS: Get-3parSR
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$ldrg,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSR - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSR since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSR since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "showsr "
	
	if($ldrg)
	{
		$srinfocmd += "-ldrg "
	}
	if($Btsecs)
	{
		$srinfocmd += "-btsecs $Btsecs "
	}
	if($Etsecs)
	{
		$srinfocmd += "-etsecs $Etsecs "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
	write-host ""
	return  $Result	
}
#### end Get-3parSR ####

#### Start Start-3parSR ####
Function Start-3parSR
{
<#
  .SYNOPSIS
    To start 3par System reporter.
  
  .DESCRIPTION
    Note : This cmdlet (Start-3parSR) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-SR) instead.
  
    To start 3par System reporter.
        
  .EXAMPLE
    Start-3parSR 
	Starts 3par System Reporter
 	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Start-3parSR
    LASTEDIT: 08/11/2015
    KEYWORDS: Start-3parSR
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(

		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Start-3parSR - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Start-3parSR since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Start-3parSR since SAN connection object values are null/empty"
			}
		}
	}

	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "startsr -f "
	write-debuglog "System reporter command => $srinfocmd" "INFO:"
	$3parosver = Get-3parVersion -number -SANConnection  $SANConnection 
	if($3parosver -ge "3.1.2")
	{
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if(-not $Result)
		{
			return "Success: Started 3par System Reporter $Result"
		}
		elseif($Result -match "Cannot startsr, already started")
		{
			Return "Command Execute Successfully :- Cannot startsr, already started"
		}
		else
		{
			return $Result
		}		
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Start-3parSR ####
#### Start Stop-3parSR ####
Function Stop-3parSR
{
<#
  .SYNOPSIS
    To stop 3par System reporter.
  
  .DESCRIPTION
    Note : This cmdlet (Stop-3parSR) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Stop-SR) instead.
  
    To stop 3par System reporter.
        
  .EXAMPLE
    Stop-3parSR 
	Stop 3par System Reporter
 	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Stop-3parSR
    LASTEDIT: 08/11/2015
    KEYWORDS: Stop-3parSR
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(

		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Stop-3parSR - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Stop-3parSR since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Stop-3parSR since SAN connection object values are null/empty"
			}
		}
	}

	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "stopsr -f "
	$3parosver = Get-3parVersion -number -SANConnection  $SANConnection
	write-debuglog "System reporter command => $srinfocmd" "INFO:"
	if($3parosver -ge "3.1.2")
	{
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if(-not $Result)
		{
			return "Success: Stopped 3par System Reporter $Result"
		}
		else
		{
			return $Result
		}
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Stop-3parSR ####
#### Start New-3parSRAlertCrit ####
Function New-3parSRAlertCrit
{
<#
  .SYNOPSIS
    Creates a criterion that System Reporter evaluates to determine if a performance alert should be generated.
  
  .DESCRIPTION
    Note : This cmdlet (New-3parSRAlertCrit) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-SRAlertCrit) instead.
  
    Creates a criterion that System Reporter evaluates to determine if a performance alert should be generated.
        
  .EXAMPLE
    New-3parSRAlertCrit -Type port  -Condition "write_iops>50" -Name write_port_check
	Example describes a criterion that generates an alert for each port that has more 
	than 50 write IOPS in a high resolution sample:
	
  .EXAMPLE
    New-3parSRAlertCrit -Type port  -PortType disk -Condition "write_iops>50" -Name write_port_check   

  .PARAMETER Type
	Type must be one of the following: port, vlun, pd, ld, cmp, cpu, link, qos,
	rcopy, rcvv, ldspace, pdspace, cpgspace, vvspace, sysspace.

  .PARAMETER Condition
	The condition must be of the format <field><comparison><value>
	where field is one of the fields corresponding to the type (see above),
	comparison is of the format <,<=,>,>=,=,!= and value is a numeric value,
	or is a numeric value followed by %_average to indicate that the field
	is to be compared against the average across multiple objects as
	as specified by filtering options and/or across multiple data sample
	times as specified by the -btsecs option. See examples.
	Note that some characters, such as < and >, are significant in most
	shells and must be escaped or quoted when running this command from
	another shell. Multiple conditions may be separated by comma (",") to
	indicate a logical AND requirement (conjunction). Conditions may be
	separated by the character "~" to indicate a logical OR requirement
	(disjunction). AND logic takes precedence over OR logic, and
	parentheses are not supported to override the natural precedence
	of the condition terms and logical operators.

  .PARAMETER Name
	Specifies the name of the SR alert criterion, with a maximum of 31
	characters.
	
  .PARAMETER Daily
	This criterion will be evaluated on a daily basis at midnight.

  .PARAMETER Hourly
	This criterion will be evaluated on an hourly basis.

  .PARAMETER Hires
	This criterion will be evaluated on a high resolution (5 minute) basis.
	This is the default.

  .PARAMETER Count 
	The number of matching objects that must meet the criteria in order for
	the alert to be generated. Note that only one alert is generated in this
	case and not one alert per affected object.

  .PARAMETER Recurrences 
	The alert will only be generated if the other conditions of the
	criterion recur repeatedly. <recurrences> is an integer value from
	2 to 10, and <samples> is an integer from 2 to 10 representing the
	number of previous System Reporter samples in which the recurrences
	will be examined. <samples> must be at least the requested quantity of
	recurrences. Note that these samples refer to the selected resolution
	of the criterion: hires, hourly, or daily.

  .PARAMETER Btsecs 
	A negative number indicating the number of seconds before the data
	sample time used to evaluate conditions which compare against an
	average. Instead of a number representing seconds, btsecs can be
	specified with a suffix of m, h or d to represent time in minutes
	(e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d). The relative time
	cannot be more than 10 samples ago: 50 minutes for hires, 10 hours
	for hourly, or 10 days for daily. If this option is not present the
	average is only computed for the most recent data sample. The
	-btsecs option may not be combined with the -recur option.

  .PARAMETER Critical
	This alert has the highest severity.

  .PARAMETER Major
	This alert should require urgent action.

  .PARAMETER Minor
	This alert should not require immediate action.

  .PARAMETER Info
	This alert is informational only. This is the default.

  .PARAMETER Comment 
	Specifies comments or additional information for the criterion. The
	comment can be up to 511 characters long.
		
  .PARAMETER PortType 
	Limit the data to port of the types specified. Allowed types are
	disk  -  Disk port
	host  -  Host Fibre channel port
	iscsi -  Host ISCSI port
	free  -  Unused port
	fs    -  File Persona port
	peer  -  Data Migration FC port
	rcip  -  Remote copy IP port
	rcfc  -  Remote copy FC port

  .PARAMETER Port 
	Ports with <port_n>:<port_s>:<port_p> that match any of the specified
	<npat>:<spat>:<ppat> patterns are included, where each of the patterns
	is a glob-style pattern. If not specified, all ports are included.

  .PARAMETER Both 
	Specifies that both control and data transfers are displayed(-both),
	only control transfers are displayed (-ctl), or only data transfers are
	displayed (-data). If this option is not specified, only data transfers
	are displayed.
		
  .PARAMETER CTL
	Specifies that both control and data transfers are displayed(-both),
	only control transfers are displayed (-ctl), or only data transfers are
	displayed (-data). If this option is not specified, only data transfers
	are displayed.
		
  .PARAMETER Data
	Specifies that both control and data transfers are displayed(-both),
	only control transfers are displayed (-ctl), or only data transfers are
	displayed (-data). If this option is not specified, only data transfers
	are displayed.
		
  .PARAMETER Host
	Limit the data to hosts with names that match one or more of the
	specified names or glob-style patterns. Host set name must start with
	"set:" and can also include patterns. To specify the host by WWN,
	start with "wwn:". A WWN can also include glob-style patterns.

  .PARAMETER VV 
	Limit the data to VVs with names that match one or more of the
	specified names or glob-style patterns. VV set name must be prefixed
	by "set:" and can also include patterns.

  .PARAMETER vLun 
	Limit the data to VLUNs matching the specified combination of host, VV,
	lun, and port. Each of these components in this option may be a
	glob-style pattern. The host and VV components may specify a
	corresponding object set by prefixing "set:" to the component. The
	host component may specify a WWN by prefixing the component with
	"wwn:". The lun and port components are optional, and if not present,
	data will be filtered to any matching combination of host and VV.
	This option cannot be combined with -host, -vv, -l, or -port.

  .PARAMETER CPG 
	Limit the data to LDs in CPGs with names that match one or more of the
	specified names or glob-style patterns.
		
  .PARAMETER DiskType 
	Limit the data to disks of the types specified. Allowed types are
	FC  - Fast Class
	NL  - Nearline
	SSD - Solid State Drive
			
  .PARAMETER RPM 
	Limit the data to disks of the specified RPM. Allowed speeds are
	7, 10, 15, 100 and 150
		
  .PARAMETER Target 
	Limit the data to TARGET_NAMEs that match one or more of the specified
	TARGET_NAMEs or glob-style patterns.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .PARAMETER Duration
	Once an alert is generated, the deferral period prevents the same
	alert from being repeated for a period of time. The deferral duration
	can be specified in seconds or with a suffix of m, h or d to represent
	time in minutes (e.g. 30m), hours (e.g. 1.5h), or days (e.g. 7d).
	Note that a single alert criteria can generate multiple alerts if
	multiple objects exceed the defined threshold. A deferral period
	applies to each unique alert. Acknowledging an alert with
	"setalert ack <id>" will end its deferral period early.
	
  .Notes
    NAME:  New-3parSRAlertCrit
    LASTEDIT: 08/17/2015
    KEYWORDS: New-3parSRAlertCrit
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(

		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $Type ,
		
		[Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $Condition ,
		
		[Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $Name ,
		
		[Parameter(Position=3, ValueFromPipeline=$true)]
		[switch]
        $Daily , 
		
		[Parameter(Position=4, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=5, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, ValueFromPipeline=$true)]
		[System.String]
        $Count ,
		
		[Parameter(Position=7, ValueFromPipeline=$true)]
		[System.String]
        $Recurrences ,
		
		[Parameter(Position=8, ValueFromPipeline=$true)]
		[System.String]
        $Btsecs ,
		
		[Parameter(Position=9, ValueFromPipeline=$true)]
		[switch]
        $Critical ,
		
		[Parameter(Position=10, ValueFromPipeline=$true)]
		[switch]
        $Major ,
		
		[Parameter(Position=11, ValueFromPipeline=$true)]
		[switch]
        $Minor ,
		
		[Parameter(Position=12, ValueFromPipeline=$true)]
		[switch]
        $Info ,
		
		[Parameter(Position=13, ValueFromPipeline=$true)]
		[System.String]
        $Comment ,
		
		[Parameter(Position=14, ValueFromPipeline=$true)]
		[System.String]
        $PortType ,
		
		[Parameter(Position=15, ValueFromPipeline=$true)]
		[System.String]
        $PortNSP ,
		
		[Parameter(Position=16, ValueFromPipeline=$true)]
		[switch]
        $Both ,
		
		[Parameter(Position=17, ValueFromPipeline=$true)]
		[switch]
        $CTL ,
		
		[Parameter(Position=18, ValueFromPipeline=$true)]
		[switch]
        $Data ,
		
		[Parameter(Position=19, ValueFromPipeline=$true)]
		[System.String]
        $Host ,
		
		[Parameter(Position=20, ValueFromPipeline=$true)]
		[System.String]
        $VV ,
		
		[Parameter(Position=21, ValueFromPipeline=$true)]
		[System.String]
        $vLun ,
		
		[Parameter(Position=22, ValueFromPipeline=$true)]
		[System.String]
        $Node ,
		
		[Parameter(Position=23, ValueFromPipeline=$true)]
		[System.String]
        $CPG ,
		
		[Parameter(Position=24, ValueFromPipeline=$true)]
		[System.String]
        $DiskType ,
		
		[Parameter(Position=25, ValueFromPipeline=$true)]
		[System.String]
        $RPM ,
		
		[Parameter(Position=26, ValueFromPipeline=$true)]
		[System.String]
        $Target ,
		
		[Parameter(Position=27, ValueFromPipeline=$true)]
		[System.String]
        $Duration ,
		
		[Parameter(Position=28, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In New-3parSRAlertCrit - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parSRAlertCrit since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parSRAlertCrit since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$version1 = Get-3parVersion -number  -SANConnection $SANConnection
	if( $version1 -lt "3.2.1")
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
	
	$srinfocmd = "createsralertcrit "	
	
	if($Type)
	{
		$typearray = "port","vlun","pd","ld","cmp","cpu","link","qos","rcopy","rcvv"
		if($typearray -match $Type)
		{
			$srinfocmd += " $Type "
		}
		else
		{
			return "FAILURE : Type should be in [ port | vlun | pd | ld | cmp | cpu | link | qos | rcopy | rcvv ]"
		}
	}
	else
	{
		return "Invalid type or type is missing."
	}
	if($Daily)
	{
		$srinfocmd += " -daily "
	}
	if($Hourly)
	{
		$srinfocmd += " -hourly "
	}
	if($Hires)
	{
		$srinfocmd += " -hires "
	}
	if($Count)
	{
		$srinfocmd += " -count $Count "
	}
	if($Recurrences)
	{
		$srinfocmd += " -recur $Recurrences "
	}
	if($Btsecs)
	{
		$srinfocmd += " -btsecs $Btsecs "
	}
	if($Critical)
	{
		$srinfocmd += " -critical "
	}
	if($Major)
	{
		$srinfocmd += " -major "
	}
	if($Minor)
	{
		$srinfocmd += " -minor "
	}
	if($Info)
	{
		$srinfocmd += " -info "
	}
	if($Comment)
	{
		$srinfocmd += " -comment $Comment "
	}
	if($Duration)
	{
		$srinfocmd += " defer $Duration "
	}
	if($PortType)
	{
		$PortTypeArray = "disk","host","iscsi","free","fs","peer","rcip","rcfc"
		if($PortTypeArray -match $PortType)
		{
			$srinfocmd += " -port_type $PortType "
		}
		else
		{
			return "FAILURE : Type name should be in [ disk | host | iscsi | free | fs | peer | rcip | rcip ]"
		}
	}
	if($PortNSP)
	{
		$srinfocmd += " -port $PortNSP "
	}
	if($Both)
	{
		$srinfocmd += " -both "
	}
	if($CTL)
	{
		$srinfocmd += " -ctl "
	}
	if($Data)
	{
		$srinfocmd += " -data "
	}
	if($Host)
	{
		$srinfocmd += " -host $Host "
	}
	if($VV)
	{
		$srinfocmd += " -vv $VV "
	}
	if($vLun)
	{
		$srinfocmd += " -vlun $vLun "
	}
	if($Node)
	{
		$srinfocmd += " -node $Node "
	}
	if($CPG)
	{
		$srinfocmd += " -cpg $CPG "
	}
	if($DiskType)
	{
		$srinfocmd += " -disk_type $DiskType "
	}
	if($RPM)
	{
		$srinfocmd += " -rpm $RPM "
	}
	if($Target)
	{
		$srinfocmd += " -target $Target "
	}
	if($Condition)
	{
		$srinfocmd += " $Condition "
	}
	else
	{
		return "Condition is mandatory."
	}
	if($Name)
	{
		$srinfocmd += " $Name "
	}
	else
	{
		return "Name is Missing Specifies the name of the SR alert criterion, with a maximum of 31 characters."
	}
	
	#write-host "Final Command is $srinfocmd"
	write-debuglog "Create alert criteria command => $srinfocmd" "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing New-3parSRAlertCrit Command $Result"
	}
	else
	{
		return  "FAILURE : While Executing New-3parSRAlertCrit $Result "
	}
}
#### End New-3parSRAlertCrit ####

#### Start Remove-3parSRAlertCrit ####
Function Remove-3parSRAlertCrit
{
<#
  .SYNOPSIS
    Command removes a criterion that System Reporter evaluates to determine if a performance alert should be generated.
  
  .DESCRIPTION
    Note : This cmdlet (Remove-3parSRAlertCrit) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-SRAlertCrit) instead.
  
    Command removes a criterion that System Reporter evaluates to determine if a performance alert should be generated.        
  
  .EXAMPLE
    Remove-3parSRAlertCrit -force  -Name write_port_check 
	Example removes the criterion named write_port_check:
	
  .PARAMETER force
	Do not ask for confirmation before removing this criterion.

  .PARAMETER Name
	Specifies the name of the criterion to Remove.  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parSRAlertCrit
    LASTEDIT: 08/17/2015
    KEYWORDS: Remove-3parSRAlertCrit
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $Name,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
        $force,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Remove-3parSRAlertCrit - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parSRAlertCrit since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parSRAlertCrit since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$version1 = Get-3parVersion -number  -SANConnection $SANConnection
	if( $version1 -lt "3.2.1")
	{
		return "Current 3par version $version1 does not support these cmdlet"
	}
	$srinfocmd = "removesralertcrit "
	if(($force) -and ($Name))
	{
		$srinfocmd += " -f $Name"		
	}
	else
	{
		return "FAILURE : Please specify -force or Name parameter values"
	}
	#write-host "Final Command is $srinfocmd"
	write-debuglog "Remove alert crit => $srinfocmd" "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
	if($Result)
	{
		return "FAILURE : $Result"
	}
	else
	{
		return "Success : sralert $Name has been removed"
	}	
}
#### End Remove-3parSRAlertCrit ####
#### Start Get-3parSRStatCPU ####
Function Get-3parSRStatCPU
{
<#
  .SYNOPSIS
    Command displays historical performance data reports for CPUs.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatCPU) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatCPU) instead.
  
    Command displays historical performance data reports for CPUs.
	
  .EXAMPLE
    Get-3parSRStatCPU 
	Command displays historical performance data reports for CPUs.

  .EXAMPLE
    Get-3parSRStatCPU -Groupby CPU
	
  .EXAMPLE
    Get-3parSRStatCPU -btsecs 24h
	
  .EXAMPLE
    Get-3parSRStatCPU -Hourly -btsecs 24h
 	Example displays aggregate hourly performance statistics for all CPUs beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRStatCPU -option daily -attime -groupby node     
    Example displays daily node cpu performance aggregated by nodes
	 
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.	
 
 .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
     Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
	
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of  <groupby> items.  Each <groupby> must be different and one of the following:
	NODE      The controller node
	CPU       The CPU within the controller node

  .PARAMETER Node
	Only the specified node numbers are included, where each node is a number from 0 through 7. If want to display information for multiple nodes specift <nodenumber>,<nodenumber2>,etc. If not specified, all nodes are included.
	Get-3parSRStatCPU  -Node 0,1,2
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatCPU
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatCPU
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$Node,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRStatCPU - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatCPU since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatCPU since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srstatcpu "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "CPU","NODE"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($Node)
		{
			$nodes = $Node.split(",")
			$srinfocmd += " $nodes"
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "NODE"
			}
			$rangestart = "1"			
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,User%,Sys%,Idle%,Intr/s,CtxtSw/s"
		}
		else
		{
			$rangestart = "1"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,User%,Sys%,Idle%,Intr/s,CtxtSw/s"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatCPU ####

#### Start Get-3parSRStatCMP ####
Function Get-3parSRStatCMP
{
<#
  .SYNOPSIS
    Command displays historical performance data reports for cache memory
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatCMP) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatCMP) instead.
  
    Command displays historical performance data reports for cache memory
	
  .EXAMPLE
    Get-3parSRStatCMP 
	Command displays historical performance data reports for cache memory
	
  .EXAMPLE
    Get-3parSRStatCMP -Hourly -btsecs -24h
 	Example displays aggregate hourly performance statisticsfor all node caches beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRStatCMP -Daily -attime -groupby node     
    Example displays daily node cache performance aggregated by nodes
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.

  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
     Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
	
  .PARAMETER Full
	List all the metrics for each row in a single line.  The output for
	this option is very wide.

  .PARAMETER Page
	List the page state information.

  .PARAMETER Groupby
	 For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	NODE      The controller node
		
  .PARAMETER Node
	Only the specified node numbers are included, where each node is a number from 0 through 7. If want to display information for multiple nodes specift <nodenumber>,<nodenumber2>,etc. If not specified, all nodes are included.
	Get-3parSRStatCMP  -Node 0,1,2
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatCMP
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatCMP
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Full ,	
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Page ,	
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$Node,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRStatCMP - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatCMP since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatCMP since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srstatcmp "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "NODE"
			if($commarr -eq $groupby.toUpper())
			{
				$srinfocmd += " -groupby $groupby"
			}
			else
			{
				return "FAILURE: Invalid groupby option it should be in ( $commarr )"
			}
		}		
		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		
		if($Full)
		{
			$srinfocmd += " -full"			
		}
		
		if($Page)
		{
			$srinfocmd += " -page"			
		}		
		
		if($Node)
		{
			$nodes = $Node.split(",")
			$srinfocmd += " $nodes"			
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "NODE"
			}
			Add-Content -Path $tempFile -Value "NODE,rhit(count/sec),whit(count/sec),r(count/sec),w(count/sec),r+w(count/sec),lockblk(count/sec),r(hit%),w(hit%),NL(dack/sec),FC(dack/sec),SSD(dack/sec)"
			$rangestart = "3"			
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,rhit(count/sec),whit(count/sec),r(count/sec),w(count/sec),r+w(count/sec),lockblk(count/sec),r(hit%),w(hit%),NL(dack/sec),FC(dack/sec),SSD(dack/sec)"						
		}
		elseif($Page)
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,Free,Clean,Write1,Writen,Wrtsched,Writing,Dcowpend,NL(Dirty),FC(Dirty),SSD(Dirty),NL(MaxDirty),FC(MaxDirty),SSD(Max Dirty)"
		}
		elseif($Full)
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,rhit(count/sec),whit(count/sec),r(count/sec),w(count/sec),r+w(count/sec),lockblk(count/sec),r(hit%),w(hit%),NL(dack/sec),FC(dack/sec),SSD(dack/sec),free(PageStates),clean(PageStates),write1(PageStates),writen(PageStates),wrtsched(PageStates),writing(PageStates),dcowpend(PageStates),NL(DirtyPages),FC(DirtyPages),SSD(DirtyPages),NL(MaxDirtyPages),SSD(MaxDirtyPages)"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,rhit(count/sec),whit(count/sec),r(count/sec),w(count/sec),r+w(count/sec),lockblk(count/sec),r(hit%),w(hit%),NL(dack/sec),FC(dack/sec),SSD(dack/sec)"			
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatCMP ####
#### Start Get-3parSRStatCache ####
Function Get-3parSRStatCache
{
<#
  .SYNOPSIS
    Command displays historical performance data reports for flash cache and data cache.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatCache) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatCache) instead.
  
    Command displays historical performance data reports for flash cache and data cache.
	
  .EXAMPLE
    Get-3parSRStatCache 
	Command displays historical performance data reports for flash cache and data cache.
	
  .EXAMPLE
    Get-3parSRStatCache -Hourly -btsecs -24h
 	Example displays aggregate hourly performance statistics for flash cache and data cache beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRStatCache -Daily -attime -groupby node     
    Example displays daily flash cache and data cache performance aggregated by nodes
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.

  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
	
  .PARAMETER InternalFlashcache
	Lists the IOPS and bandwidth each for both read back and destaged write
	flash cache activity. May be combined with -fmp_queue and -cmp_queue.

  .PARAMETER FmpQueue
	List the FMP queue statistics. May be combined with -cmp_queue and
	-internal_flashcache.

  .PARAMETER CmpQueue
	List the CMP queue statistics. May be combined with -fmp_queue and
	-internal_flashcache.

  .PARAMETER Full
	List all the metrics for each row in a single line.  The output for
	this option is very wide.
		
  .PARAMETER groupby
	For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	NODE      The controller node
		
  .PARAMETER Node
	Only the specified node numbers are included, where each node is a number from 0 through 7. If want to display information for multiple nodes specift <nodenumber>,<nodenumber2>,etc. If not specified, all nodes are included.
	Get-3parSRStatCache  -Node 0,1,2
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatCache
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatCache
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,	
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $InternalFlashCache ,	
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $FmpQueue ,	
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $CmpQueue ,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Full ,	
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$Node,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRStatCache - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatCache since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatCache since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srstatcache "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "NODE"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}
		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		
		if($InternalFlashCache)
		{
			$srinfocmd += " -internal_flashcache"			
		}
		
		if($FmpQueue)
		{
			$srinfocmd += " -fmp_queue"			
		}
		
		if($CmpQueue)
		{
			$srinfocmd += " -cmp_queue"			
		}
		
		if($Full)
		{
			$srinfocmd += " -full"			
		}
		
		if($Node)
		{
			$nodes = $Node.split(",")
			$srinfocmd += " $nodes"
		}
		
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "NODE"
			}
			Add-Content -Path $tempFile -Value "$optionname,CMP_r/s,CMP_w/s,CMP_rhit%,CMP_whit%,FMP_rhit%,FMP_whit%,FMP_Used%,Read_Back_IO/s,Read_Back_MB/s,Dstg_Wrt_IO/s,Dstg_Wrt_MB/s"
			$rangestart = "3"			
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,CMP_r/s,CMP_w/s,CMP_rhit%,CMP_whit%,FMP_rhit%,FMP_whit%,FMP_Used%,Read_Back_IO/s,Read_Back_MB/s,Dstg_Wrt_IO/s,Dstg_Wrt_MB/s"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,CMP_r/s,CMP_w/s,CMP_rhit%,CMP_whit%,FMP_rhit%,FMP_whit%,FMP_Used%,Read_Back_IO/s,Read_Back_MB/s,Dstg_Wrt_IO/s,Dstg_Wrt_MB/s"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile	
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatCache ####

#### Start Get-3parSRStatLD	 ####
Function Get-3parSRStatLD
{
<#
  .SYNOPSIS
    Command displays historical performance data reports for logical disks.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatLD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatLD) instead.
  
    Command displays historical performance data reports for logical disks.
	
  .EXAMPLE
    Get-3parSRStatLD 
	Command displays historical performance data reports for logical disks.
	
  .EXAMPLE
    Get-3parSRStatLD -Hourly -btsecs -24h
	example displays aggregate hourly performance statistics for all logical disks beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRStatLD -Groupby Node
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of  <groupby> items.  Each <groupby> must be different and one of the following:
	DOM_NAME  Domain name
	LDID      Logical disk ID
	LD_NAME   Logical disk name
	CPG_NAME  Common Provisioning Group name
	NODE      The node that owns the LD
	
   .PARAMETER cpgName 	
	Limit the data to LDs in CPGs with names that match one or more of the specified names or glob-style patterns.
	
  .PARAMETER Node  
	Limit the data to that corresponding to one of the specified nodes	
	-Node 0,1,2
	
  .PARAMETER LDName
	LDs matching either the specified LD_name or glob-style pattern are included. This specifier can be repeated to display information for multiple LDs. If not specified, all LDs are included.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatLD
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatLD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$cpgName,
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$Node,
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$LDName,		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRStatLD - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatLD since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatLD since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srstatld "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "LDID","DOM_NAME","LD_NAME","CPG_NAME","NODE"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($Node)
		{
			$nodes = $Node.split(",")
			$srinfocmd += " $nodes"			
		}
		if($cpgName)
		{
			$srinfocmd += " -cpg $cpgName "
		}
		if($LDName)
		{
			$srinfocmd += " $LDName "
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "LD_NAME"
			}
			
			Add-Content -Path $tempFile -Value "LD_NAME,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"												
			$rangestart = "3"		
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		else
		{			
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		if($range1 -le "4")
		{
			del $tempFile
			return "No data available"
		}
		$range1 = $range1 - 3
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile	
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatLD ####
#### Start Get-3parSRStatPD	 ####
Function Get-3parSRStatPD
{
<#
  .SYNOPSIS
    System reporter performance reports for physical disks (PDs).
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatPD) instead. 
  
    System reporter performance reports for physical disks (PDs).
	
  .EXAMPLE
    Get-3parSRStatPD 
	System reporter performance reports for physical disks (PDs).
	
  .EXAMPLE
    Get-3parSRStatPD -Hourly -btsecs -24h
	example displays aggregate hourly performance statistics for all physical disks beginning 24 hours ago:

  .EXAMPLE
    Get-3parSRStatPD -Groupby SPEED
	
  .EXAMPLE
    Get-3parSRStatPD -rpmSpeed 100
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
	Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of <groupby> items.  Each <groupby> must be different and one of the following:
	PDID      Physical disk ID
	PORT_N    The node number for the primary port for the the PD
	PORT_S    The PCI slot number for the primary port for the the PD
	PORT_P    The port number for the primary port for the the PD
	DISK_TYPE  The disktype of the PD
	SPEED     The speed of the PD
	
   .PARAMETER diskType    
	Limit the data to disks of the types specified. Allowed types are
		FC  - Fast Class
		NL  - Nearline
		SSD - Solid State Drive
		
   .PARAMETER rpmSpeed   
	Limit the data to disks of the specified RPM. Allowed speeds are 7, 10, 15, 100 and 150
		
  .PARAMETER PDID
	PDs with IDs that match either the specified PDID or glob-style pattern are included. This specifier can be repeated to include multiple PDIDs or patterns. If not specified, all PDs are included.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatPD
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$diskType,
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$rpmSpeed,
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$PDID,		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRStatPD - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatPD since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatPD since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection

	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srstatpd "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "PDID","PORT_N","PORT_S","PORT_P","DISK_TYPE","SPEED"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($diskType)
		{
			$diskarr1 = "FC","NL","SSD"
			if($diskarr1 -eq $diskType.toUpper())
			{
				$srinfocmd += " -disk_type $diskType"
			}
			else
			{
				return "FAILURE: Invalid diskType Option it should be in ( $diskarr1 )"
			}	
		}
		if($rpmSpeed)
		{
			$rpmarr1 = "7","10","15","100","150"
			if($rpmarr1 -eq $rpmSpeed)
			{
				$srinfocmd += " -rpm $rpmSpeed"
			}
			else
			{
				return "FAILURE: Invalid rpm speed option it should be in ( $diskarr1 )"
			}	
		}
		if($PDID)
		{
			$srinfocmd += " $PDID "
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "PDID"
			}
			Add-Content -Path $tempFile -Value "PDID,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
			$rangestart = "3"
			#$rangestart = "4"
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		Write-DebugLog "INFO: In Get-3parSRStatPD - cmd is -> $srinfocmd" $Debug
		#write-host " cmd = $srinfocmd"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd		
		if($Result -contains "FAILURE")
		{	
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		if($range1 -le "4")
		{
			del $tempFile
			return "No data available"
		}
		$range1 = $range1 - 3
		foreach ($s in  $Result[$rangestart..$range1] )
		{			
			$s= [regex]::Replace($s,"^ +","")			
			$s= [regex]::Replace($s," +"," ")			
			$s= [regex]::Replace($s," ",",")		
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile	
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatPD ####

#### Start Get-3parSRStatPort	 ####
Function Get-3parSRStatPort
{
<#
  .SYNOPSIS
	System reporter performance reports for ports.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatPort) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatPort) instead.
  
	System reporter performance reports for ports.
	
  .EXAMPLE
    Get-3parSRStatPort 
	System reporter performance reports for ports.
	 
  .EXAMPLE
    Get-3parSRStatPort -portType "disk,host" -Hourly -btsecs -24h -port "0:*:* 1:*:*"
	Sexample displays aggregate hourly performance statistics for disk and host ports on nodes 0 and 1 beginning 24 hours ago:
	 
  .EXAMPLE
    Get-3parSRStatPort -Groupby PORT_N
	
  .EXAMPLE
    Get-3parSRStatPort -portType rcip
	 
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
 
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER etsecs
     Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of <groupby> items.  Each <groupby> must be different and one of the following:
	PORT_N    The node number for the port
	PORT_S    The PCI slot number for the port
	PORT_P    The port number for the port
	PORT_TYPE The type of the port
	GBITPS    The speed of the port

   .PARAMETER portType    
	Limit the data to port of the types specified. Allowed types are
	disk  -  Disk port
	host  -  Host Fibre channel port
	iscsi -  Host ISCSI port
	free  -  Unused port
	fs    -  File Persona port
	peer  -  Data Migration FC port
	rcip  -  Remote copy IP port
	rcfc  -  Remote copy FC port

  .PARAMETER port
    <npat>:<spat>:<ppat>
	Ports with <port_n>:<port_s>:<port_p> that match any of the specified
	<npat>:<spat>:<ppat> patterns are included, where each of the patterns
	is a glob-style pattern. This specifier can be repeated to include
	multiple ports or patterns. If not specified, all ports are included.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatPort
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatPort
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$portType,
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$port,
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRStatPort - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatPort since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatPort since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srstatport "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "PORT_N","PORT_S","PORT_P","PORT_TYPE","GBITPS"				
			$lista = $groupby.split(",")
			foreach($suba in $lista){
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($portType)
		{
			$commarr = "disk","host","iscsi","free","fs","peer","rcip","rcfc"
			$splitarr = $portType.split(",")
			foreach ($s in $splitarr){
				if($commarr -match $s.toLower())
				{				
				}
				else
				{
					return "FAILURE: Invalid port type option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -port_type $portType"

		}
		if($port)
		{
			$srinfocmd += " $port "
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "PORT_TYPE"
			}
			Add-Content -Path $tempFile -Value "PORT_TYPE,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
			$rangestart = "3"
			$rangestart = "4"
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"	
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"			
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"			
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		if($range1 -le "4")
		{
			del $tempFile
			return "No data available"
		}
		$range1 = $range1 - 3
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile	
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatPort ####
#### Start Get-3parSRStatVLUN	 ####
Function Get-3parSRStatVLUN
{
<#
  .SYNOPSIS
    Command displays historical performance data reports for VLUNs.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRStatVLUN) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatVLun) instead.
  
    Command displays historical performance data reports for VLUNs.
	
  .EXAMPLE
    Get-3parSRStatVLUN
	Command displays historical performance data reports for VLUNs.
	
  .EXAMPLE
    Get-3parSRStatVLUN -Hourly -btsecs -24h
	Example displays aggregate hourly performance statistics for all VLUNs beginning 24 hours ago:

  .EXAMPLE
    Get-3parSRStatVLUN -btsecs -2h -host "set:hostset" -vv "set:vvset*"
	 VV or host sets can be specified with patterns:
	 
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
  
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
	
  .PARAMETER Hourly
	Select hourly samples for the report.
	
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	 For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	DOM_NAME        Domain name
	VV_NAME         Virtual Volume name
	HOST_NAME       Host name
	LUN             The LUN number for the VLUN
	HOST_WWN        The host WWN for the VLUN
	PORT_N          The node number for the VLUN  port
	PORT_S          The PCI slot number for the VLUN port
	PORT_P          The port number for the VLUN port
	VVSET_NAME      Virtual volume set name
	HOSTSET_NAME    Host set name
	VM_NAME         Virtual Machine Name for VVol based VMs
	VM_ID           Virtual Machine Identification number for VVol based VMs
	VM_HOST         Virtual Machine host for VVol based VMs
	VVOLSC          Virtual Volume Storage Container for VVol based VMs

   .PARAMETER host
	Limit the data to hosts with names that match one or more of the specified names or glob-style patterns. Host set name must start with
		
  .PARAMETER vv
	Limit the data to VVs with names that match one or more of thespecified names or glob-style patterns. VV set name must be prefixed by "set:" and can also include patterns.
   
  .PARAMETER lun
	Limit the data to LUNs that match one or more of the specified LUNs or glob-style patterns.
	
  .PARAMETER Port  
	Ports with <port_n>:<port_s>:<port_p> that match any of the specified <npat>:<spat>:<ppat> patterns are included, where each of the patterns is a glob-style pattern. If not specified, all ports are included.	
		
   .PARAMETER vLun
	Limit the data to VLUNs matching the specified combination of host, VV,
	lun, and port. Each of these components in this option may be a
	glob-style pattern. The host and VV components may specify a
	corresponding object set by prefixing "set:" to the component. The
	host component may specify a WWN by prefixing the component with
	"wwn:". The lun and port components are optional, and if not present,
	data will be filtered to any matching combination of host and VV.
	This option cannot be combined with -host, -vv, -l, or -port.

  .PARAMETER vmName 
	Limit the data to VMs that match one or more of the specified VM names
	or glob-styled patterns for VVol based VMs.

  .PARAMETER vmId 
	Limit the data to VMs that match one or more of the specified VM IDs
	or glob-styled patterns for VVol based VMs.

  .PARAMETER vmHost
	Limit the data to VMs that match one or more of the specified VM host
	names or glob-styled patterns for VVol based VMs.

  .PARAMETER vvoLsc
	Limit the data to VVol containers that match one or more of the
	specified VVol container names or glob-styled patterns.
	
  .PARAMETER Summary 
	Summarize performance across requested objects and time range.

		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRStatVLUN
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRStatVLUN
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Summary,
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$host,
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vv,
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$lun,
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$port,
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vLun,
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vmName,
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vmHost,
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vvoLsc,
		[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vmId,
		[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Get-3parSRStatVLUN - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRStatVLUN since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRStatVLUN since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
    $tempFile = [IO.Path]::GetTempFileName()	
	$srinfocmd = "srstatvlun "
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		
		if($Summary)
		{
			$srinfocmd += " -summary $Summary"
		}
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}				
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($groupby)
		{
			$commarr = "DOM_NAME","VV_NAME","HOST_NAME","LUN","HOST_WWN","PORT_N","PORT_S","PORT_P","VVSET_NAME","HOSTSET_NAME"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{
					$srinfocmd += " -groupby $groupby"
				}
				else
				{
					del $tempFile
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}			
		}
		if($host)
		{
			$srinfocmd += " -host $host"			
		}
		if($vv)
		{
			$srinfocmd += " -vv $vv "
		}
		if($lun)
		{
			$srinfocmd += " -l $lun "
		}
		if($port)
		{
			$srinfocmd += " -port $port "
		}
		if($vLun)
		{
			$srinfocmd += " -vlun $vLun "
		}	
        if($vmName)
		{
			$srinfocmd += " -vmname $vmName "
		}
		if($vmId)
		{
			$srinfocmd += " -vmid $vmId "
		}		
		if($vmHost)
		{
			$srinfocmd += " -vmhost $vmHost "
		}
		if($vvoLsc)
		{
			$srinfocmd += " -vvolsc $vvoLsc "
		}
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "HOST_NAME"
			}
			Add-Content -Path $tempFile -Value "Host_Name,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
			$rangestart = "4"
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"	
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		elseif($Summary)
		{	
			$rangestart = "4"	
			Add-Content -Path $tempFile -Value "Summary,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		else
		{
			$rangestart = "3"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,IO/s_Rd,IO/s_Wr,IO/s_Tot,KBytes/s_Rd,KBytes/s_Wr,KBytes/s_Tot,Svct/ms_Rd,Svct/ms_Wr,Svct/ms_Tot,IOSz/KBytes_Rd,IOSz/KBytes_Wr,IOSz/KBytes_Tot,QLen,AvgBusy%"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		$range1  = $Result.count -3	
		if($Summary){ $range1 = 4 }
		if($range1 -le "2")
		{ 
			del $tempFile 
			return "No data available" 
		}	
		if($Result.count -gt 4)
		{	
			foreach ($s in  $Result[$rangestart..$range1] )
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				#write-host "s $s"
				Add-Content -Path $tempFile -Value $s
			}
			Import-Csv $tempFile	
			del $tempFile
		}
		else
		{
			del $tempFile
			return $Result
		}
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRStatVLUN ####
#### Start Get-3parSRHistLd ####
Function Get-3parSRHistLd
{
<#
  .SYNOPSIS
    Displays historical histogram performance data reports for logical disks.
	
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRHistLD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRHistLd) instead.
  
    Displays historical histogram performance data reports for logical disks.
	
  .EXAMPLE
    Get-3parSRHistLd 
	Displays historical histogram performance data reports for logical disks.
	
  .EXAMPLE
    Get-3parSRHistLd -Hourly -btsecs -24h
	example displays aggregate hourly histogram performance statistics for all logical disks beginning 24 hours ago:

  .EXAMPLE
    Get-3parSRHistLd -Metric Both
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
	
  .PARAMETER Hourly
	Select hourly samples for the report.
	
  .PARAMETER Daily   
	Select daily samples for the report.
	
  .PARAMETER rw
       Specifies that the display includes separate read and write data. If notspecified, the total is displayed.
	   
  .PARAMETER Groupby
	 For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	DOM_NAME  Domain name
	LDID      Logical disk ID
	LD_NAME   Logical disk name
	CPG_NAME  Common Provisioning Group name
	NODE      The node that owns the LD

  .PARAMETER cpgName
	Limit the data to LDs in CPGs with names that match one or more of the specified names or glob-style patterns.
		
  .PARAMETER node
	Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER LDName
	LDs matching either the specified LD_name or glob-style pattern are included. This specifier can be repeated to display information for multiple LDs. If not specified, all LDs are included.

  .PARAMETER Metric both|time|size
	Selects which metric to display. Metrics can be one of the following:
	both - (Default)Display both I/O time and I/O size histograms
	time - Display only the I/O time histogram
	size - Display only the I/O size histogram

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRHistLd
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRHistLd   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$rw,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$groupby,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$cpgName,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$node,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$LDName,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Metric,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)
	Write-DebugLog "Start: In Get-3parSRHistLd - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRHistLd since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRHistLd since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "srhistld "
	$3parosver = Get-3parVersion -number -SANConnection  $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($rw)
		{
			$srinfocmd +=  " -rw "
		}
		if($groupby)
		{
			$commarr =  "DOM_NAME","LDID","LD_NAME","CPG_NAME","NODE"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($cpgName)
		{
			$srinfocmd +=  " -cpg $cpgName "
		}
		if($node)
		{
			$nodes = $node.split(",")
			$srinfocmd +=  " -node $nodes "			
		}
		if($LDName)
		{
				$srinfocmd += " $LDName "
		}
		if($Metric)
		{			
			$a = "both","time","size"
			$l=$Metric
			if($a -eq $l)
			{
				$srinfocmd += " -metric $Metric"			
			}
			else
			{ 
				Write-DebugLog "Stop: Exiting  Get-3parSRHistLd   since -Metric $Metric in incorrect "
				Return "FAILURE : Metric :- $Metric is an Incorrect [ both | time | size ]  can be used only . "
			}
		}
		#write-host " cmd = $srinfocmd"
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "LD_NAME"
			}
			Add-Content -Path $tempFile -Value "$optionname,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
			$rangestart = "3"
		}
		elseif($Metric -eq "time")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec)"
		}
		elseif($Metric -eq "size")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		$range1  = $Result.count
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] ){
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRHistLd ####

#### Start Get-3parSRHistPD ####
Function Get-3parSRHistPD
{
<#
  .SYNOPSIS
    Command displays historical histogram performance data reports for physical disks. 
	
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRHIstPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRHistPD) instead.
  
    Command displays historical histogram performance data reports for physical disks. 
	
  .EXAMPLE
    Get-3parSRHistPD 
	Command displays historical histogram performance data reports for physical disks. 
	
  .EXAMPLE
    Get-3parSRHistPD -Hourly -btsecs -24h
	Example displays aggregate hourly histogram performance statistics for all physical disks beginning 24 hours ago:

  .EXAMPLE
    Get-3parSRHistPD -Groupby SPEED
	
  .EXAMPLE
    Get-3parSRHistPD -Metric both 
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
	
  .PARAMETER Hourly
	Select hourly samples for the report.
	
  .PARAMETER Daily   
	Select daily samples for the report.
	
  .PARAMETER rw
   Specifies that the display includes separate read and write data. If notspecified, the total is displayed.
	   
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	PDID      Physical disk ID
	PORT_N    The node number for the primary port for the the PD
	PORT_S    The PCI slot number for the primary port for the the PD
	PORT_P    The port number for the primary port for the the PD
	DISK_TYPE  The disktype of the PD
	SPEED     The speed of the PD

  .PARAMETER diskType
	Limit the data to disks of the types specified. Allowed types are
	FC  - Fast Class
	NL  - Nearline
	SSD - Solid State Drive
		
  .PARAMETER rpmSpeed
        Limit the data to disks of the specified RPM. Allowed speeds are 7, 10, 15, 100 and 150

  .PARAMETER Metric both|time|size
	Selects which metric to display. Metrics can be one of the following:
	both - (Default)Display both I/O time and I/O size histograms
	time - Display only the I/O time histogram
	size - Display only the I/O size histogram
		

  .PARAMETER PDID
	LDs matching either the specified LD_name or glob-style pattern are included. This specifier can be repeated to display information for multiple LDs. If not specified, all LDs are included.

  .PARAMETER SANConnection 
   Specify the SAN Connection object created with new-SANConnection	
   
  .Notes
    NAME:  Get-3parSRHistPD
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRHistPD   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$rw,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$groupby,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$diskType,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$rpmSpeed,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$PDID,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Metric,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRHistPD - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRHistPD since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRHistPD since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "srhistpd "
	$3parosver = Get-3parVersion -number -SANConnection  $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($rw)
		{
			$srinfocmd +=  " -rw "
		}
		if($groupby)
		{
			$commarr =  "PDID","PORT_N","PORT_S","PORT_P","DISK_TYPE","SPEED"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($diskType)
		{
			$diskarr1 = "FC","NL","SSD"
			if($diskarr1 -eq $diskType.toUpper())
			{
				$srinfocmd +=  " -disk_type $diskType "
			}
			else
			{
				return "FAILURE: Invalid diskType it should be in ( $diskarr1 )"
			}
			
		}
		if($Metric)
		{			
			$a = "both","time","size"
			$l=$Metric
			if($a -eq $l)
			{
				$srinfocmd += " -metric $Metric"			
			}
			else
			{ 
				Write-DebugLog "Stop: Exiting  Get-3parSRHistPD   since -Metric $Metric in incorrect "
				Return "FAILURE : Metric :- $Metric is an Incorrect [ both | time | size ]  can be used only . "
			}
		}
		if($rpmSpeed)
		{
			$rpmarr1 = "7","10","15","100","150"
			if($rpmarr1 -eq $rpmSpeed)
			{
				$srinfocmd +=  " -rpm $rpmSpeed "
			}
			else
			{
				return "FAILURE: Invalid rpmSpeed it should be in ( $rpmarr1 )"
			}		
		}
		if($PDID)
		{
				$srinfocmd += " $PDID "
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "PDID"
			}
			Add-Content -Path $tempFile -Value "$optionname,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
			$rangestart = "3"
		}
		elseif($Metric -eq "time")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec)"
		}
		elseif($Metric -eq "size")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		$range1  = $Result.count
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile	
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRHistPD ####
#### Start Get-3parSRHistPort ####
Function Get-3parSRHistPort
{
<#
  .SYNOPSIS
    Command displays historical histogram performance data reports for ports.
	
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRHistPort) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRHistPort) instead.
  
    Command displays historical histogram performance data reports for ports. 
	
  .EXAMPLE
    Get-3parSRHistPort 
	Command displays historical histogram performance data reports for ports.
	
  .EXAMPLE
    Get-3parSRHistPort -Metric_Val size

  .EXAMPLE
    Get-3parSRHistPort -Groupby PORT_N
	
  .EXAMPLE
    Get-3parSRHistPort -Hurly -btsecs -24h -portType "host,disk" -port "0:*:* 1:*:*"
	example displays aggregate hourly histogram performance statistics for disk and host ports on nodes 0 and 1 beginning 24 hours ago:
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object
 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
        - The absolute epoch time (for example 1351263600).
		- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
          (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
        If it is not specified then the time at which the report begins depends
        on the sample category (-hires, -hourly, -daily):        
			- For hires, the default begin time is 12 hours ago (-btsecs -12h).
            - For hourly, the default begin time is 7 days ago (-btsecs -7d).
            - For daily, the default begin time is 90 days ago (-btsecs -90d).
        If begin time and sample category are not specified then the time
        the report begins is 12 hours ago and the default sample category is hires.
        If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
     Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
        The value can be specified as either
        - The absolute epoch time (for example 1351263600).
        - A negative number indicating the number of seconds before the
          current time. Instead of a number representing seconds, <secs> can
          be specified with a suffix of m, h or d to represent time in minutes
          (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
        If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
		Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
		Select hourly samples for the report.
		
  .PARAMETER Daily   
		Select daily samples for the report.

  .PARAMETER Metric_Val both|time|size
	Selects which metric to display. Metrics can be one of the following:
		both - (Default)Display both I/O time and I/O size histograms
		time - Display only the I/O time histogram
		size - Display only the I/O size histogram

		
  .PARAMETER rw
   Specifies that the display includes separate read and write data. If notspecified, the total is displayed.
	   
  .PARAMETER Groupby
	 For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	PORT_N      The node number for the port
	PORT_S      The PCI slot number for the port
	PORT_P      The port number for the port
	PORT_TYPE   The type of the port
	GBITPS      The speed of the port
	TRANS_TYPE  The transaction type - ctl or data


  .PARAMETER portType
	Limit the data to port of the types specified. Allowed types are
	disk  -  Disk port
	host  -  Host Fibre channel port
	iscsi -  Host ISCSI port
	free  -  Unused port
	fs    -  File Persona port
	peer  -  Data Migration FC port
	rcip  -  Remote copy IP port
	rcfc  -  Remote copy FC port

  .PARAMETER Port	
	Ports with <port_n>:<port_s>:<port_p> that match any of the specified[<npat>:<spat>:<ppat>...] patterns are included, where each of the patterns is a glob-style pattern. If not specified, all ports are included.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection	
	
  .Notes
    NAME:  Get-3parSRHistPort
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRHistPort
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$rw,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$groupby,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$portType,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Port,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Metric_Val,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRHistPort - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRHistPort since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRHistPort since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "srhistport "
	$3parosver = Get-3parVersion -number -SANConnection  $SANConnection
	if($3parosver -ge "3.1.2")
	{

		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($rw)
		{
			$srinfocmd +=  " -rw "
		}
		if($groupby)
		{
			$commarr =  "PORT_N","PORT_S","PORT_P","PORT_TYPE","GBITPS"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($portType)
		{
			$commarr = "disk","host","iscsi","free","fs","peer","rcip","rcfc"
			$splitarr = $portType.split(",")
			foreach ($s in $splitarr){
				if($commarr -match $s.toLower())
				{				
				}
				else
				{
					return "FAILURE: Invalid port type option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -port_type $portType"	
		}		
		if($Port)
		{
				$srinfocmd += " $Port "
		}
		if($Metric_Val)
		{			
			$a = "both","time","size"
			$l=$Metric_Val
			if($a -eq $l)
			{
				$srinfocmd += " -metric $Metric_Val"			
			}
			else
			{ 
				Write-DebugLog "Stop: Exiting  Get-3parSRHistPort since -Metric $Metric_Val in incorrect "
				Return "FAILURE : Metric :- $Metric_Val is an Incorrect [ both | time | size ]  can be used only . "
			}
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "PORT_TYPE"
			}
			Add-Content -Path $tempFile -Value "$optionname,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
			$rangestart = "3"
		}
		elseif($Metric_Val -eq "time")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec)"
		}
		elseif($Metric_Val -eq "size")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		$range1  = $Result.count		
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available "
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}

}
#### End Get-3parSRHistPort ####

#### Start Get-3parSRHistVLUN ####
Function Get-3parSRHistVLUN
{
<#
  .SYNOPSIS
    Command displays historical histogram performance data reports for VLUNs. 
	
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRHistVLUN) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRHistVLun) instead.
  
    Command displays historical histogram performance data reports for  VLUNs. 
	
  .EXAMPLE
    Get-3parSRHistVLUN 
	Command displays historical histogram performance data reports for  VLUNs. 
	
  .EXAMPLE
    Get-3parSRHistVLUN  -Hourly -btsecs -24h
	example displays aggregate hourly histogram performance statistics for all VLUNs beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRHistVLUN -btsecs -2h -host "set:hostset" -vv "set:vvset*"
	VV or host sets can be specified with patterns:
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	
	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
	
  .PARAMETER Daily   
	Select daily samples for the report.
	
  .PARAMETER rw
   Specifies that the display includes separate read and write data. If notspecified, the total is displayed.
	   
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of  <groupby> items.  Each <groupby> must be different and one of the following:
	DOM_NAME  Domain name
	VV_NAME   Virtual Volume name
	HOST_NAME Host name
	LUN       The LUN number for the VLUN
	HOST_WWN  The host WWN for the VLUN
	PORT_N    The node number for the VLUN  port
	PORT_S    The PCI slot number for the VLUN port
	PORT_P    The port number for the VLUN port
	VVSET_NAME    Virtual volume set name
	HOSTSET_NAME  Host set name

  .PARAMETER host
	 -host <host_name|host_set|pattern>[,<host_name|host_set|pattern>...]
	Limit the data to hosts with names that match one or more of the
	specified names or glob-style patterns. Host set name must start with
	"set:" and can also include patterns.
		
  .PARAMETER vv		
	-vv <VV_name|VV_set|pattern>[,<VV_name|VV_set|pattern>...]
	Limit the data to VVs with names that match one or more of the specified names or glob-style patterns. 
	VV set name must be prefixed by "set:" and can also include patterns.
		
  .PARAMETER lun
    -lun <LUN|pattern>[,<LUN|pattern>...]
	Limit the data to LUNs that match one or more of the specified LUNs or glob-style patterns.

  .PARAMETER Port
    -port <npat>:<spat>:<ppat>[,<npat>:<spat>:<ppat>...]
	Ports with <port_n>:<port_s>:<port_p> that match any of the specified <npat>:<spat>:<ppat> patterns are included, where each of the patterns is a glob-style pattern. If not specified, all ports are included.

  .PARAMETER Metric_Val both|time|size
	Selects which metric to display. Metrics can be one of the following:
	both - (Default)Display both I/O time and I/O size histograms
	time - Display only the I/O time histogram
	size - Display only the I/O size histogram
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection	
	
  .Notes
    NAME:  Get-3parSRHistVLUN
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parSRHistVLUN
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$rw,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$groupby,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$host,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$vv,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$lun,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Port,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Metric_Val,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRHistVLUN - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRHistVLUN since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRHistVLUN since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "srhistvlun "
	$3parosver = Get-3parVersion -number -SANConnection  $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($rw)
		{
			$srinfocmd +=  " -rw "
		}
		if($groupby)
		{
			$commarr =  "DOM_NAME","VV_NAME","HOST_NAME","LUN","HOST_WWN","PORT_N","PORT_S","PORT_P","VVSET_NAME","HOSTSET_NAME"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($host)
		{
			$srinfocmd +=  " -host $host "	
		}
		if($vv)
		{
			$srinfocmd +=  " -vv $vv "	
		}
		if($lun)
		{
			$srinfocmd +=  " -l $lun "	
		}		
		if($Port)
		{
				$srinfocmd += " -port $Port "
		}
		if($Metric_Val)
		{			
			$a = "both","time","size"
			$l=$Metric_Val
			if($a -eq $l)
			{
				$srinfocmd += " -metric $Metric_Val"			
			}
			else
			{ 
				Write-DebugLog "Stop: Exiting  Get-3parSRHistVLUN   since -Metric $Metric_Val in incorrect "
				Return "FAILURE : Metric :- $Metric_Val is an Incorrect [ both | time | size ]  can be used only . "
			}
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "HOST_NAME"
			}
			Add-Content -Path $tempFile -Value "$optionname,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
			$rangestart = "3"
		}
		elseif($Metric_Val -eq "time")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec)"
		}
		elseif($Metric_Val -eq "size")
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		else
		{
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes)"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		$range1  = $Result.count
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRHistVLUN ####

#### Start Get-3parSRAlertCrit ####
Function Get-3parSRAlertCrit
{
<#
  .SYNOPSIS
    Shows the criteria that System Reporter evaluates to determine if a performance alert should be generated.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRAlertCrit) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRAlertCrit) instead.
  
    Shows the criteria that System Reporter evaluates to determine if a performance alert should be generated.
        
  .EXAMPLE
    Get-3parSRAlertCrit 
	shows the criteria that System Reporter evaluates to determine if a performance alert should be generated.
	
  .EXAMPLE
    Get-3parSRAlertCrit -Daily
	Example displays all the criteria evaluated on an hourly basis:
	
  .EXAMPLE
	Get-3parSRAlertCrit -Hires

  .PARAMETER Daily
	This criterion will be evaluated on a daily basis at midnight.
		
  .PARAMETER Hourly
	This criterion will be evaluated on an hourly basis.
		
  .PARAMETER Hires
	This criterion will be evaluated on a high resolution (5 minute) basis. This is the default.
		
  .PARAMETER Major
	This alert should require urgent action.
		
  .PARAMETER Minor
	This alert should require not immediate action.
		
  .PARAMETER Info
	This alert is informational only. This is the default.
	
  .PARAMETER Enabled
	Displays only criteria that are enabled.

  .PARAMETER Disabled
	Displays only criteria that are disabled.

  .PARAMETER Critical
	Displays only criteria that have critical severity.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRAlertCrit
    LASTEDIT: 08/17/2015
    KEYWORDS: Get-3parSRAlertCrit
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(

		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Major ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Minor ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Info ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Enabled ,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Disabled ,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Critical,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	write-DebugLog "Start: In Get-3parSRAlertCrit - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRAlertCrit since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRAlertCrit since SAN connection object values are null/empty"
			}
		}
	}
	
	$cliresult1 = Test-PARCli -SANConnection $SANConnection	
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	
	$version1 = Get-3parVersion -number  -SANConnection $SANConnection
	if( $version1 -lt "3.2.1")
	{
		return "Current 3par version $version1 does not support these cmdlet"
	}
	
	$srinfocmd = "showsralertcrit "
	
	if($Hourly)
	{
		$srinfocmd += " -hourly "
	}
	if($Daily)
	{
		$srinfocmd += " -daily "
	}
	if($Hires)
	{
		$srinfocmd += " -hires "
	}
	if($Major)
	{
		$srinfocmd += " -major "
	}
	if($Minor)
	{
		$srinfocmd += " -minor "
	}
	if($Info)
	{
		$srinfocmd += " -info "
	}
	if($Enabled)
	{
		$srinfocmd += " -enabled "
	}
	if($Disabled)
	{
		$srinfocmd += " -disabled "
	}
	if($Critical)
	{
		$srinfocmd += " -critical "
	}
	#write-host "Final Command is $srinfocmd"
	write-debuglog "Get alert criteria command => $srinfocmd" "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd	
	if($Result -match "Invalid")
	{
		return "FAILURE : $Result"
	}
	if($Result -match "Error")
	{
		return "FAILURE : $Result"
	}
	if($Result -match "No criteria listed")
	{
		return "No srcriteria listed"
	}
	$tempFile = [IO.Path]::GetTempFileName()
	$range1 = $Result.count-3
	foreach ($s in  $Result[0..$range1] )
	{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
	}
	Import-Csv $tempFile
	del $tempFile
}
#### End Get-3parSRAlertCrit ####

#### Start Set-3parSRAlertCrit ####
Function Set-3parSRAlertCrit
{
<#
  .SYNOPSIS
    Command allows users to enable or disable a System Reporter alert criterion
  
  .DESCRIPTION
    Note : This cmdlet (Set-3parSRAlertCrit) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-SRAlertCrit) instead.
  
    Command allows users to enable or disable a System Reporter alert criterion
        
  .EXAMPLE
    Set-3parSRAlertCrit -Enable -NameOfTheCriterionToModify write_port_check

  .EXAMPLE
	Set-3parSRAlertCrit -Disable -NameOfTheCriterionToModify write_port_check

  .EXAMPLE
	Set-3parSRAlertCrit -Daily -NameOfTheCriterionToModify write_port_check

  .EXAMPLE
	Set-3parSRAlertCrit -Info -Name write_port_check

  .PARAMETER Daily
	This criterion will be evaluated on a daily basis at midnight.

  .PARAMETER Hourly
	This criterion will be evaluated on an hourly basis.

  .PARAMETER Hires
	This criterion will be evaluated on a high resolution (5 minute) basis.
	This is the default.
		
  .PARAMETER Count
	The number of matching objects that must meet the criteria in order for
	the alert to be generated. Note that only one alert is generated in this
	case and not one alert per affected object.
		
  .PARAMETER Critical
	This alert has the highest severity.

  .PARAMETER Major
	This alert should require urgent action.

  .PARAMETER Minor
	This alert should not require immediate action.

  .PARAMETER Info
	This alert is informational only. This is the default.

  .PARAMETER Enable
	Enables the specified criterion.

  .PARAMETER Disable
	Disables the specified criterion.

  .PARAMETER NameOfTheCriterionToModify
	Specifies the name of the criterion to modify. 

  .PARAMETER Recurrences_Samples 
	The alert will only be generated if the other conditions of the
	criterion recur repeatedly. <recurrences> is an integer value from
	2 to 10, and <samples> is an integer from 2 to 10 representing the
	number of previous System Reporter samples in which the recurrences
	will be examined. <samples> must be at least the requested quantity of
	recurrences. Note that these samples refer to the selected resolution
	of the criterion: hires, hourly, or daily.

  .PARAMETER Btsecs
	A negative number indicating the number of seconds before the data
	sample time used to evaluate conditions which compare against an
	average. Instead of a number representing seconds, btsecs can be
	specified with a suffix of m, h or d to represent time in minutes
	(e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d). The relative time
	cannot be more than 10 samples ago: 50 minutes for hires, 10 hours
	for hourly, or 10 days for daily. If this option is not present the
	average is only computed for the most recent data sample. The
	-btsecs option may not be combined with the -recur option.
	
  .PARAMETER PAT
	Specifies that certain patterns are treated as glob-style patterns and
	that all criteria matching the specified pattern will be modified. This
	option must be used if the pattern specifier is used. This option
	cannot be combined with -name, -condition, or any of the type-specific
	filtering options.

  .PARAMETER ALL
	Specifies that all criteria will have the designated operation applied
	to them, changing the state or attributes of all criteria. This option
	cannot be combined with -name, -condition, or any of the type-specific
	filtering options.
		
  .PARAMETER NewName
	Specifies that the name of the SR alert be changed to <newname>, with a
	maximum of 31 characters.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3parSRAlertCrit
    LASTEDIT: 08/17/2015
    KEYWORDS: Set-3parSRAlertCrit
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(

		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Enable, 
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Disable,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily,    
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Count,		
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $Recurrences_Samples,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $BtSecs,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Critical,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Major,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Minor,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Info,

		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $PAT,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $ALL,
		
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
        $NewName,
		
		[Parameter(Position=15, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $NameOfTheCriterionToModify,		
		
		[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Set-3parSRAlertCrit - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parSRAlertCrit since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parSRAlertCrit since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$version1 = Get-3parVersion -number  -SANConnection $SANConnection
	if( $version1 -lt "3.2.1")
	{
		return "Current 3par version $version1 does not support these cmdlet"
	}
	
	$srinfocmd = "setsralertcrit "	
	
	if($Enable)
	{
		$srinfocmd += " -enable " 
	}
	if($Disable)
	{
		$srinfocmd += " -disable " 
	}
	if($Daily)
	{
		$srinfocmd += " -daily " 
	}
	if($Hourly)
	{
		$srinfocmd += " -hourly " 
	}
	if($Hires)
	{
		$srinfocmd += " -hires " 
	}
	if($Count)
	{
		$srinfocmd += " -count $Count" 
	}
	if($Recurrences_Samples)
	{
		$srinfocmd += " -recur $Recurrences_Samples " 
	}
	if($BtSecs)
	{
		$srinfocmd += " -btsecs $BtSecs" 
	}
	if($Critical)
	{
		$srinfocmd += " -critical " 
	}
	if($Major)
	{
		$srinfocmd += " -major " 
	}
	if($Minor)
	{
		$srinfocmd += " -minor " 
	}
	if($Info)
	{
		$srinfocmd += " -info " 
	}
	if($PAT)
	{
		$srinfocmd += " -pat " 
	}
	if($ALL)
	{
		$srinfocmd += " -all " 
	}
	if($NewName)
	{
		$srinfocmd += " -name $NewName" 
	}
	if($NameOfTheCriterionToModify)
	{
		$srinfocmd += " $NameOfTheCriterionToModify" 
	}
	
	write-debuglog "Set alert crit command => $srinfocmd" "INFO:"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
	return $Result
}
#### End Set-3parSRAlertCrit ####
#### Start Get-3parSRCPGSpace ####
Function Get-3parSRCPGSpace
{
<#
  .SYNOPSIS
    Command displays historical space data reports for common provisioning groups (CPGs).
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRCPGSpace) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRCpgSpace) instead.
  
    Command displays historical space data reports for common provisioning groups (CPGs).
	
  .EXAMPLE
    Get-3parSRCPGSpace 
	Command displays historical space data reports for common provisioning groups (CPGs).
	
  .EXAMPLE
    Get-3parSRCPGSpace -Option hourly -btsecs -24h fc*
	example displays aggregate hourly CPG space information for CPGs with names that match the pattern "fc*" beginning 24 hours ago:

  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
  
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
  
  .PARAMETER etsecs
     Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.  

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of <groupby> items.  Each <groupby> must be different and  one of the following:
	DOM_NAME  Domain name
	CPGID     Common Provisioning Group ID
	CPG_NAME  Common Provisioning Group name
	DISK_TYPE  The disktype of the PDs used by the CPG
	RAID_TYPE The RAID type of the CPG

  .PARAMETER disk_type 
	Limit the data to disks of the types specified. Allowed types are
	FC  - Fast Class
	NL  - Nearline
	SSD - Solid State Drive

  .PARAMETER raid_type
	Limit the data to RAID of the specified types. Allowed types are 0, 1, 5 and 6
	
  .PARAMETER CpgName
	CPGs matching either the specified CPG_name or glob-style pattern are included. This specifier can be repeated to display information for multiple CPGs. If not specified, all CPGs are included.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRCPGSpace
    LASTEDIT: 08/19/2015
    KEYWORDS: Get-3parSRCPGSpace
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$DiskType,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$RaidType,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$CpgName,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRCPGSpace - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRCPGSpace since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRCPGSpace since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srcpgspace"
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		$tempFile = [IO.Path]::GetTempFileName()

		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "DOM_NAME","CPGID","CPGID","CPGID","RAID_TYPE"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					del $tempFile
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"

		}	
		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($RaidType)
		{
			$raidarray = "0","1","5","6"
			if($raidarray -eq $RaidType)
			{
				$srinfocmd += " -raid_type $RaidType"
			}
			else
			{
				del $tempFile
				return "FAILURE: Invalid raid option, it should be in ( $raidarray )"
			}			
		}
		if($DiskType)
		{
			$diskarray = "FC","NL","SSD"
			if($diskarray -eq $DiskType.toUpper()){
				$srinfocmd += " -disk_type $DiskType"			
			}
			else
			{
				del $tempFile
				return "FAILURE: Invalid disktype option, it should be in ( $diskarray )"
			}
		}
		if($CpgName)
		{
			$srinfocmd += " $CpgName"			
		}		
		if($attime)
		{		
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "CPG_NAME"
			}
			#Add-Content -Path $tempFile -Value "$optionname,Used(MB)_Adm,Used(MB)_Snp,Used(MB)_Usr,Used(MB)_Total,Free(MB)_Adm,Free(MB)Snp,Free(MB)Usr,Free(MB)Total,Total(MB)_Adm,Total(MB)_Snp,Total(MB)_Usr,Total(MB)_Total,Growth(MB),CapacityEfficiency_Compaction,CapacityEfficiency_Dedup"
			Add-Content -Path $tempFile -Value "CPG_NAME,PrivateBase(MB),PrivateSnap(MB),Shared(MB),Free(MB),Total(MB),UsableFree(MB),Dedup_GC(KB/s),Compact,Dedup,Compress,DataReduce,OverProv"
			$rangestart = "3"			
		}	
		else
		{
			$rangestart = "2"
			#Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,Used(MB)_Adm,Used(MB)_Snp,Used(MB)_Usr,Used(MB)_Total,Free(MB)_Adm,Free(MB)Snp,Free(MB)Usr,Free(MB)Total,Total(MB)_Adm,Total(MB)_Snp,Total(MB)_Usr,Total(MB)_Total,Growth(MB),CapacityEfficiency_Compaction,CapacityEfficiency_Dedup"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,PrivateBase(MB),PrivateSnap(MB),Shared(MB),Free(MB),Total(MB),UsableFree(MB),Dedup_GC(KB/s),Compact,Dedup,Compress,DataReduce,OverProv"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		#write-host "count = $range1"		
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
				#write-host " s= $s"
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				Add-Content -Path $tempFile -Value  $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRCPGSpace ####
#### Start Get-3parSRLDSpace ####
Function Get-3parSRLDSpace
{
<#
  .SYNOPSIS
    Command displays historical space data reports for logical disks (LDs).
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRLDSpace) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRLDSpace) instead.
  
    Command displays historical space data reports for logical disks (LDs).

  .EXAMPLE
    Get-3parSRLDSpace
	
  .EXAMPLE
    Get-3parSRLDSpace -groupby OWNER 
	Command displays historical space data reports for logical disks (LDs).

  .EXAMPLE
    Get-3parSRLDSpace -DiskType FC
	
  .EXAMPLE
    Get-3parSRLDSpace -raidType 5 -Hourly -btsecs 24h -LDName fc*
	Example displays aggregate hourly LD space information for all RAID 5 LDs with names that match either "fc*" patterns beginning 24 hours ago:
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	
	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
	
  .PARAMETER Hourly
	Select hourly samples for the report.
	
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	DOM_NAME  Domain name
	CPG_NAME  Common Provisioning Group name
	LDID      Logical disk ID
	LD_NAME   Logical disk name
	DISK_TYPE  The disktype of the PDs used by the LD
	RAID_TYPE The RAID type of the LD
	SET_SIZE  The RAID set size of the LD
	STEP_SIZE The RAID step size of the LD
	ROW_SIZE  The RAID row size of the LD
	OWNER     The owner node for the LD

  .PARAMETER cpgName
	Limit the data to LDs in CPGs with names that match one or more of the specified names or glob-style pattern
	 
  .PARAMETER DiskType 
	Limit the data to disks of the types specified. Allowed types are
		FC  - Fast Class
		NL  - Nearline
		SSD - Solid State Drive

  .PARAMETER RaidType
	Limit the data to RAID of the specified types. Allowed types are 0, 1, 5 and 6
		
  .PARAMETER Ownernode
	Limit data to LDs owned by the specified nodes.
		
  .PARAMETER LDname
	CPGs matching either the specified CPG_name or glob-style pattern are included. This specifier can be repeated to display information for multiple CPGs. If not specified, all CPGs are included.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRLDSpace
    LASTEDIT: 08/19/2015
    KEYWORDS: Get-3parSRLDSpace
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$cpgName,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$DiskType,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$RaidType,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$ownernode,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$LDname,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Get-3parSRLDSpace - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRLDSpace since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRLDSpace since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srldspace"
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "DOM_NAME","CPG_NAME","LDID","LD_NAME","DISK_TYPE","RAID_TYPE","SET_SIZE","STEP_SIZE","ROW_SIZE","OWNER"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}		
		if($RaidType)
		{
			$raidarray = "0","1","5","6"
			if($raidarray -eq $RaidType)
			{
				$srinfocmd += " -raid_type $RaidType"			
			}
			else
			{
				return "FAILURE: Invalid raid option, it should be in ( $raidarray )"
			}			
		}
		if($DiskType)
		{
			$diskarray = "FC","NL","SSD"
			if($diskarray -eq $DiskType.toUpper())
			{
				$srinfocmd += " -disk_type $DiskType"			
			}
			else
			{
				return "FAILURE: Invalid disktype option, it should be in ( $diskarray )"
			}
		}
		if($cpgName)
		{
				$srinfocmd += " -cpg $cpgName"
		}
		if($ownernode)
		{
			$srinfocmd +=  " -owner $ownernode"
		}
		if($LDname)
		{
			$srinfocmd += " $LDName"			
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "LD_NAME"
			}
			Add-Content -Path $tempFile -Value "$optionname,Raw(MB),Used(MB),Free(MB),Total(MB)"
			$rangestart = "3"
		}
		else
		{
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,Raw(MB),Used(MB),Free(MB),Total(MB)"
			$rangestart = "2"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		#write-host "count = $range1"		
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}		
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRLDSpace ####
#### Start Get-3parSRPDSpace ####
Function Get-3parSRPDSpace
{
<#
  .SYNOPSIS
    Command displays historical space data reports for physical disks (PDs).
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRPDSpace) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRPDSpace) instead.
  
    Command displays historical space data reports for physical disks (PDs).
	
  .EXAMPLE
    Get-3parSRPDSpace 
	Command displays historical space data reports for physical disks (PDs).
	
  .EXAMPLE
    Get-3parSRPDSpace  -Hourly -btsecs -24h
	Example displays aggregate hourly PD space information for all PDs beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRPDSpace -capacity -attime -diskType SSD
	Displays current system capacity values of SSD PDs:
	
 .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	
	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.
  
  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
	
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each
	combination of <groupby> items.  Each <groupby> must be different and
	one of the following:
	PDID      Physical disk ID
	CAGEID    Cage ID
	CAGESIDE  Cage Side
	MAG       Disk Magazine number within the cage
	DISK      Disk position within the magazine
	DISK_TYPE The disktype of the PD
	SPEED     The disk speed

  .PARAMETER DiskType 
	Limit the data to disks of the types specified. Allowed types are
		FC  - Fast Class
		NL  - Nearline
		SSD - Solid State Drive
			
  .PARAMETER capacity
	Display disk contributions to the system capacity categories: Allocated, Free, Failed, and Total

  .PARAMETER rpmspeed
   Limit the data to disks of the specified RPM. Allowed speeds are  7, 10, 15, 100 and 150
	
  .PARAMETER PDID
	PDs with IDs that match either the specified PDID or glob-style  pattern are included. This specifier can be repeated to include multiple PDIDs or patterns. 
	If not specified, all PDs are included.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRPDSpace
    LASTEDIT: 08/19/2015
    KEYWORDS: Get-3parSRPDSpace
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hires ,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$DiskType,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$capacity,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$rpmspeed,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$PDID,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)
	Write-DebugLog "Start: In Get-3parSRPDSpace - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRPDSpace since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRPDSpace since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}	
	$srinfocmd = "srpdspace"
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{		
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($groupby)
		{
			$commarr = "PDID","CAGEID","CAGESIDE","MAG","DISK","DISK_TYPE","SPEED"
			$lista = $groupby.split(",")
			foreach($suba in $lista)
			{
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($capacity)
		{
			$srinfocmd +=  " -capacity "
		}
		if($rpmspeed)
		{
			$rpmarray = "7","10","15","100","150"
			if($rpmarray -eq $rpmspeed)
			{
				$srinfocmd += " -rpm $rpmspeed"
			}
			else
			{
				return "FAILURE: Invalid rpmspeed it should be in ( $rpmarray )"
			}			
		}
		if($DiskType)
		{
			$diskarray = "FC","NL","SSD"
			if($diskarray -eq $DiskType.toUpper())
			{
				$srinfocmd += " -disk_type $DiskType"			
			}
			else
			{
				return "FAILURE: Invalid disktype option, it should be in ( $diskarray )"
			}
		}
		if($PDID)
		{
				$srinfocmd += " $PDID "
		}
		$tempFile = [IO.Path]::GetTempFileName()
		if($attime)
		{
			$srinfocmd += " -attime "
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			#$rangenodata = "3"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "PDID"
			}
			Add-Content -Path $tempFile -Value "$optionname,Normal(Chunklets)_Used_OK,Normal(Chunklets)_Used_Fail,Normal(Chunklets)_Avail_Clean,Normal(Chunklets)_Avail_Dirty,Normal(Chunklets)_Avail_Fail,Spare(Chunklets)_Used_OK,Spare(Chunklets)_Used_Fail,Spare(Chunklets)_Avail_Clean,Spare(Chunklets)_Avail_Dirty,Spare(Chunklets)_Avail_Fail,LifeLeft%,T(C)"			
			$rangestart = "3"
		}
		else
		{
			#$rangenodata = "3"
			$rangestart = "2"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,Normal(Chunklets)_Used_OK,Normal(Chunklets)_Used_Fail,Normal(Chunklets)_Avail_Clean,Normal(Chunklets)_Avail_Dirty,Normal(Chunklets)_Avail_Fail,Spare(Chunklets)_Used_OK,Spare(Chunklets)_Used_Fail,Spare(Chunklets)_Avail_Clean,Spare(Chunklets)_Avail_Dirty,Spare(Chunklets)_Avail_Fail,LifeLeft%,T(C)"
		}
		#write-host " cmd = $srinfocmd"
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		#write-host "count = $range1"
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}		
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRPDSpace ####
#### Start Get-3parSRVVSpace ####
Function Get-3parSRVVSpace
{
<#
  .SYNOPSIS
    Command displays historical space data reports for virtual volumes (VVs).
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRVVSpace) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRVvSpace) instead.
  
    Command displays historical space data reports for virtual volumes (VVs).
	
  .EXAMPLE
    Get-3parSRVVSpace 
	Command displays historical space data reports for virtual volumes (VVs).
	
  .EXAMPLE
    Get-3parSRVVSpace  -Hourly -btsecs -24h -VVName dbvv*
	example displays aggregate hourly VV space information for VVs with names matching either "dbvv*"  patterns beginning 24 hours ago:
	
  .EXAMPLE
    Get-3parSRVVSpace -Daily -attime -groupby vv_name -vvName tp*
	Example displays VV space information for the most recent daily sample aggregated by the VV name for VVs with names that match the pattern "tp*".
	
  .PARAMETER attime
	Performance is shown at a particular time interval, specified by the -etsecs option, with one row per object 	
	group described by the -groupby option. Without this option, performance is shown versus time with a row per time interval.
	
  .PARAMETER btsecs
    Select the begin time in seconds for the report.The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the current time. Instead of a number representing seconds, <secs> canbe specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):        
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER etsecs
    Select the end time in seconds for the report.  If -attime is   specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent sample.
 
  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report. This is the default setting.
		
  .PARAMETER Hourly
	Select hourly samples for the report.
		
  .PARAMETER Daily   
	Select daily samples for the report.
		
  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	DOM_NAME        Domain name
	VVID            Virtual volume ID
	VV_NAME         Virtual volume name
	BSID            Virtual volume ID of the base virtual volume
	WWN             Virtual volume world wide name (WWN)
	SNP_CPG_NAME    Snap space Common Provisioning Group name
	USR_CPG_NAME    User space Common Provisioning Group name
	PROV_TYPE       The virtual volume provisioning type
	VV_TYPE         The type of the virtual volume
	VVSET_NAME      Virtual volume set name
	VM_NAME         Virtual Machine name for VVol based VMs
	VM_ID           Virtual Machine Identification number for VVol based VMs
	VM_HOST         Virtual Machine host for VVol based VMs
	VVOLSC          Virtual Volume Storage Container for VVol based VMs
	VVOL_STATE      Virtual Volume state, either bound or unbound
	COMPR           Whether Compression is enabled, disabled, or NA

  .PARAMETER usrcpg 
   Only include VVs whose usr space is mapped to a CPG whose name matches one of the specified CPG_name or glob-style patterns.

  .PARAMETER snpcpg
   Only include VVs whose snp space is mapped to a CPG whose name matches one of the specified CPG_name or glob-style patterns.


  .PARAMETER provType
   Only include VVs of the specified provisioning type(s).
   The possible values are: cpvv dds full peer snp tdvv tpsd tpvv
	
  .PARAMETER VVName
	PDs with IDs that match either the specified PDID or glob-style  pattern are included. This specifier can be repeated to include multiple PDIDs or patterns. If not specified, all PDs are included.

  .PARAMETER vmName 
	Limit the data to VMs that match one or more of the specified VM names
	or glob-styled patterns for VVol based VMs.

  .PARAMETER vmId 
	Limit the data to VMs that match one or more of the specified VM IDs
	or glob-styled patterns for VVol based VMs.

  .PARAMETER vmHost 
	Limit the data to VMs that match one or more of the specified VM host
	names or glob-styled patterns for VVol based VMs.

  .PARAMETER vvolState
	Limit the data to VVOLs that have states in either the Bound or
	Unbound state.

  .PARAMETER vvoLsc
	Limit the data to VVol containers that match one or more of the
	specified VVol container names or glob-styled patterns.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSRVVSpace
    LASTEDIT: 08/19/2015
    KEYWORDS: Get-3parSRVVSpace
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$attime,
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$btsecs,
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$etsecs,
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Hourly ,		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
        $Daily ,		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
       	$Hires ,
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$groupby,
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$usrcpg,		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$snpcpg,
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$provType,
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$VVName,
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vmName,
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vmHost,
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vvoLsc,
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vmId,
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[system.string]
		$vvolState,
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)
	Write-DebugLog "Start: In Get-3parSRVVSpace - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSRVVSpace since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSRVVSpace since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$srinfocmd = "srvvspace"
	
	$3parosver = Get-3parVersion -number  -SANConnection $SANConnection
	if($3parosver -ge "3.1.2")
	{
		$tempFile = [IO.Path]::GetTempFileName()
		
		if($btsecs)
		{
			$srinfocmd += " -btsecs $btsecs"
		}
		if($etsecs)
		{
			$srinfocmd += " -etsecs $etsecs"
		}
		if($Hourly)
		{
			$srinfocmd += " -hourly"			
		}
		
		if($Daily)
		{
			$srinfocmd += " -daily"			
		}
		
		if($Hires)
		{
			$srinfocmd += " -hires"			
		}
		if($groupby)
		{
			$commarr = "DOM_NAME","VVID","VV_NAME","BSID","WWN","SNP_CPG_NAME","USR_CPG_NAME","PROV_TYPE","VV_TYPE","VVSET_NAME"
			$lista = $groupby.split(",")
			foreach($suba in $lista){
				if($commarr -eq $suba.toUpper())
				{					
				}
				else
				{
					del $tempFile
					return "FAILURE: Invalid groupby option it should be in ( $commarr )"
				}
			}
			$srinfocmd += " -groupby $groupby"
		}		
		
		if($usrcpg)
		{
			$srinfocmd +=  " -usr_cpg $usrcpg "
		}
		if($snpcpg)
		{
			$srinfocmd +=  " -snp_cpg $snpcpg "
		}
		if($provType)
		{
			$provrray = "cpvv","dds","full","peer","snp","tdvv","tpsd","tpvv"
			if($provrray -eq $provType){
				$srinfocmd += " -prov $provType"
			}
			else
			{
				del $tempFile
				return "FAILURE: Invalid provType it should be in ( $provrray )"
			}			
		}
		if($VVName)
		{
			$srinfocmd += " $VVName "
		}		
        if($vmName)
		{
			$srinfocmd += " -vmname $vmName "
		}
		if($vmId)
		{
			$srinfocmd += " -vmid $vmId "
		}		
		if($vmHost)
		{
			$srinfocmd += " -vmhost $vmHost "
		}
		if($vvoLsc)
		{
			$srinfocmd += " -vvolsc $vvoLsc "
		}
		if($vvolState)
		{
			$srinfocmd += " -vvolstate $vvolState "
		}
		if($attime)
		{		
			$srinfocmd += " -attime "	
			write-debuglog "System reporter command => $srinfocmd" "INFO:"
			if($groupby)
			{
				$optionname = $groupby.toUpper()
			}
			else
			{
				$optionname = "VV_NAME"
			}
			$rangestart = "3"
			#Add-Content -Path $tempFile -Value "$optionname,RawRsvd(MB)_User,RawRsvd(MB)_Snap,RawRsvd(MB)_Admin,RawRsvd(MB)_Total,User(MB)_Used,User(MB)_Free,User(MB)_Rsvd,Snap(MB)_Used,Snap(MB)_Free,Snap(MB)_Rsvd,Snap(MB)_Vcopy,Admin(MB)_Used,Admin(MB)_Free,Admin(MB)_Rsvd,Admin(MB)_Vcopy,Total(MB)_VcopyTotal(MB)_Used,Total(MB)_Rsvd,Total(MB)_VirtualSize,CapacityEfficiency_Compaction,CapacityEfficiency_Dedup"
			Add-Content -Path $tempFile -Value "$optionname,RawRsvd(MB)_User,RawRsvd(MB)_Snap,RawRsvd(MB)_Total,User(MB)_Used,User(MB)_Free,User(MB)_Rsvd,Snap(MB)_Used,Snap(MB)_Free,Snap(MB)_Rsvd,Snap(MB)_Vcopy,Total(MB)_Vcopy,Total(MB)_Used,Total(MB)_Rsvd,Total(MB)_HostWr,Total(MB)_VirtualSize,KB/s)_Compr_GC,Efficiency_Compact,Efficiency_Compress"
		}
		elseif($groupby)
		{
			$optionname = $groupby.toUpper()
			$rangestart = "2"			
			#Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,RawRsvd(MB)_User,RawRsvd(MB)_Snap,RawRsvd(MB)_Total,User(MB)_Used,User(MB)_Free,User(MB)_Rsvd,Snap(MB)_Used,Snap(MB)_Free,Snap(MB)_Rsvd,Snap(MB)_Vcopy,Admin(MB)_Used,Admin(MB)_Free,Admin(MB)_Rsvd,Admin(MB)_Vcopy,Total(MB)_VcopyTotal(MB)_Used,Total(MB)_Rsvd,Total(MB)_VirtualSize,CapacityEfficiency_Compaction,CapacityEfficiency_Dedup"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,$optionname,RawRsvd(MB)_User,RawRsvd(MB)_Snap,RawRsvd(MB)_Total,User(MB)_Used,User(MB)_Free,User(MB)_Rsvd,Snap(MB)_Used,Snap(MB)_Free,Snap(MB)_Rsvd,Snap(MB)_Vcopy,Total(MB)_Vcopy,Total(MB)_Used,Total(MB)_Rsvd,Total(MB)_HostWr,Total(MB)_VirtualSize,KB/s)_Compr_GC,Efficiency_Compact,Efficiency_Compress"
		}
		else
		{
			$rangestart = "2"
			#Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,RawRsvd(MB)_User,RawRsvd(MB)_Snap,RawRsvd(MB)_Total,User(MB)_Used,User(MB)_Free,User(MB)_Rsvd,Snap(MB)_Used,Snap(MB)_Free,Snap(MB)_Rsvd,Snap(MB)_Vcopy,Admin(MB)_Used,Admin(MB)_Free,Admin(MB)_Rsvd,Admin(MB)_Vcopy,Total(MB)_VcopyTotal(MB)_Used,Total(MB)_Rsvd,Total(MB)_VirtualSize,CapacityEfficiency_Compaction,CapacityEfficiency_Dedup"
			Add-Content -Path $tempFile -Value "Date,Time,TimeZone,Secs,RawRsvd(MB)_User,RawRsvd(MB)_Snap,RawRsvd(MB)_Total,User(MB)_Used,User(MB)_Free,User(MB)_Rsvd,Snap(MB)_Used,Snap(MB)_Free,Snap(MB)_Rsvd,Snap(MB)_Vcopy,Total(MB)_Vcopy,Total(MB)_Used,Total(MB)_Rsvd,Total(MB)_HostWr,Total(MB)_VirtualSize,(KB/s)_Compr_GC,Efficiency_Compact,Efficiency_Compress"
		}
		
		write-debuglog "System reporter command => $srinfocmd" "INFO:"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $srinfocmd
		if($Result -contains "FAILURE")
		{
			del $tempFile
			return "FAILURE : $Result"
		}
		$range1  = $Result.count
		#write-host "count = $range1"		
		if($range1 -le "3")
		{
			del $tempFile
			return "No data available"
		}
		foreach ($s in  $Result[$rangestart..$range1] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return "Current 3par version $3parosver does not support these cmdlet"
	}
}
#### End Get-3parSRVVSpace ####

#### End SR Commands
####################################################################################################################
## FUNCTION Find-3parCage
####################################################################################################################
Function Find-3parCage
{
<#
  .SYNOPSIS
   The Find-3parCage command allows system administrators to locate a drive cage, drive magazine, or port in the system using the devices’ blinking LEDs.
 
 .DESCRIPTION
   Note : This cmdlet (Find-3parCage) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Find-Cage) instead.
 
   The Find-3parCage command allows system administrators to locate a drive cage, drive magazine, or port in the system using the devices’ blinking LEDs. 
	
  .EXAMPLE
	Find-3parCage -Time 30 -CageName cage0	
	This example causes the Fibre Channel LEDs on the drive CageName cage0 to blink for 30 seconds.
   
  .EXAMPLE  
	Find-3parCage -Time 30 -CageName cage0 -mag 3	
	This example causes the Fibre Channel LEDs on the drive CageName cage0 to blink for 30 seconds,Indicates the drive magazine by number 3.
   
  .EXAMPLE  
	Find-3parCage -Time 30 -CageName cage0 -PortName demo1	
	This example causes the Fibre Channel LEDs on the drive CageName cage0 to blink for 30 seconds, If a port is specified, the port LED will oscillate between green and off.
	
  .EXAMPLE  	
	Find-3parCage -CageName cage1 -Mag 2	
	This example causes the Fibre Channel LEDs on the drive CageName cage1 to blink, Indicates the drive magazine by number 2.	
		
  .PARAMETER Time 
	Specifies the number of seconds, from 0 through 255 seconds, to blink the LED. 
	If the argument is not specified, the option defaults to 60 seconds.
  
  .PARAMETER CageName 
	Specifies the drive cage name as shown in the Name column of Get-3parCage command output.
	
  .PARAMETER ModuleName
	Indicates the module name to locate. Accepted values are
	pcm|iom|drive. The iom specifier is not supported for node enclosures.

  .PARAMETER ModuleNumber
	Indicates the module number to locate. The cage and module number can be found
	by issuing showcage -d <cage_name>.
	
  .PARAMETER Mag 
	Indicates the drive magazine by number.
	• For DC1 drive cages, accepted values are 0 through 4.
	• For DC2 and DC4 drive cages, accepted values are 0 through 9.
	• For DC3 drive cages, accepted values are 0 through 15.
		
  .PARAMETER PortName  
	Indicates the port specifiers. Accepted values are A0|B0|A1|B1|A2|B2|A3|B3. 
	If a port is specified, the port LED will oscillate between green and off.
    
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME:  Find-3parCage
    LASTEDIT: 08/05/2015
    KEYWORDS: Find-3parCage
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Time,
		
		[Parameter(Position=1, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$CageName,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$ModuleName,
		
		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$ModuleNumber,
		
		[Parameter(Position=4, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Mag,
		
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$PortName,
				
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Find-3parCage   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Find-3parCage   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Find-3parCage since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd= "locatecage "	
	
	if ($time)
	{
		$s = 0..255
		$demo = $time
		if($s -match $demo)
		{
			$str="time"
			$cmd+=" -t $time"
		}
		else
		{
			return " Error : -time $time is Not valid use seconds, from 0 through 255 Only "
		}
	}
	if ($CageName)
	{
		$cmd2="showcage "
		$Result2 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd2
		if($Result2 -match $CageName)
		{
			$cmd+=" $CageName"
		}
		else
		{
		Write-DebugLog "Stop: Exiting Find-3parCage $CageName Not available "
		return "FAILURE : -CageName $CageName  is Unavailable `n Try using [Get-3parCage] Command "
		}
	}
	else
	{
		Write-DebugLog "Stop: CageName is mandatory" $Debug
		return "Error :  -CageName is mandatory. "
	}
	if ($ModuleName)
	{		
		$cmd+=" $ModuleName"		
	}	
	if ($ModuleNumber)
	{		
		$cmd+=" $ModuleNumber"		
	}
	if ($Mag)
	{
		$a = 0..15
		$demo = $Mag
		if($a -match $demo)
		{
		$str="mag"
		$cmd +=" $Mag"
		}
		else
		{
			return "Error : -Mag $Mag is Not valid use seconds,from 0 through 15 Only"		
		}
	}	
	if ($PortName)
	{
		$s=$str
		if ($s -match "mag" )
		{
			return "FAILURE : -Mag $Mag cannot be used along with  -PortName $PortName "
		}
		else
		{	
			$a = $PortName
			$b = "A0","B0","A1","B1","A2","B2","A3","B3"
			if($b -eq $a)
			{
				$cmd +=" $PortName"
			}
			else
			{
				return "Error : -PortName $PortName is invalid use [ A0| B0 | A1 | B1 | A2 | B2 | A3 | B3 ] only  "
			}
		}	
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Find-3parCage Command , surface scans or diagnostics on physical disks with the command   " "INFO:" 	
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Find-3parCage Command Executed Successfully $Result"
	}
	else
	{
		return  "FAILURE : While Executing Find-3parCage `n $Result"
	} 		
}
# End Find-3parCage
####################################################################################################################
## FUNCTION Set-3parCage
####################################################################################################################
Function Set-3parCage
{
<#
  .SYNOPSIS
   The Set-3parCage command enables service personnel to set or modify parameters for a drive cage.
   
 .DESCRIPTION
  Note : This cmdlet (Set-3parCage) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Cage) instead.
 
  The Set-3parCage command enables service personnel to set or modify parameters for a drive cage.
  	
  .EXAMPLE
	Set-3parCage -Position left -CageName cage1
	This example demonstrates how to assign cage1 a position description of Side Left.

  .EXAMPLE
	Set-3parCage -Position left -PSModel 1 -CageName cage1
    This  example demonstrates how to assign model names to the power supplies in cage1. Inthisexample, cage1 hastwopowersupplies(0 and 1).
				
  .PARAMETER Position  
	Sets a description for the position of the cage in the cabinet, where <position> is a description to be assigned by service personnel (for example, left-top)
  
  .PARAMETER PSModel	  
	Sets the model of a cage power supply, where <model> is a model name to be assigned to the power supply by service personnel.
	get information regarding PSModel try using  [ Get-3parCage -option d ]
	
  
  .PARAMETER CageName	 
	Indicates the name of the drive cage that is the object of the setcage operation.	
	
  .Notes
    NAME:  Set-3parCage
    LASTEDIT: 08/05/2015
    KEYWORDS: Set-3parCage
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Position,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$PSModel,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$CageName,
			
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)	
	Write-DebugLog "Start: In Set-3parCage  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parCage   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parCage   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "setcage "
	if ($Position )
	{
		$cmd+="position $Position "
	}		
	if ($PSModel)
	{
		$cmd2="showcage -d"
		$Result2 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd2
		if($Result2 -match $PSModel)
		{
			$cmd+=" ps $PSModel "
		}	
		else
		{
			Write-DebugLog "Stop: Exiting  Set-3parCage -PSModel $PSModel is Not available "
			return "Failure: -PSModel $PSModel is Not available. To Find Available Model `n Try  [Get-3parCage -option d ] Command"
		}
	}		
	if ($CageName)
	{
		$cmd1="showcage"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
		if($Result1 -match $CageName)
		{
			$cmd +="$CageName "
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Set-3parCage -CageName $CageName is Not available "
			return "Failure:  -CageName $CageName is Not available `n Try using [ Get-3parCage ] Command to get list of Cage Name "
		}	
	}	
	else
	{
		Write-DebugLog "Stop: Exiting  Set-3parCage NO parameters is passed CageName is mandatory "
		return "ERROR: -CageName is a required parameter"
	}		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Set-3parCage command enables service personnel to set or modify parameters for a drive cage  " "INFO:" 		
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parCage Command $Result "
	}
	else
	{
		return  "FAILURE : While Executing Set-3parCage $Result"
	} 		
} # End Set-3parCage	
####################################################################################################################
## FUNCTION Set-3parPD
####################################################################################################################

Function Set-3parPD
{
<#
  .SYNOPSIS
   The Set-3parPD command marks a Physical Disk (PD) as allocatable or non allocatable for Logical   Disks (LDs).
   
  .DESCRIPTION
   Note : This cmdlet (Set-3parPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-PD) instead.
  
   The Set-3parPD command marks a Physical Disk (PD) as allocatable or non allocatable for Logical   Disks (LDs).   
	
  .EXAMPLE
	Set-3parPD -Ldalloc off -PD_ID 20	
	displays PD 20 marked as non allocatable for LDs.
   
  .EXAMPLE  
	Set-3parPD -Ldalloc on -PD_ID 25	
	displays PD 25 marked as allocatable for LDs.
   		
  .PARAMETER ldalloc 
	Specifies that the PD, as indicated with the PD_ID specifier, is either allocatable (on) or nonallocatable for LDs (off).
  	
  .PARAMETER PD_ID 
	Specifies the PD identification using an integer.	
     
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3parPD
    LASTEDIT: 08/05/2015
    KEYWORDS: Set-3parPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Ldalloc,
		
		[Parameter(Position=1, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$PD_ID,
			
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Set-3parPD   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parPD   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parPD   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "setpd "	
	if ($Ldalloc)
	{
		$a = "on","off"
		$l=$Ldalloc
		if($a -eq $l)
		{
			$cmd+=" ldalloc $Ldalloc "	
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting Set-3parPD  since -Ldalloc in incorrect "
			return "FAILURE : -Ldalloc $Ldalloc cannot be used only [on|off] can be used . "
		}
	}
	else
	{
		Write-DebugLog "Stop: Ldalloc is mandatory" $Debug
		return "Error :  -Ldalloc is mandatory. "		
	}		
	if ($PD_ID)
	{
		$PD=$PD_ID
		if($PD -gt 4095)
		{ 
			Write-DebugLog "Stop: Exiting Set-3parPD  since  -PD_ID $PD_ID Illegal integer argument "
			return "FAILURE : -PD_ID $PD_ID Illegal integer argument . Expected range [0-4095].  "
		}
		$cmd+=" $PD_ID "
	}
	else
	{
		Write-DebugLog "Stop: PD_ID is mandatory" $Debug
		return "Error :  -PD_ID is mandatory. "		
	}		
	if ($cmd -eq "setpd ")
	{
		Write-DebugLog "FAILURE : Set-3parPD Should be used with Parameters, No parameters passed."
		return get-help  Set-3parPD 
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	
	write-debuglog "  Executing Set-3parPD Physical Disk (PD) as allocatable or non allocatable for Logical Disks (LDs). with the command  " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parPD  $Result"
	}
	else
	{
		return  "FAILURE : While Executing Set-3parPD $Result "
	} 	
} # End Set-3parPD	
###################################################################################################################
## FUNCTION Get-3parCage
####################################################################################################################

Function Get-3parCage
{
<#
  .SYNOPSIS
   The Get-3parCage command displays information about drive cages.
   
  .DESCRIPTION
   Note : This cmdlet (Get-3parCage) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Cage) instead.
  
   The Get-3parCage command displays information about drive cages.    
	
  .EXAMPLE
	Get-3parCage
	This examples display information for a single system’s drive cages.
   
  .EXAMPLE  
	Get-3parCage -D -CageName cage2
	Specifies that more detailed information about the drive cage is displayed
	
  .EXAMPLE  
	Get-3parCage -I -CageName cage2
	Specifies that inventory information about the drive cage is displayed. 
   		 
  .PARAMETER D
	Specifies that more detailed information about the drive cage is displayed. If this option is not
	used, then only summary information about the drive cages is displayed. 
		
  .PARAMETER E  
	Displays error information.
	
  .PARAMETER C  
	Specifies to use cached information. This option displays information faster because the cage does
	not need to be probed, however, some information might not be up-to-date without that probe.

  .PARAMETER SFP  
	Specifies information about the SFP(s) attached to a cage. Currently, additional SFP information
	can only be displayed for DC2 and DC4 cages.
			
  .PARAMETER I	
	Specifies that inventory information about the drive cage is displayed. If this option is not used,
	then only summary information about the drive cages is displayed.

  .PARAMETER DDm
	Specifies the SFP DDM information. This option can only be used with the
	-sfp option and cannot be used with the -d option.

	
  .PARAMETER SVC
  Displays inventory information with HPE serial number, spare part number, and so on. it is supported only on HPE 3PAR StoreServ 7000 Storagesystems and  HPE 3PAR 8000 series systems"
  
  .PARAMETER CageName  
	Specifies a drive cage name for which information is displayed. This specifier can be repeated to display information for multiple cages
      
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parCage
    LASTEDIT: 08/06/2015
    KEYWORDS: Get-3parCage
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[Switch]
		$D,
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$E,
		
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$C,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$SFP,
		
		[Parameter(Position=4, Mandatory=$false)]
		[Switch]
		$DDM,
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$I,
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$SVC,
		
		[Parameter(Position=7, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$CageName,
			
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Get-3parCage   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parCage   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parCage   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "showcage "
	$testCmd= "showcage "
	
	if($D)
	{ 
		$cmd +=" -d " 
	}
	if($E) 
	{ 
		$cmd +=" -e "
	}
	if($C) 
	{ 
		$cmd +=" -c "
	}
	if($SFP) 
	{ 
		$cmd +=" -sfp " 
	}
	if($DDM) 
	{ 
		$cmd +=" -ddm " 
	}
	if($I) 
	{ 
		$cmd +=" -i " 
	}
	if($SVC) 
	{ 
		$cmd +=" -svc -i" 
	}
	if ($CageName) 
	{ 
		$cmd+=" $CageName "
		$testCmd+=" $CageName "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Get-3parCage command that displays information about drive cages. with the command   " "INFO:" 
	
	if($cmd -eq "showcage " -or ($cmd -eq $testCmd))
	{
		if($Result.Count -gt 1)
		{	
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count 
			#Write-Host " Result Count =" $Result.Count
			foreach ($s in  $Result[0..$LastItem] )
			{		
				$s= [regex]::Replace($s,"^ ","")			
				$s= [regex]::Replace($s," +",",")	
				#$s= [regex]::Replace($s,"-","")
				$s= $s.Trim() 	
				Add-Content -Path $tempFile -Value $s
				#Write-Host	" First if statement $s"		
			}
			Import-Csv $tempFile 
			del $tempFile
			Return  " Success : Executing Get-3parCage"
		}
		else
		{
			Return  " FAILURE : While Executing Get-3parCage `n $Result"		
		}		
	}
	
	if($Result -match "Cage" )
	{
		$result	
		Return  " Success : Executing Get-3parCage"
	} 
	else
	{
		Return  " FAILURE : While Executing Get-3parCage `n $Result"
	} 
 } # End Get-3parCage
####################################################################################################################
## FUNCTION Get-3parPD
####################################################################################################################
Function Get-3parPD
{
<#
  .SYNOPSIS
	The Get-3parPD command displays configuration information about the physical disks (PDs) on a system. 

  .DESCRIPTION
    Note : This cmdlet (Get-3parPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-PD) instead.
  
	The Get-3parPD command displays configuration information about the physical disks (PDs) on a system. 
   
  .EXAMPLE  
	get-3parPD
	This example displays configuration information about all the physical disks (PDs) on a system. 
	
  .EXAMPLE  
	get-3parPD -PD_ID 5
	This example displays configuration information about specific or given physical disks (PDs) on a system. 
	
  .EXAMPLE  
	get-3parPD -C 
	This example displays chunklet use information for all disks. 
	
  .EXAMPLE  
	get-3parPD -C -PD_ID 5
	This example will display chunklet use information for all disks with the physical disk ID. 

  .EXAMPLE  
	get-3parPD -Node 0 -PD_ID 5
	
  .EXAMPLE  
	get-3parPD -I -Pattern -ND 1 -PD_ID 5

  .EXAMPLE
	Get-3parPD -C -Pattern -Devtype FC  	

  .EXAMPLE  
	get-3parPD -option p -pattern mg -patternValue 0
	TThis example will display all the FC disks in magazine 0 of all cages.
 
  .PARAMETER Listcols
	List the columns available to be shown in the -showcols option
	described below (see 'clihelp -col showpd' for help on each column).

  .PARAMETER I
	Show disk inventory (inquiry) data.

	The following columns are shown:
	Id CagePos State Node_WWN MFR Model Serial FW_Rev Protocol MediaType AdmissionTime.

  .PARAMETER E
	Show disk environment and error information. Note that reading this
	information places a significant load on each disk.

	The following columns are shown:
	Id CagePos Type State Rd_CErr Rd_UErr Wr_CErr Wr_UErr Temp_DegC
	LifeLeft_PCT.

  .PARAMETER C
	Show chunklet usage information. Any chunklet in a failed disk will be
	shown as "Fail".

	The following columns are shown:
	Id CagePos Type State Total_Chunk Nrm_Used_OK Nrm_Used_Fail
	Nrm_Unused_Free Nrm_Unused_Uninit Nrm_Unused_Unavail Nrm_Unused_Fail
	Spr_Used_OK Spr_Used_Fail Spr_Unused_Free Spr_Unused_Uninit Spr_Unused_Fail.

  .PARAMETER S
	Show detailed state information.
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER State
	Show detailed state information. This is the same as -s.

	The following columns are shown:
	Id CagePos Type State Detailed_State SedState.

  .PARAMETER Path
	Show current and saved path information for disks.

	The following columns are shown:
	Id CagePos Type State Path_A0 Path_A1 Path_B0 Path_B1 Order.

  .PARAMETER Space
	Show disk capacity usage information (in MB).

	The following columns are shown:
	Id CagePos Type State Size_MB Volume_MB Spare_MB Free_MB Unavail_MB
	Failed_MB.

  .PARAMETER Failed
	Specifies that only failed physical disks are displayed.

  .PARAMETER Degraded
	Specifies that only degraded physical disks are displayed. If both
	-failed and -degraded are specified, the command shows failed disks and
	degraded disks.

  .PARAMETER Pattern
	Physical disks matching the specified pattern are displayed.

  .PARAMETER ND
	Specifies one or more nodes. Nodes are identified by one or more
	integers (item). Multiple nodes are separated with a single comma
	(e.g. 1,2,3). A range of nodes is separated with a hyphen (e.g. 0-
	7). The primary path of the disks must be on the specified node(s).
			
  .PARAMETER ST
	Specifies one or more PCI slots. Slots are identified by one or more
	integers (item). Multiple slots are separated with a single comma
	(e.g. 1,2,3). A range of slots is separated with a hyphen (e.g. 0-
	7). The primary path of the disks must be on the specified PCI
	slot(s).
			
  .PARAMETER PT
	Specifies one or more ports. Ports are identified by one or more
	integers (item). Multiple ports are separated with a single comma
	(e.g. 1,2,3). A range of ports is separated with a hyphen (e.g. 0-
	4). The primary path of the disks must be on the specified port(s).
			
  .PARAMETER CG
	Specifies one or more drive cages. Drive cages are identified by one
	or more integers (item). Multiple drive cages are separated with a
	single comma (e.g. 1,2,3). A range of drive cages is separated with
	a hyphen (e.g. 0-3). The specified drive cage(s) must contain disks.
	
  .PARAMETER MG
	Specifies one or more drive magazines. The "1." or "0." displayed
	in the CagePos column of showpd output indicating the side of the
	cage is omitted when using the -mg option. Drive magazines are
	identified by one or more integers (item). Multiple drive magazines
	are separated with a single comma (e.g. 1,2,3). A range of drive
	magazines is separated with a hyphen(e.g. 0-7). The specified drive
	magazine(s) must contain disks.
			
  .PARAMETER PN
	Specifies one or more disk positions within a drive magazine. Disk
	positions are identified by one or more integers (item). Multiple
	disk positions are separated with a single comma(e.g. 1,2,3). A
	range of disk positions is separated with a hyphen(e.g. 0-3). The
	specified position(s) must contain disks.
			
  .PARAMETER DK
	Specifies one or more physical disks. Disks are identified by one or
	more integers(item). Multiple disks are separated with a single
	comma (e.g. 1,2,3). A range of disks is separated with a hyphen(e.g.
	0-3).  Disks must match the specified ID(s).
			
  .PARAMETER Devtype
	Specifies that physical disks must have the specified device type
	(FC for Fast Class, NL for Nearline, SSD for Solid State Drive)
	to be used. Device types can be displayed by issuing the "showpd"
	command.
			
  .PARAMETER RPM
	Drives must be of the specified relative performance metric, as
	shown in the "RPM" column of the "showpd" command.
	The number does not represent a rotational speed for the drives
	without spinning media (SSD). It is meant as a rough estimation of
	the performance difference between the drive and the other drives
	in the system.  For FC and NL drives, the number corresponds to
	both a performance measure and actual rotational speed. For SSD
	drives, the number is to be treated as a relative performance
	benchmark that takes into account I/O's per second, bandwidth and
	access time.

  .PARAMETER Node
	Specifies that the display is limited to specified nodes and physical
	disks connected to those nodes. The node list is specified as a series
	of integers separated by commas (e.g. 1,2,3). The list can also consist
	of a single integer. If the node list is not specified, all disks on all
	nodes are displayed.

  .PARAMETER Slots
	Specifies that the display is limited to specified PCI slots and
	physical disks connected to those PCI slots. The slot list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the slot list is not specified, all
	disks on all slots are displayed.

  .PARAMETER Ports
	Specifies that the display is limited to specified ports and
	physical disks connected to those ports. The port list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the port list is not specified, all
	disks on all ports are displayed.

  .PARAMETER WWN
	Specifies the WWN of the physical disk. This option and argument can be
	specified if the <PD_ID> specifier is not used. This option should be
	the last option in the command line.

 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parPD
    LASTEDIT: 21/09/2017
    KEYWORDS: Get-3parPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$I,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$E,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$C,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$StateInfo,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$State,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$Path,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$Space,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$Failed,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$Degraded,
		
		[Parameter(Position=9, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Node ,
		
		[Parameter(Position=10, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Slots ,
		
		[Parameter(Position=11, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Ports ,
		
		[Parameter(Position=12, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$WWN ,
		
		[Parameter(Position=13, Mandatory=$false)]
		[switch]
		$Pattern,
		
		[Parameter(Position=14, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$ND ,
		
		[Parameter(Position=15, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$ST ,
		
		[Parameter(Position=16, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$PT ,
		
		[Parameter(Position=17, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$CG ,
		
		[Parameter(Position=18, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$MG ,
		
		[Parameter(Position=19, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$PN ,
		
		[Parameter(Position=20, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$DK ,
		
		[Parameter(Position=21, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Devtype ,
		
		[Parameter(Position=22, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$RPM ,
		
		[Parameter(Position=23, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$PD_ID ,

		[Parameter(Position=23, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$Listcols ,
			
		[Parameter(Position=24, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	Write-DebugLog "Start: In get-3parPD   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting get-3parPD   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting get-3parPD   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd= "showpd "	
	
	if($Listcols)
	{
		$cmd+=" -listcols "
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
		return $Result
	}
	if($I)
	{
		$cmd+=" -i "		
	}
	if($E)
	{
		$cmd+=" -e "		
	}
	if($C)
	{
		$cmd+=" -c "		
	}
	if($StateInfo)
	{
		$cmd+=" -s "		
	}
	if($State)
	{
		$cmd+=" -state "		
	}
	if($Path)
	{
		$cmd+=" -path "		
	}
	if($Space)
	{
		$cmd+=" -space "		
	}
	if($Failed)
	{
		$cmd+=" -failed "		
	}
	if($Degraded)
	{
		$cmd+=" -degraded "		
	}
	if($Node)
	{
		$cmd+=" -nodes $Node "		
	}
	if($Slots)
	{
		$cmd+=" -slots $Slots "		
	}
	if($Ports)
	{
		$cmd+=" -ports $Ports "		
	}
	if($WWN)
	{
		$cmd+=" -w $WWN "		
	}
	if($Pattern)
	{
		if($ND)
		{
			$cmd+=" -p -nd $ND "
		}
		if($ST)
		{
			$cmd+=" -p -st $ST "
		}
		if($PT)
		{
			$cmd+=" -p -pt $PT "
		}
		if($CG)
		{
			$cmd+=" -p -cg $CG "
		}
		if($MG)
		{
			$cmd+=" -p -mg $MG "
		}
		if($PN)
		{
			$cmd+=" -p -pn $PN "
		}
		if($DK)
		{
			$cmd+=" -p -dk $DK "
		}
		if($Devtype)
		{
			$cmd+=" -p -devtype $Devtype "
		}
		if($RPM)
		{
			$cmd+=" -p -rpm $RPM "
		}
	}		
	if ($PD_ID)
	{		
		$PD=$PD_ID		
		$pdd="showpd $PD"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $pdd	
		if($Result1 -match "No PDs listed" )
		{
			Write-DebugLog "Stop: Exiting Get-3parPD  since  -PD_ID $PD_ID is not available "
			return " FAILURE : $PD_ID is not available id pLease try using only [Get-3parPD] to get the list of PD_ID Available. "			
		}
		else 	
		{
			$cmd+=" $PD_ID "
		}
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	if($Result -match "Invalid device type")
	{
		write-host""
		return $Result
	}
	if($Result.Count -lt 2)
	{	
		write-host""
		return $Result
	}
	write-debuglog "  Executing  Get-3parCage command that displays information about drive cages. with the command  " "INFO:" 
	
	#this is for option i
	if($I -Or $State -Or $StateInfo)
	{
		$flag = "True"
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -3  
		#Write-Host " Result Count =" $Result.Count
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")	
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim()
			if($I)
			{
				if($flag -eq "True")
				{
					$sTemp1=$s
					$sTemp = $sTemp1.Split(',')
					$sTemp[10]="AdmissionDate,AdmissionTime,AdmissionZone" 				
					$newTemp= [regex]::Replace($sTemp," ",",")	
					$newTemp= $newTemp.Trim()
					$s=$newTemp
				}	
			}			
			Add-Content -Path $tempFile -Value $s
			$flag="false"		
		}				
		Import-Csv $tempFile 
		del $tempFile
	}
	ElseIf($C)
	{			
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -3  
		$incre = "true"			
		foreach ($s in  $Result[2..$LastItem] )
		{	
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim()				
			if($incre -eq "true")
			{
				$sTemp1=$s
				$sTemp = $sTemp1.Split(',')
				$sTemp[5]="OK(NormalChunklets)" 
				$sTemp[6]="Fail(NormalChunklets/Used)" 
				$sTemp[7]="Free(NormalChunklets)"
				$sTemp[8]="Uninit(NormalChunklets)"
				$sTemp[10]="Fail(NormalChunklets/UnUsed)"
				$sTemp[11]="OK(SpareChunklets)" 
				$sTemp[12]="Fail(SpareChunklets/Used)" 
				$sTemp[13]="Free(SpareChunklets)"
				$sTemp[14]="Uninit(SpareChunklets)"
				$sTemp[15]="Fail(SpareChunklets/UnUsed)"
				$newTemp= [regex]::Replace($sTemp," ",",")	
				$newTemp= $newTemp.Trim()
				$s=$newTemp
			}				
			Add-Content -Path $tempFile -Value $s
			#Write-Host	"$s"
			$incre="false"				
		}			
		Import-Csv $tempFile 
		del $tempFile
	}
	ElseIf($E)
	{			
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -3  
		$incre = "true"			
		foreach ($s in  $Result[1..$LastItem] )
		{	
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim()				
			if($incre -eq "true")
			{
				$sTemp1=$s
				$sTemp = $sTemp1.Split(',')
				$sTemp[4]="Corr(ReadError)" 
				$sTemp[5]="UnCorr(ReadError)" 
				$sTemp[6]="Corr(WriteError)"
				$sTemp[7]="UnCorr(WriteError)"
				$newTemp= [regex]::Replace($sTemp," ",",")	
				$newTemp= $newTemp.Trim()
				$s=$newTemp
			}				
			Add-Content -Path $tempFile -Value $s
			#Write-Host	"$s"
			$incre="false"				
		}
			
		Import-Csv $tempFile 
		del $tempFile
	}
	else
	{
		if($Result -match "Id")
		{
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count -3  
			#Write-Host " Result Count =" $Result.Count
			foreach ($s in  $Result[1..$LastItem] )
			{		
				$s= [regex]::Replace($s,"^ ","")			
				$s= [regex]::Replace($s," +",",")
				$s= [regex]::Replace($s,"-","")
				$s= $s.Trim() 	
				Add-Content -Path $tempFile -Value $s
				#Write-Host	" only else statement"		
			}
			write-host ""
			if($Space)
			{
				write-host "Size | Volume | Spare | Free | Unavail & Failed values are in (MiB)."
			}
			else
			{
				write-host "Total and Free values are in (MiB)."
			}				
			Import-Csv $tempFile 
			del $tempFile
		}
	}		
	if($Result.Count -gt 1)
	{	
		return "Success : Command Get-3parPD execute Successfully."
	}
	else
	{
		return $Result		
	} 	
} # End Get-3parPD
 
 ####################################################################################################################
## FUNCTION Approve-3parPD
####################################################################################################################
Function Approve-3parPD
{
<#
  .SYNOPSIS
    The Approve-3parPD command creates and admits physical disk definitions to enable the use of those disks.
	
  .DESCRIPTION
    Note : This cmdlet (Approve-3parPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-AdmitsPD) instead.
  
    The Approve-3parPD command creates and admits physical disk definitions to enable the use of those disks.
	
  .EXAMPLE
   Approve-3parPD 
   This example admits physical disks.
   
  .EXAMPLE
   Approve-3parPD -Nold
   Do not use the PD (as identified by the <world_wide_name> specifier) For logical disk allocation.
   
  .EXAMPLE
   Approve-3parPD -NoPatch
   Suppresses the check for drive table update packages for new hardware enablement.

  .EXAMPLE  	
	Approve-3parPD -Nold -wwn xyz
	Do not use the PD (as identified by the <world_wide_name> specifier) For logical disk allocation.
		
  .PARAMETER Nold
	Do not use the PD (as identified by the <world_wide_name> specifier)
	for logical disk allocation.

  .PARAMETER Nopatch
	Suppresses the check for drive table update packages for new
	hardware enablement.

  .PARAMETER wwn
	Indicates the World-Wide Name (WWN) of the physical disk to be admitted. If WWNs are
	specified, only the specified physical disk(s) are admitted.	
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Approve-3parPD
    LASTEDIT: 08/04/2015
    KEYWORDS: Approve-3parPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Nold,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$NoPatch,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$wwn,		
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)	
	
	Write-DebugLog "Start: In Approve-3parPD   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Approve-3parPD   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Approve-3parPD   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "admitpd -f  "
	
	
	if ($Nold)
	{	
		$cmd+=" -nold "		
	}	
	if ($NoPatch)
	{	
		$cmd+=" -nopatch "		
	}
	if($wwn)
	{
		$cmd += " $wwn"		
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Approve-3parPD command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Approve-3parPD

####################################################################################################################
## FUNCTION Test-3parPD
####################################################################################################################

Function Test-3parPD
{
<#
  .SYNOPSIS
    The Test-3parPD command executes surface scans or diagnostics on physical disks.
	
  .DESCRIPTION
    Note : This cmdlet (Test-3parPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Test-PD) instead.
  
    The Test-3parPD command executes surface scans or diagnostics on physical disks.	
	
  .EXAMPLE
	Test-3parPD -specifier scrub -ch 500 -pd_ID 1
	This example Test-3parPD chunklet 500 on physical disk 1 is scanned for media defects.
   
  .EXAMPLE  
	Test-3parPD -specifier scrub -count 150 -pd_ID 1
	This example scans a number of chunklets starting from -ch 150 on physical disk 1.
   
  .EXAMPLE  
	Test-3parPD -specifier diag -path a -pd_ID 5
	This example Specifies a physical disk path as a,physical disk 5 is scanned for media defects.
		
  .EXAMPLE  	
	Test-3parPD -specifier diag -iosize 1s -pd_ID 3
	This example Specifies I/O size 1s, physical disk 3 is scanned for media defects.
	
  .EXAMPLE  	
	Test-3parPD -specifier diag -range 5m  -pd_ID 3
	This example Limits diagnostic to range 5m [mb] physical disk 3 is scanned for media defects.
		
  .PARAMETER specifier	
	scrub - Scans one or more chunklets for media defects.
	diag - Performs read, write, or verifies test diagnostics.
  
  .PARAMETER ch
	To scan a specific chunklet rather than the entire disk.
  
  .PARAMETER count
	To scan a number of chunklets starting from -ch.
  
  .PARAMETER path
	Specifies a physical disk path as [a|b|both|system].
  
  .PARAMETER test
	Specifies [read|write|verify] test diagnostics. If no type is specified, the default is read .

  .PARAMETER iosize
	Specifies I/O size, valid ranges are from 1s to 1m. If no size is specified, the default is 128k .
	 
  .PARAMETER range
	Limits diagnostic regions to a specified size, from 2m to 2g.
	
  .PARAMETER pd_ID
	The ID of the physical disk to be checked. Only one pd_ID can be specified for the “scrub” test.
	
  .PARAMETER threads
	Specifies number of I/O threads, valid ranges are from 1 to 4. If the number of threads is not specified, the default is 1.
	
  .PARAMETER time
	Indicates the number of seconds to run, from 1 to 36000.
	
  .PARAMETER total
	Indicates total bytes to transfer per disk. If a size is not specified, the default size is 1g.
	
  .PARAMETER retry
	 Specifies the total number of retries on an I/O error.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Test-3parPD
    LASTEDIT: 08/04/2015
    KEYWORDS: Test-3parPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$specifier,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$ch,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$count,
		
		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$path,
		
		[Parameter(Position=4, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$test,
		
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$iosize,
		
		[Parameter(Position=6, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$range,
		
		[Parameter(Position=7, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$threads,
		
		[Parameter(Position=8, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$time,
		
		[Parameter(Position=9, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$total,
		
		[Parameter(Position=10, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$retry,
		
		[Parameter(Position=11, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$pd_ID,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Test-3parPD   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Test-3parPD   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Test-3parPD   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "checkpd "	
	if ($specifier)
	{
		$spe = $specifier
		$demo = "scrub" , "diag"
		if($demo -eq $spe)
		{
			$cmd+=" $spe "
		}
		else
		{
			return " FAILURE : $spe is not a Valid specifier please use [scrub | diag] only.  "
		}
	}
	else
	{
		return " FAILURE :  -specifier is mandatory for Test-3parPD to execute  "
	}		
	if ($ch)
	{
		$a=$ch
		[int]$b=$a
		if($a -eq $b)
		{
			if($cmd -match "scrub")
			{
				$cmd +=" -ch $ch "
			}
			else
			{
				return "FAILURE : -ch $ch cannot be used with -Specification diag "
			}
		}	
		else
		{
			Return "Error :  -ch $ch Only Integers are Accepted "
	
		}
	}	
	if ($count)
	{
		$a=$count
		[int]$b=$a
		if($a -eq $b)
		{	
			if($cmd -match "scrub")
			{
				$cmd +=" -count $count "
			}
			else
			{
				return "FAILURE : -count $count cannot be used with -Specification diag "
			}
		}
		else
		{
			Return "Error :  -count $count Only Integers are Accepted "	
		}
	}		
	if ($path)
	{
		if($cmd -match "diag")
		{
			$a = $path
			$b = "a","b","both","system"
			if($b -match $a)
			{
				$cmd +=" -path $path "
			}
			else
			{
				return "FAILURE : -path $path is invalid use [a | b | both | system ] only  "
			}
		}
		else
		{
			return " FAILURE : -path $path cannot be used with -Specification scrub "
		}
	}		
	if ($test)
	{
		if($cmd -match "diag")
		{
			$a = $test 
			$b = "read","write","verify"
			if($b -eq $a)
			{
				$cmd +=" -test $test "
			}
			else
			{
				return "FAILURE : -test $test is invalid use [ read | write | verify ] only  "
			}
		}
		else
		{
			return " FAILURE : -test $test cannot be used with -Specification scrub "
		}
	}			
	if ($iosize)
	{	
		if($cmd -match "diag")
		{
			$cmd +=" -iosize $iosize "
		}
		else
		{
			return "FAILURE : -test $test cannot be used with -Specification scrub "
		}
	}			 
	if ($range )
	{
		if($cmd -match "diag")
		{
			$cmd +=" -range $range "
		}
		else
		{
			return "FAILURE : -range $range cannot be used with -Specification scrub "
		}
	}	
	if ($threads )
	{
		if($cmd -match "diag")
		{
			$cmd +=" -threads $threads "
		}
		else
		{
			return "FAILURE : -threads $threads cannot be used with -Specification scrub "
		}
	}
	if ($time )
	{
		if($cmd -match "diag")
		{
			$cmd +=" -time $time "
		}
		else
		{
			return "FAILURE : -time $time cannot be used with -Specification scrub "
		}
	}
	if ($total )
	{
		if($cmd -match "diag")
		{
			$cmd +=" -total $total "
		}
		else
		{
			return "FAILURE : -total $total cannot be used with -Specification scrub "
		}
	}
	if ($retry )
	{
		if($cmd -match "diag")
		{
			$cmd +=" -retry $retry "
		}
		else
		{
			return "FAILURE : -retry $retry cannot be used with -Specification scrub "
		}
	}
	if($pd_ID)
	{	
		$cmd += " $pd_ID "
	}
	else
	{
		return " FAILURE :  pd_ID is mandatory for Test-3parPD to execute  "
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing surface scans or diagnostics on physical disks with the command  " "INFO:" 
	return $Result	
} # End Test-3parPD

####################################################################################################################
## FUNCTION Set-3parStatpdch
#####################################################################################################################

Function Set-3parStatpdch
{
<#
  .SYNOPSIS
    The Set-3parStatpdch command starts and stops the statistics collection mode for chunklets.

  .DESCRIPTION
    Note : This cmdlet (Set-3parStatpdch) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-StatPdch) instead.
  
    The Set-3parStatpdch command starts and stops the statistics collection mode for chunklets.
 
  .EXAMPLE
   Set-3parStatpdch -Start -PD_ID 2
   This Example sets the statistics collection mode for all in-use chunklets on a Physical Disk (PD) 2.

  
  .PARAMETER Start  
    Specifies that the collection of statistics is either started or stopped for the specified Logical Disk
	(LD) and chunklet.
	
  .PARAMETER Stop  
    Specifies that the collection of statistics is either started or stopped for the specified Logical Disk
	(LD) and chunklet.
	
  .PARAMETER PD_ID   
    Specifies the PD ID.

	 .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3parStatpdch
    LASTEDIT: 07/28/2015
    KEYWORDS: Set-3parStatpdch
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$Start,
		
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$Stop,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$PD_ID,		
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)			
	Write-DebugLog "Start: In Set-3parStatpdch   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parStatpdch   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parStatpdch  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd1 = "setstatpdch "
	if ($Start)
	{
		$cmd1 += " start "
	}
	if ($Stop)
	{
		$cmd1 += " stop "
	}
	if($PD_ID)
	{
		$cmd2="showpd"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd2
		if($Result1 -match $PD_ID)
		{
			$cmd1 += " $PD_ID "
		}
		Else
		{
			write-debuglog "PD_ID parameter $PD_ID is Unavailable. Simply return " "INFO:"
			return "Error:  PD_ID   is Invalid ."
		}		
	}
	else
	{
		write-debuglog "PD_ID parameter $PD_ID is empty. Simply return " "INFO:"
		return "Error : PD_ID is mandatory . Command is not successful "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
	write-debuglog "  The Set-3parStatpdch command starts and stops the statistics collection mode for chunklets.->$cmd" "INFO:"
	if([string]::IsNullOrEmpty($Result))
	{
		$Result
		return  "Success : Executing Set-3parStatpdch 	 "
	}
	else
	{
		$Result
		return  "FAILURE : While Executing Set-3parStatpdch 	"
	} 
} # End Set-3parStatpdch 
 
####################################################################################################################
## FUNCTION Set-3parstatch
####################################################################################################################
Function Set-3parstatch
{
<#
  .SYNOPSIS
    The Set-3parstatch command sets the statistics collection mode for all in-use chunklets on a Physical Disk (PD).
  
  .DESCRIPTION
   Note : This cmdlet (Set-3parstatch  ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Statch) instead.
  
   The Set-3parstatch command sets the statistics collection mode for all in-use chunklets on a Physical Disk (PD).
  
  .EXAMPLE 
	Set-3parstatch -Start -LDname test1 -CLnum 1  
	This example starts and stops the statistics collection mode for chunklets.with the LD name test1.
	
  .PARAMETER Start  
    Specifies that the collection of statistics is either started or stopped for the specified Logical Disk
	(LD) and chunklet.
	
  .PARAMETER Stop  
    Specifies that the collection of statistics is either started or stopped for the specified Logical Disk
	(LD) and chunklet.
	
  .PARAMETER LDname 	
	Specifies the name of the logical disk in which the chunklet to be configured resides.
	
  .PARAMETER CLnum 	
	Specifies the chunklet that is configured using the setstatch command.	
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3parstatch
    LASTEDIT: 07/28/2015
    KEYWORDS: Set-3parstatch
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Start,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Stop,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$LDname,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$CLnum,	
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Set-3parstatch   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parstatch   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parstatch  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	
	$cmd1 = "setstatch "
	if ($Start)
	{
		$cmd1 += " start "
	}
	if ($Stop)
	{
		$cmd1 += " stop "
	}
	
	if($LDname)
	{
		$cmd2="showld"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd2
		if($Result1 -match $LDname)
		{
			$cmd1 += " $LDname "
		}
		Else
		{
			write-debuglog "LDname parameter is Unavailable. Simply return " "INFO:"
			return "Error:  LDname  is Invalid ."
		}
	}
	else
	{
		write-debuglog "-LDname parameter  is empty. Simply return " "INFO:"
		return "Error: -LDname parameter  is mandatory ."
	}
	if($CLnum)
	{
		$cmd1+="$CLnum"
	}
	else	
	{
		write-debuglog "-CLnum parameter is Unavailable. Simply return " "INFO:"
		return "Error: -CLnum parameter  is mandatory ."
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
	write-debuglog "   The Set-3parstatch command sets the statistics collection mode for all in-use chunklets on a Physical Disk (PD).->$cmd" "INFO:"
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Set-3parstatch $Result "
	}
	else
	{
		return  "FAILURE : While Executing Set-3parstatch $Result"
	} 
} # End Set-3parstatch  

####################################################################################################################
## FUNCTION Get-3parHistChunklet
#####################################################################################################################

Function Get-3parHistChunklet  
{
<#
  .SYNOPSIS
    The Get-3parHistChunklet command displays a histogram of service times in a timed loop for individual chunklets
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parHistChunklet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistChunklet) instead.
  
	The Get-3parHistChunklet command displays a histogram of service times in a timed loop for individual chunklets
        
  .EXAMPLE
  
    Get-3parHistChunklet -Iteration 1 
	This example displays one iteration of a histogram of service
		
  .EXAMPLE
    Get-3parHistChunklet –LDname dildil -Iteration 1 
	identified by name, from which chunklet statistics are sampled.
	
  .EXAMPLE
	Get-3parHistChunklet -Iteration 1 -Previous

  .PARAMETER Chunklet_num
	Specifies that statistics are limited to only the specified chunklet, identified
	by number.

  .PARAMETER Metric both|time|size
	Selects which metric to display. Metrics can be one of the following:
		both - (Default)Display both I/O time and I/O size histograms
		time - Display only the I/O time histogram
		size - Display only the I/O size histogram

  .PARAMETER Percentage
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Previous
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
		
  .PARAMETER Beginning
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.

  .PARAMETER RW
	Specifies that the display includes separate read and write data. If not
	specified, the total is displayed.

  .PARAMETER Interval
	Specifies the interval in seconds that statistics are sampled from
	using an integer from 1 through 2147483. If no count is specified, the
	command defaults to 2 seconds.

  .PARAMETER Iteration
	Specifies that the histogram is to stop after the indicated number of
	iterations using an integer from 1 through 2147483647.
		
  .PARAMETER NI
	Specifies that histograms for only non-idle devices are displayed. This
	option is shorthand for the option -filt t,0,0.

  .PARAMETER LDname 
    Specifies the Logical Disk (LD), identified by name, from which chunklet statistics are sampled.
 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parHistChunklet
    LASTEDIT: 07/21/2015
    KEYWORDS: Get-3parHistChunklet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(	
	    [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$LDname,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Chunklet_num,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Metric,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Iteration,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Percentage,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$Previous,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$Beginning,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$RW,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$Interval,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$NI,
			
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parHistChunklet - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{ 
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistChunklet since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistChunklet since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli 
	
	if($plinkresult -match "FAILURE :")	
	{
		Write-DebugLog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$histchCMD = "histch"
	
	if($Iteration )
	{
		$histchCMD+=" -iter $iteration"
	}
	else
	{
		return "Iteration is mandatory..."
	}
	if($LDname)
	{
		$histchCMD +=" -ld $LDname "
	}
	if($Chunklet_num)
	{
		$histchCMD +=" -ch $Chunklet_num "
	} 
	if($Metric)
	{
		$histchCMD +=" -metric $Metric "
	}
	if($Percentage)
	{
		$histchCMD +=" -pct "
	}
	if($Previous)
	{
		$histchCMD +=" -prev "
	}
	if($Beginning)
	{
		$histchCMD +=" -begin "
	}
	if($RW)
	{
		$histchCMD +=" -rw "
	}
	if($Interval)
	{
		$histchCMD +=" -d $Interval "
	}
	if($NI)
	{
		$histchCMD +=" -ni "
	}	
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $histchCMD
	
	$range1 = $Result.count
	
	if($range1 -le "5")
	{
		return "No data available Please try with valid input."
	}
	Write-DebugLog " displays a histogram of service -->$histchCMD "INFO:"" 
	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		
		$LastItem = $Result.Count		
		if($RW)
		{
			$LastItem = $LastItem - 4			
		}		
		Add-Content -Path $tempFile -Value 'Ldid,Ldname,logical_Disk_CH,Pdid,PdCh,0.5,1.0,2.0,4.0,8.0,16,32,64,128,256,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "millisec")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Ldname"))
			{
				continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "20")
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}	
}
#END Get-3parHistChunklet

####################################################################################################################
## FUNCTION Get-3parHistLD
####################################################################################################################
Function Get-3parHistLD
{
<#
  .SYNOPSIS
    The Get-3parHistLD command displays a histogram of service times for Logical Disks (LDs) in a timed loop.
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parHistLD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistLD) instead.
  
    The Get-3parHistLD command displays a histogram of service times for Logical Disks (LDs) in a timed loop.
        
  .EXAMPLE
    Get-3parHistLD -Iteration 1
	displays a histogram of service Iteration number of times
	
	 
  .EXAMPLE
	Get-3parHistLD -LdName abcd -Iteration 1
	displays a histogram of service linked with LD_NAME on  Iteration number of times
	
  .EXAMPLE
	Get-3parHistLD -Iteration 1 -VV_Name ZXZX
	Shows only logical disks that are mapped to virtual volumes with names
	matching any of the names or patterns specified.
	
  .EXAMPLE
	Get-3parHistLD -Iteration 1 -Domain ZXZX
    Shows only logical disks that are in domains with names matching any
	of the names or patterns specified.
	
  .EXAMPLE
	Get-3parHistLD -Iteration 1 -Percentage
	Shows the access count in each bucket as a percentage.

  .PARAMETER Timecols
	For the I/O time histogram, shows the columns from the first column
	<fcol> through last column <lcol>. The available columns range from 0
	through 31.

	The first column (<fcol>) must be a value greater than or equal to 0,
	but less than the value of the last column (<lcol>).

	The last column (<lcol>) must be less than or equal to 31.

	The first column includes all data accumulated for columns less than the
	first column and the last column includes accumulated data for all
	columns greater than the last column.

	The default value of <fcol> is 6.
	The default value of <lcol> is 15.

  .PARAMETER Sizecols
	For the I/O size histogram, shows the columns from the first column
	(<fcol>) through the last column (<lcol>). Available columns range from
	0 through 15.

	The first column (<fcol>) must be a value greater than or equal to 0,
	but less than the value of the last column (<lcol>) (default value of 3).
	The last column (<lcol>) must be less than or equal to 15 (default value
	of 11).

	The default value of <fcol> is 3.
	The default value of <lcol> is 11.

  .PARAMETER Percentage
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Secs
	Specifies the interval in seconds that statistics are sampled from
	using an integer from 1 through 2147483. If no count is specified, the
	command defaults to 2 seconds.

  .PARAMETER NI
	Specifies that histograms for only non-idle devices are displayed. This
	option is shorthand for the option -filt t,0,0.	
	
  .PARAMETER Iteration 
    displays a histogram of service Iteration number of times
  
  .PARAMETER LdName 
    displays a histogram of service linked with LD_NAME
	
  .PARAMETER VV_Name
	Shows only logical disks that are mapped to virtual volumes with names
	matching any of the names or patterns specified. Multiple volumes or
	patterns can be repeated using a comma separated list.

  .PARAMETER Domain
	Shows only logical disks that are in domains with names matching any
	of the names or patterns specified. Multiple domain names or patterns
	can be repeated using a comma separated list.

  .PARAMETER Metric
	Selects which metric to display. Metrics can be one of the following:
	both - (Default)Display both I/O time and I/O size histograms
	time - Display only the I/O time histogram
	size - Display only the I/O size histogram

  .PARAMETER Previous 
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
		
  .PARAMETER Beginning
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parHistLD
    LASTEDIT: 07/23/2015
    KEYWORDS: Get-3parHistLD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(	
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iteration,	

		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Metric,

		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$VV_Name,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Domain,
				
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Timecols,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Sizecols, 
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Percentage,
		
		[Parameter(Position=7, Mandatory=$false)]
		[Switch]
		$Previous,
		
		[Parameter(Position=8, Mandatory=$false)]
		[Switch]
		$Beginning,
		
		[Parameter(Position=9, Mandatory=$false)]
		[Switch]
		$NI,
		
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]
		$Secs,
				
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$LdName,
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parHistLD - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistLD since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistLD since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	$histldCmd = "histld "
	if ($Iteration)
	{
		$histldCmd += " -iter $Iteration "
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "		
	}
	if ($Metric)
	{
		$a = "both","time","size"
		$l=$Metric
		if($a -eq $l)
		{
			$histldCmd+=" -metric $Metric "						
		}
		else
		{ 			
			Return "FAILURE : -Metric $Metric is an Invalid Value Please used only [ both|time|size ]. "
		}
	}
	if($VV_Name)
	{
		$cmd= "showvv "
		$demo = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
		if($demo -match $VV_Name )
		{
			$histldCmd+=" -vv $VV_Name"
		}
		else
		{ 
			return  "FAILURE : No Virtual Volume : $VV_Name found, Please try with valid input."
		}		
	} 
	if($Domain)
	{		
		$cmd= "showdomain "
		$demo = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
		if($demo -match $Domain )
		{
			$histldCmd+=" -domain $Domain"
		}
		else
		{ 
			return  "FAILURE : No Domain : $Domain found, Please try with valid input."
		}
	}	
	if($Timecols)
	{
		$histldCmd+=" -timecols $Timecols"
	}
	if($Sizecols)
	{
		$histldCmd+=" -sizecols $Sizecols"
	}	
	if ($Percentage)
	{
		$histldCmd += " -pct "
	}
	if ($Previous)
	{
		$histldCmd += " -prev "
	}	
	if ($Beginning)
	{
		$histldCmd += " -begin "
	}
	if($Secs)
	{
		$histldCmd+=" -d $Secs"
	}
	if ($NI)
	{
		$histldCmd += " -ni "
	}
	if ($LdName)
	{
		#check wether ld is available or not 
		$cmd= "showld "
		$demo = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
		if($demo -match $LdName )
		{
			$histldCmd += "  $LdName"
		}
		else
		{ 
			return  "FAILURE : No LD_name $LdName found "
		}
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $histldCmd
	write-debuglog "  The Get-3parHistLD command displays a histogram of service times for Logical Disks (LDs) in a timed loop.->$cmd" "INFO:"	
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -lt "5")
	{
		write-host ""
		return "No data available Please Try With Valid Data. `n"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		if ($Metric -eq "time")
		{
			Add-Content -Path $tempFile -Value  'Logical_Disk_Name,0.50,1,2,4,8,16,32,64,128,256,time,date'
		}
		if ($Metric -eq "size")
		{
			Add-Content -Path $tempFile -Value  'Logical_Disk_Name,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date' 
		}
		else
		{
			Add-Content -Path $tempFile -Value  'Logical_Disk_Name,0.50,1,2,4,8,16,32,64,128,256,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date' 
		}
		foreach ($s in  $Result[0..$LastItem] )
		{			
			if ($s -match "millisec")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]
				continue
			}
			if (($s -match "-------") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Ldname"))
			{
				#write-host " s equal-1 $s"
				continue
			}
			#write-host "s = $s"
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
			#write-host "s final $s"
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parHistLD
# End
####################################################################################################################
## FUNCTION Get-3parHistPD
###################################################################################################################

Function Get-3parHistPD
{
<#
  .SYNOPSIS
    The Get-3parHistPD command displays a histogram of service times for Physical Disks (PDs).
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parHistPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistPD) instead.
  
    The Get-3parHistPD command displays a histogram of service times for Physical Disks (PDs).
       
  .EXAMPLE
    Get-3parHistPD  -iteration 1 -WWN abcd
	Specifies the world wide name of the PD for which service times are displayed.
	 
  .EXAMPLE
	Get-3parHistPD -iteration 1
	The Get-3parHistPDcommand displays a histogram of service iteration number of times
	Histogram displays data from when the system was last started (–begin).
	
  .EXAMPLE	
	Get-3parHistPD -iteration 1 -Devinfo
	Indicates the device disk type and speed.
	
  .EXAMPLE	
	Get-3parHistPD -iteration 1 -Metric both
	(Default)Display both I/O time and I/O size histograms

  .PARAMETER WWN
	Specifies the world wide name of the PD for which service times are displayed.

  .PARAMETER Nodes
	Specifies that the display is limited to specified nodes and physical
	disks connected to those nodes. The node list is specified as a series
	of integers separated by commas (e.g. 1,2,3). The list can also consist
	of a single integer. If the node list is not specified, all disks on all
	nodes are displayed.

  .PARAMETER Slots
	Specifies that the display is limited to specified PCI slots and
	physical disks connected to those PCI slots. The slot list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the slot list is not specified, all
	disks on all slots are displayed.

  .PARAMETER Ports
	Specifies that the display is limited to specified ports and
	physical disks connected to those ports. The port list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the port list is not specified, all
	disks on all ports are displayed.
		
  .PARAMETER Percentage
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Previous 
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
	
  .PARAMETER Beginning
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.

  .PARAMETER Devinfo
	Indicates the device disk type and speed.

  .PARAMETER Metric both|time|size
	Selects which metric to display. Metrics can be one of the following:
		both - (Default)Display both I/O time and I/O size histograms
		time - Display only the I/O time histogram
		size - Display only the I/O size histogram
		
  .PARAMETER Iteration 
    Specifies that the histogram is to stop after the indicated number of iterations using an integer from 1 up-to 2147483647.
  
  .PARAMETER FSpec
	Specifies that histograms below the threshold specified by the <fspec>
	argument are not displayed. The <fspec> argument is specified in the
	syntax of <op>,<val_ms>, <count>.
	<op>
		The <op> argument can be specified as one of the following:
			r - Specifies read statistics.
			w - Specifies write statistics.
			t - Specifies total statistics.
			rw - Specifies total read and write statistics.
	<val_ms>
		Specifies the threshold service time in milliseconds.
	<count>
	Specifies the minimum number of access above the threshold service
	time. When filtering is done, the <count> is compared with the sum
	of all columns starting with the one which corresponds to the
	threshold service time. For example, -t,8,100 means to only display
	the rows where the 8ms column and all columns to the right adds
	up to more than 100.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parHistPD
    LASTEDIT: 07/23/2015
    KEYWORDS: Get-3parHistPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iteration,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$WWN,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Nodes,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Slots,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Ports,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Devinfo,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$Metric,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Percentage,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Previous,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Beginning,	
			
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]
		$FSpec,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parHistPD - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistPD since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistPD since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	$Cmd = "histpd "
	if($Iteration)
	{
		$Cmd += "-iter $Iteration"	
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}	
		
	if ($WWN)
	{
		$Cmd += " -w $WWN"
	}
	if ($Nodes)
	{
		$Cmd += " -nodes $Nodes"
	}
	if ($Slots)
	{
		$Cmd += " -slots $Slots"
	}
	if ($Ports)
	{
		$Cmd += " -ports $Ports"
	}
	if ($Devinfo)
	{
		$Cmd += " -devinfo "
	}
	if($Metric)
	{
		$Met = $Metric
		$c = "both","time","size"
		$Metric = $metric.toLower()
		if($c -eq $Met)
		{
			$Cmd += " -metric $Metric "
		}
		else
		{
			return "FAILURE: -Metric $Metric is Invalid. Use only [ both | time | size ]."
		}
	}
	if ($Previous)
	{
		$Cmd += " -prev "
	}
	if ($Beginning)
	{
		$Cmd += " -begin "
	}
	if ($Percentage)
	{
		$Cmd += " -pct "
	}	
	if ($FSpec)
	{
		$Cmd += " -filt $FSpec"
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd 
	write-debuglog "  The Get-3parHistPDcommand displays a histogram of service times for Physical Disks (PDs).  " "INFO:" 
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -lt "5")
	{
		return "No data available"
	}		
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()

		$LastItem = $Result.Count
		
		if("time" -eq $Metric.trim().tolower())
		{
			#write-host " in time"
			Add-Content -Path $tempFile -Value 'ID,Port,0.50,1,2,4,8,16,32,64,128,256,time,date'
			$LastItem = $Result.Count - 3
		}
		elseif("size" -eq $Metric.trim().tolower())
		{
			#write-host " in size"
			Add-Content -Path $tempFile -Value 'ID,Port,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'	
			$LastItem = $Result.Count - 3
		}
		elseif ($Devinfo)
		{	
			Add-Content -Path $tempFile -Value  'ID,Port,Type,K_RPM,0.50,1,2,4,8,16,32,64,128,256,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'
		}
		else
		{
			Add-Content -Path $tempFile -Value  'ID,Port,0.50,1,2,4,8,16,32,64,128,256,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'			
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "millisec")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "ID"))
			{
				continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line			
			$aa=$s.split(",").length
			if ($aa -eq "20") 
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parHistPD
####################################################################################################################
## FUNCTION Get-3parHistPort
####################################################################################################################
Function Get-3parHistPort
{
<#
  .SYNOPSIS
    The Get-3parHistPort command displays a histogram of service times for ports within the system.
  
  .DESCRIPTION
   Note : This cmdlet (Get-3parHistPort) is deprecated and will be removed in a subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistPort) instead.
  
   The Get-3parHistPort command displays a histogram of service times for ports within the system.
      
  .EXAMPLE
    Get-3parHistPort -iteration 1
	displays a histogram of service times with option it can be one of these [both|ctrl|data].
	 
  .EXAMPLE
	Get-3parHistPort -iteration 1 -Both
	Specifies that both control and data transfers are displayed(-both)
	
  .EXAMPLE
	Get-3parHistPort -iteration 1 -Nodes nodesxyz
	Specifies that the display is limited to specified nodes and physical disks connected to those nodes.
	
  .EXAMPLE	
	Get-3parHistPort –Metric both -iteration 1
	displays a histogram of service times with -metric option. metric can be one of these –metric [both|time|size]
	
  .PARAMETER Both 
	Specifies that both control and data transfers are displayed(-both),
	only control transfers are displayed (-ctl), or only data transfers are
	displayed (-data). If this option is not specified, only data transfers
	are displayed.

  .PARAMETER CTL 
	Specifies that both control and data transfers are displayed(-both),
	only control transfers are displayed (-ctl), or only data transfers are
	displayed (-data). If this option is not specified, only data transfers
	are displayed.
		
  .PARAMETER Data
	Specifies that both control and data transfers are displayed(-both),
	only control transfers are displayed (-ctl), or only data transfers are
	displayed (-data). If this option is not specified, only data transfers
	are displayed.
		
  .PARAMETER Nodes
	Specifies that the display is limited to specified nodes and physical
	disks connected to those nodes. The node list is specified as a series
	of integers separated by commas (e.g. 1,2,3). The list can also consist
	of a single integer. If the node list is not specified, all disks on all
	nodes are displayed.

  .PARAMETER Slots
	Specifies that the display is limited to specified PCI slots and
	physical disks connected to those PCI slots. The slot list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the slot list is not specified, all
	disks on all slots are displayed.

  .PARAMETER Ports
	Specifies that the display is limited to specified ports and
	physical disks connected to those ports. The port list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the port list is not specified, all
	disks on all ports are displayed.
	
  .PARAMETER Host
	Specifies to display only host ports (target ports), only disk ports
	(initiator ports), only Fibre Channel Remote Copy configured ports, or
	only Fibre Channel ports for Data Migration.
	If no option is specified, all ports are displayed.
		
  .PARAMETER Disk 
	Specifies to display only host ports (target ports), only disk ports
	(initiator ports), only Fibre Channel Remote Copy configured ports, or
	only Fibre Channel ports for Data Migration.
	If no option is specified, all ports are displayed.
		
  .PARAMETER RCFC 
	Specifies to display only host ports (target ports), only disk ports
	(initiator ports), only Fibre Channel Remote Copy configured ports, or
	only Fibre Channel ports for Data Migration.
	If no option is specified, all ports are displayed.
		
  .PARAMETER PEER
	Specifies to display only host ports (target ports), only disk ports
	(initiator ports), only Fibre Channel Remote Copy configured ports, or
	only Fibre Channel ports for Data Migration.
	If no option is specified, all ports are displayed.

  .PARAMETER Metric
	Selects which metric to display. Metrics can be one of the following:
		both - (Default)Display both I/O time and I/O size histograms
		time - Display only the I/O time histogram
		size - Display only the I/O size histogram
	
  .PARAMETER Iteration 
    Specifies that the histogram is to stop after the indicated number of iterations using an integer from 1 up-to 2147483647.

  .PARAMETER Percentage
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Previous 
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
	
  .PARAMETER Beginning
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.

  .PARAMETER RW	
	Specifies that the display includes separate read and write data. If not
	specified, the total is displayed.
		
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parHistPort
    LASTEDIT: 07/24/2015
    KEYWORDS: Get-3parHistPort
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iteration,	
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Both,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$CTL,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Data,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Nodes,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Slots,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$Ports,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Host,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$PEER,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Disk,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$RCFC,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$Metric,		
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Percentage,
		
		[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Previous,
		
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Beginning,
		
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$RW,
		
		[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Get-3parHistPort - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistPort since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistPort since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	$Cmd = "histport "
	if($Iteration)
	{	
		$Cmd +=" -iter $Iteration"
	}
	else
	{
		write-debuglog "Get-3parHistPort parameter is empty. Simply return  " "INFO:"
		return "Error: -Iteration mandatory"
	}
	if($Both)
	{	
		$Cmd +=" -both "
	}
	if($CTL)
	{	
		$Cmd +=" -ctl "
	}
	if($Data)
	{	
		$Cmd +=" -data "
	}
	if ($Nodes)
	{
		$Cmd += " -nodes $Nodes"
	}
	if ($Slots)
	{
		$Cmd += " -slots $Slots"
	}
	if ($Ports)
	{
		$Cmd += " -ports $Ports"
	}
	if($Host)
	{	
		$Cmd +=" -host "
	}
	if($Disk)
	{	
		$Cmd +=" -disk "
	}
	if($RCFC)
	{	
		$Cmd +=" -rcfc "
	}
	if($PEER)
	{	
		$Cmd +=" -peer "
	}
	if ($Metric)
	{
		$Cmd += " -metric "
		$a1="both","time","size"
		$Metric = $Metric.toLower()
		if($a1 -eq $Metric )
		{
			$Cmd += "$Metric "
		}		
		else
		{
			return "FAILURE:  -Metric $Metric  is Invalid. Only [ both | time | size ] can be used."
		}
	}	
	if ($Previous)
	{
		$Cmd += " -prev "
	}
	if ($Beginning)
	{
		$Cmd += " -begin "
	}
	if ($Percentage)
	{
		$Cmd += " -pct "
	}
	if ($RW)
	{
		$Cmd += " -rw "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd 
	
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -lt "5")
	{
		return "No data available"
	}		
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		
		$LastItem = $Result.Count
		
		if("time" -eq $Metric.trim().tolower())
		{
			Add-Content -Path $tempFile -Value 'Port,Data/Ctrl,0.50,1,2,4,8,16,32,64,128,256,time,date'
		}
		elseif("size" -eq $Metric.trim().tolower())
		{
			#write-host " in size"
			Add-Content -Path $tempFile -Value 'Port,Data/Ctrl,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'
		}
		elseif($RW)
		{
			#write-host " in else"
			Add-Content -Path $tempFile -Value 'Port,Data/Ctrl,R/W,0.50,1,2,4,8,16,32,64,128,256,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'
		}
		else
		{
			#write-host " in else"
			Add-Content -Path $tempFile -Value 'Port,Data/Ctrl,0.50,1,2,4,8,16,32,64,128,256,4k,8k,16k,32k,64k,128k,256k,512k,1m,time,date'
		}
		
		foreach ($s in  $Result[0..$LastItem] )
		{		
			if ($s -match "millisec")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Ldname"))
			{
				continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			$s +=",$global:time1,$global:date1"	
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parHistPort
# End
####################################################################################################################
## FUNCTION Get-3parStatCMP
####################################################################################################################
Function Get-3parStatCMP
{
<#
  .SYNOPSIS
   The Get-3parStatCMP command displays Cache Memory Page (CMP) statistics by node or by Virtual Volume (VV).
   
  .DESCRIPTION
   Note : This cmdlet (Get-3parStatCMP) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatCMP) instead.
  
   The Get-3parStatCMP command displays Cache Memory Page (CMP) statistics by node or by Virtual Volume (VV).
  
	
  .EXAMPLE
	Get-3parStatCMP -Iteration 1
	This Example displays Cache Memory Page (CMP).
	
  .EXAMPLE
   Get-3parStatCMP -VVname Demo1 -Iteration 1
   This Example displays Cache Memory Page (CMP) statistics by node or by Virtual Volume (VV).
	
  		
  .PARAMETER VVname   
	Specifies that statistics are displayed for virtual volumes matching the specified name or pattern.
	
  .PARAMETER Domian 
	Shows VVs that are in domains with names that match one or more of the specified domains or patterns.
	
  .PARAMETER Delay  
	Specifies the interval, in seconds, that statistics are sampled using an integer from 1 through
	2147483.

  .PARAMETER NI
	Specifies that statistics for only non-idle VVs are displayed.
	This option is valid only if -v is also specified.
	
  .PARAMETER Iteration 
	Specifies that CMP statistics are displayed a specified number of times as indicated by the num argument using an integer
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parStatCMP
    LASTEDIT: 08/07/2015
    KEYWORDS: Get-3parStatCMP
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$NI,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$VVname ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Domian ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Delay  ,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Iteration ,
				
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parStatCMP  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatCMP  since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatCMP   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statcmp -v "	
	
	if($Iteration)
	{
		$cmd+=" -iter $Iteration "
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "		
	}	
	if ($NI)
	{
		$cmd +=" -ni "
	}
	if($VVname)	
	{
		$cmd+=" -n $VVname "
	}		
	if ($Domian)
	{
		$cmd+= " -domain $Domian "	
	}
	if($Delay)	
	{
		$cmd+=" -d $Delay"
	}	
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Get-3parStatCMP command displays Cache Memory Page (CMP) statistics. with the command  " "INFO:" 
	$range1 = $Result.count
	
	if($range1 -le "3")
	{
		return "No data available"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		Add-Content -Path $tempFile -Value "VVid,VVname,Type,Curr_Accesses,Curr_Hits,Curr_Hit%,Total_Accesses,Total_Hits,Total_Hit%,Time,Date"
		foreach ($s in  $Result[0..$LastItem] )
		{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				if ($s -match "Current"){	
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if (($s -match "---") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "VVname"))
			{
			continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "11")
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
			}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parStatCMP
# End

####################################################################################################################
## FUNCTION Get-3parHistVLUN
####################################################################################################################

Function Get-3parHistVLUN
{
<#
  .SYNOPSIS
	The Get-3parHistVLUN command displays Virtual Volume Logical Unit Number (VLUN) service time histograms.
	
  .DESCRIPTION
    Note : This cmdlet (Get-3parHistVLUN) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistVLun) instead.
  
    The Get-3parHistVLUN command displays Virtual Volume Logical Unit Number (VLUN) service time histograms.
        
  .EXAMPLE
    Get-3parHistVLUN -iteration 1
	This example displays two iterations of a histogram of service times for all VLUNs.	
		
  .EXAMPLE	
	Get-3parHistVLUN -iteration 1 -nodes 1
	This example displays two iterations of a histogram only exports from the specified nodes.	
	
  .EXAMPLE	
	Get-3parHistVLUN -iteration 1 -domain DomainName
	Shows only VLUNs whose Virtual Volumes (VVs) are in domains with names that match one or more of the specified domain names or patterns.
	
  .EXAMPLE	
	Get-3parHistVLUN -iteration 1 -Percentage
	Shows the access count in each bucket as a percentage.	 
	
  .PARAMETER domain
	Shows only VLUNs whose Virtual Volumes (VVs) are in domains with names that match one or more of the specified domain names or patterns. Multiple domain names or patterns can be
	repeated using a comma-separated list.
		
  .PARAMETER host
   Shows only VLUNs exported to the specified host(s) or pattern(s). Multiple host names or patterns
	can be repeated using a comma-separated list.
	
  .PARAMETER vvname
  Requests that only LDs mapped to VVs that match and of the specified names or patterns be displayed. Multiple volume names or patterns can be repeated using a comma-separated list.

  .PARAMETER Nodes
	Specifies that the display is limited to specified nodes and physical
	disks connected to those nodes. The node list is specified as a series
	of integers separated by commas (e.g. 1,2,3). The list can also consist
	of a single integer. If the node list is not specified, all disks on all
	nodes are displayed.

  .PARAMETER Slots
	Specifies that the display is limited to specified PCI slots and
	physical disks connected to those PCI slots. The slot list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the slot list is not specified, all
	disks on all slots are displayed.

  .PARAMETER Ports
	Specifies that the display is limited to specified ports and
	physical disks connected to those ports. The port list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the port list is not specified, all
	disks on all ports are displayed.
		
  .PARAMETER Metric
	Selects which metric to display. Metrics can be one of the following:
		both - (Default)Display both I/O time and I/O size histograms
		time - Display only the I/O time histogram
		size - Display only the I/O size histogram

  .PARAMETER Percentage
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Previous
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
	
  .PARAMETER Beginning
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
		
  .PARAMETER Lun      
  Specifies that VLUNs with LUNs matching the specified LUN(s) or pattern(s) are displayed. Multiple LUNs or patterns can be repeated using a comma-separated list.
  
 .PARAMETER iteration
  Specifies that the statistics are to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parHistVLUN
    LASTEDIT: 07/27/2015
    KEYWORDS: Get-3parHistVLUN
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$iteration,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$domain,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$host,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$vvname,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$lun,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Nodes,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$Slots,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$Ports,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Percentage,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Previous,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Beginning,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$Metric,			
		
		[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)		
	
	Write-DebugLog "Start: In Get-3parHistVLUN - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistVLUN since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistVLUN since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$Cmd = "histvlun "
	if ($iteration)
	{ 
		$Cmd += " -iter $iteration"
	}	
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error : -Iteration is mandatory. "
	}
	if ($domain)
	{ 
		$Cmd += " -domain $domain"
	}	
	if($host)
	{
		$objType = "host"
		$objMsg  = "hosts"		
		## Check Host Name 
		if ( -not (test-3PARObject -objectType $objType -objectName $host -objectMsg $objMsg))
		{
			write-debuglog "host $host does not exist. Nothing to List" "INFO:" 
			return "FAILURE : No host $host found"
		}		
		$Cmd += " -host $host "		
	}
	if ($vvname)
	{ 
		$GetvVolumeCmd="showvv"
		$Res = Invoke-3parCLICmd -Connection $SANConnection -cmds  $GetvVolumeCmd
		if ($Res -match $vvname)
			{
				$Cmd += " -v $vvname"
			}
			else
			{ 
				write-debuglog "vvname $vvname does not exist. Nothing to List" "INFO:" 
				return "FAILURE : No vvname $vvname found"			
			}
	}	
	if ($lun)
	{ 
		$Cmd += " -l $lun"			
	}
	if ($Nodes)
	{
		$Cmd += " -nodes $Nodes"
	}
	if ($Slots)
	{
		$Cmd += " -slots $Slots"
	}
	if ($Ports)
	{
		$Cmd += " -ports $Ports"
	}	
	if($Metric)
	{
		$Met = $Metric
		$c = "both","time","size"
		$Metric = $metric.toLower()
		if($c -eq $Met)
		{
			$Cmd += " -metric $Metric "
		}
		else
		{
			return "FAILURE: -Metric $Metric is Invalid. Use only [ both | time | size ]."
		}
	}
	if ($Previous)
	{
		$Cmd += " -prev "
	}
	if ($Beginning)
	{
		$Cmd += " -begin "
	}
	if ($Percentage)
	{
		$Cmd += " -pct "
	}		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	write-debuglog " histograms The Get-3parHistVLUN command displays Virtual Volume Logical Unit Number (VLUN)  " "INFO:" 
	$range1 = $Result.Count
	#write-host "count = $range1"
	if($range1 -le "5" )
	{
		return "No Data Available"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count 
		
		if("time" -eq $Metric.trim().tolower())
		{			
			Add-Content -Path $tempFile -Value 'Lun,VVname,Host,Port,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),time,date'
			$LastItem = $Result.Count -3
		}
		elseif("size" -eq $Metric.trim().tolower())
		{
			Add-Content -Path $tempFile -Value 'Lun,VVname,Host,Port,4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes),time,date'
			$LastItem = $Result.Count -3
		}
		else
		{
			Add-Content -Path $tempFile -Value 'Lun,VVname,Host,Port,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes),time,date'
		}
		foreach ($s in  $Result[0..$LastItem] )
		{			
			if ($s -match "millisec"){
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]

				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "VVname"))
			{
				continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "20")
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}	
	else
	{
		return $Result
	}
} # End Get-3parHistVLUN
####################################################################################################################
## FUNCTION Get-3parHistVV
####################################################################################################################
Function Get-3parHistVV
{

<#
  .SYNOPSIS
	The Get-3parHistVV command displays Virtual Volume (VV) service time histograms in a timed loop.
	
  .DESCRIPTION
   Note : This cmdlet (Get-3parHistVV ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistVv) instead.
  
   The Get-3parHistVV command displays Virtual Volume (VV) service time histograms in a timed loop.
	      
  .EXAMPLE
    Get-3parHistVV -iteration 1
	This Example displays Virtual Volume (VV) service time histograms service iteration number of times.
	
	 
  .EXAMPLE
	Get-3parHistVV  -iteration 1 -domain domain.com
	This Example Shows only the VVs that are in domains with names that match the specified domain name(s)
	
  .EXAMPLE	
	Get-3parHistVV  -iteration 1 –Metric both
	This Example Selects which Metric to display.
	
  .EXAMPLE
	Get-3parHistVV -iteration 1 -Timecols "1 2"
	
  .EXAMPLE
	Get-3parHistVV -iteration 1 -Sizecols "1 2"
		
  .EXAMPLE	
	Get-3parHistVV –Metric both -VVname demoVV1 -iteration 1
	This Example Selects which Metric to display. associated with Virtual Volume name.
 
	
  .PARAMETER domain
	Shows only the VVs that are in domains with names that match the specified domain name(s) .
		
  .PARAMETER Metric
	Selects which Metric to display. Metrics can be one of the following:
	1)both - (Default) Displays both I/O time and I/O size histograms.
	2)time - Displays only the I/O time histogram.
	3)size - Displays only the I/O size histogram.
	
  .PARAMETER Timecols
	For the I/O time histogram, shows the columns from the first column
	<fcol> through last column <lcol>. The available columns range from 0
	through 31.

	The first column (<fcol>) must be a value greater than or equal to 0,
	but less than the value of the last column (<lcol>).

	The last column (<lcol>) must be less than or equal to 31.

	The first column includes all data accumulated for columns less than the
	first column and the last column includes accumulated data for all
	columns greater than the last column.

	The default value of <fcol> is 6.
	The default value of <lcol> is 15.

  .PARAMETER Sizecols
	For the I/O size histogram, shows the columns from the first column
	(<fcol>) through the last column (<lcol>). Available columns range from
	0 through 15.

	The first column (<fcol>) must be a value greater than or equal to 0,
	but less than the value of the last column (<lcol>) (default value of 3).
	The last column (<lcol>) must be less than or equal to 15 (default value
	of 11).

	The default value of <fcol> is 3.
	The default value of <lcol> is 11.
  
  .PARAMETER Percentage
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Previous
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
	
  .PARAMETER Beginning
	Histogram displays data either from a previous sample(-prev) or from
	when the system was last started(-begin). If no option is specified, the
	histogram shows data from the beginning of the command's execution.
		
  .PARAMETER RW
	Specifies that the display includes separate read and write data. If not
	specified, the total is displayed.

  .PARAMETER IntervalInSeconds
	Specifies the interval in seconds that statistics are sampled from
	using an integer from 1 through 2147483. If no count is specified, the
	command defaults to 2 seconds.
    
  .PARAMETER FSpace 
	Specifies that histograms below the threshold specified by the <fspec>
	argument are not displayed. The <fspec> argument is specified in the
	syntax of <op>,<val_ms>, <count>.
	<op>
		The <op> argument can be specified as one of the following:
			r - Specifies read statistics.
			w - Specifies write statistics.
			t - Specifies total statistics.
			rw - Specifies total read and write statistics.
	<val_ms>
		Specifies the threshold service time in milliseconds.
	<count>
	Specifies the minimum number of access above the threshold service
	time. When filtering is done, the <count> is compared with the sum
	of all columns starting with the one which corresponds to the
	threshold service time. For example, -t,8,100 means to only display
	the rows where the 8ms column and all columns to the right adds
	up to more than 100.
	
  .PARAMETER VVName
	Virtual Volume name
	  
 .PARAMETER iteration
	Specifies that the statistics are to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:Get-3parHistVV
    LASTEDIT: 07/27/2015
    KEYWORDS: Get-3parHistVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$iteration,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$domain,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Metric,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Timecols,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Sizecols,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$VVname,		
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Percentage,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$Previous,	

		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$RW,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$IntervalInSeconds,
		
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$FSpace,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parHistVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$Cmd = "histvv "
	if ($iteration)
	{ 
		$Cmd += " -iter $iteration "	
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}
	if ($domain)
	{ 
		$Cmd += " -domain $domain "		
	}
	if($Metric)
	{
		$opt="both","time","size"
		$Metric = $Metric.toLower()
		if ($opt -eq $Metric)
		{
			$Cmd += " -metric $Metric"					
		}
		else 
		{
			Write-DebugLog "Stop: Exiting Get-3parHistVV since SAN connection object values are null/empty" $Debug
			return " metrics $Metric not found only [ both | time | size ] can be passed one at a time "
		}
	}
	if ($Timecols)
	{ 
		$Cmd += " -timecols $Timecols "		
	}
	if ($Sizecols)
	{ 
		$Cmd += " -sizecols $Sizecols "		
	}
	if ($Previous)
	{
		$Cmd += " -prev "
	}	
	if ($Percentage)
	{
		$Cmd += " -pct "
	}
	if ($RW)
	{
		$Cmd += " -rw "
	}
	if ($IntervalInSeconds)
	{ 
		$Cmd += " -d $IntervalInSeconds "		
	}
	if ($FSpace)
	{ 
		$Cmd += " -filt $FSpace "		
	}
	if($VVname)
	{ 
		$vv=$VVname
		$Cmd1 ="showvv"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd1
		if($Result1 -match $vv)			
		{
			$cmd += " $vv "
		}
		else
		{
			Write-DebugLog " Error : No VVname Found. "
			Return "Error: -VVname $VVname is not available `n Try Using Get-3parVV to list all the VV's Available  "
		}
	}		
			
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	write-debuglog " Get-3parHistVV command displays Virtual Volume Logical Unit Number (VLUN)  " "INFO:" 
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -le "5")
	{
		return "No data available"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		if("time" -eq $Metric.trim().tolower())
		{
		#write-host " in time"
			Add-Content -Path $tempFile -Value 'VVname,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),time,date'
		}
		elseif("size" -eq $Metric.trim().tolower())
		{
			#write-host " in size"
			Add-Content -Path $tempFile -Value 'VVname,4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes),time,date'
		}
		else
		{
			Add-Content -Path $tempFile -Value 		'VVname,0.50(millisec),1(millisec),2(millisec),4(millisec),8(millisec),16(millisec),32(millisec),64(millisec),128(millisec),256(millisec),4k(bytes),8k(bytes),16k(bytes),32k(bytes),64k(bytes),128k(bytes),256k(bytes),512k(bytes),1m(bytes),time,date'
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "millisec")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]

				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "VVname"))
			{
				continue
			}			
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line			
			$s +=",$global:time1,$global:date1"	
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parHistVV

####################################################################################################################
## FUNCTION Get-3parStatCPU
####################################################################################################################

Function Get-3parStatCPU
{
<#
  .SYNOPSIS
   The Get-3parStatCPU command displays CPU statistics for all nodes.
   
  .DESCRIPTION
   Note : This cmdlet (Get-3parStatCPU) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatCPU) instead.
  
   The Get-3parStatCPU command displays CPU statistics for all nodes.

  .EXAMPLE
	Get-3parStatCPU -iteration 1	
	This Example Displays CPU statistics for all nodes.
	
  .EXAMPLE  
	Get-3parStatCPU -delay 2  -total -iteration 1	
	This Example Show only the totals for all the CPUs on each node.
	
	  		
  .PARAMETER delay    
	Specifies the interval, in seconds, that statistics are sampled using an integer from 1 through 2147483
	
  .PARAMETER total 
	Show only the totals for all the CPUs on each node.
		
  .PARAMETER Iteration 
	Specifies that CMP statistics are displayed a specified number of times as indicated by the num argument using an integer
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parStatCPU
    LASTEDIT: 08/07/2015
    KEYWORDS: Get-3parStatCPU
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$delay,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$total,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Iteration ,
				
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parStatCPU  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatCPU  since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatCPU   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	
	$cmd= "statcpu "
	
    if($Iteration)
	{
		$cmd+=" -iter $Iteration "
	}
	else
	{
		Write-DebugLog "Stop: Exiting  Get-3parStatCPU  Iteration in unavailable "
		Return "FAILURE : -Iteration  is Mandatory for Get-3parStatCPU command to execute. "
	}		
	if($delay)	
	{
		$cmd+=" -d $delay "
	}
	if ($total  )
	{
		$cmd+= " -t "	
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing  Get-3parStatCPU command displays Cache Memory Page (CMP) statistics. with the command  " "INFO:" 
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -eq "5"){
		return "No data available"
	}		
	if ( $Result.Count -gt 1)
	{
		$flg = "False"
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		Add-Content -Path $tempFile -Value "node,cpu,user,sys,idle,intr/s,ctxt/s,Time,Date"
		foreach ($s in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")
			$s= [regex]::Replace($s,"---","")
			$s= [regex]::Replace($s,"-","")  
			$a=$s.split(",")
			$c=$a.length
			$b=$a.length
			if ( 2 -eq $b )
			{
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
			}
			if (([string]::IsNullOrEmpty($s)) -or ($s -match "node"))
			{
				continue
			}
			if($c -eq "6")
			{
				$s +=",,$global:time1,$global:date1"
			}
			else
			{
				$s +=",$global:time1,$global:date1"
			}
			if($flg -eq "True")
			{
				Add-Content -Path $tempFile -Value $s	
			}
			$flg = "True"			
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parStatCPU
# End
####################################################################################################################
## FUNCTION Get-3parStatChunklet
####################################################################################################################

Function Get-3parStatChunklet
{
<#
  .SYNOPSIS
   The Get-3parStatChunklet command displays chunklet statistics in a timed loop.
   
  .DESCRIPTION
   Note : This cmdlet (Get-3parStatChunklet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatChunklet) instead.
  
   The Get-3parStatChunklet command displays chunklet statistics in a timed loop. 
	
  .EXAMPLE
	Get-3parStatChunklet -Iterration 1
	This example displays chunklet statistics in a timed loop.
	
  .EXAMPLE
   Get-3parStatChunklet -RW -Iteration 1
   This example Specifies that reads and writes are displayed separately.while displays chunklet statistics in a timed loop.  
   	
  .EXAMPLE  
	Get-3parStatChunklet -LDname demo1 -CHnum 5 -Iterration 1 
	This example Specifies particular chunklet number & logical disk.
	
  .PARAMETER RW	
	Specifies that reads and writes are displayed separately. If this option is not used, then the total
	of reads plus writes is displayed.
				
  .PARAMETER Idlep
  Specifies the percent of idle columns in the output.
	
  .PARAMETER Begin
  Specifies that I/O averages are computed from the system start time. If not specified, the average
  is computed since the first iteration of the command.
				
  .PARAMETER NI
  Specifies that statistics for only non-idle devices are displayed
	
  .PARAMETER Delay 
	Specifies the interval, in seconds, that statistics are sampled using an integer from 1 through
	2147483.
	
  .PARAMETER LDname 
	Specifies that statistics are restricted to chunklets from a particular logical disk.
	
  .PARAMETER CHnum  
	Specifies that statistics are restricted to a particular chunklet number.
	
  .PARAMETER Iteration 
	Specifies that CMP statistics are displayed a specified number of times as indicated by the num argument using an integer
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parStatChunklet
    LASTEDIT: 08/06/2015
    KEYWORDS: Get-3parStatChunklet
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iteration ,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$RW,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$IDLEP,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Begin,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$NI,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Delay,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$LDname ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$CHnum ,		
				
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parStatChunklet  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatChunklet   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatChunklet   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statch"
	
	if($Iteration )
	{	
		$cmd+=" -iter $Iteration "	
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "		
	}
	
	if($RW)	
	{
		$cmd +=" -rw "
	}
	if($IDLEP)	
	{
		$cmd+=" -idlep "
	}
	if($Begin)	
	{
		$cmd+=" -begin "
	}
	if($NI)	
	{
		$cmd+=" -ni "
	}
	if($Delay)	
	{
		$cmd+=" -d $Delay"
	}
	if($LDname)	
	{
		$ld="showld"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $ld
		if($Result1 -match $LDname )
		{
			$cmd+=" -ld $LDname "
		}
		else 
		{
			Write-DebugLog "Stop: Exiting  Get-3parStatChunklet   since -LDname $LDname in unavailable "
			Return "FAILURE : -LDname $LDname is not available . "
		}
	}
	if($CHnum)
	{
		$cmd+=" -ch $CHnum "
	}
	
	#write-host "$cmd"		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Get-3parStatChunklet command displays chunklet statistics in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.Count
	if($range1 -le "5" )
	{
		return "No Data Available"
	}
	if( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		if($IDLEP)	
		{
			Add-Content -Path $tempFile -Value "Logical_Disk_I.D,LD_Name,Ld_Ch,Pd_id,Pd_Ch,R/W,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Idle_Cur,Idle_Avg,Time,Date" 
		}
		else 
		{
			Add-Content -Path $tempFile -Value "Logical_Disk_I.D,LD_Name,Ld_Ch,Pd_id,Pd_Ch,R/W,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Time,Date"
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "r/w")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$global:time1 = $s.substring(0,8)
				$global:date1 = $s.substring(9,19)
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Qlen"))
			{
			continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "11")
			{
				continue
			}
			if (($aa -eq "13") -and ($IDLEP))
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		
		Import-Csv $tempFile
		del $tempFile
	}	
	else
	{
		return $Result
	}	
} # End Get-3parStatChunklet
# End
####################################################################################################################
## FUNCTION Get-3parStatLD
####################################################################################################################

Function Get-3parStatLD
{
<#
  .SYNOPSIS
   The Get-3parStatLD command displays read/write (I/O) statistics about Logical Disks (LDs) in a timed loop.
   
  .DESCRIPTION
   Note : This cmdlet (Get-3parStatLD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatLD) instead.
  
   The Get-3parStatLD command displays read/write (I/O) statistics about Logical Disks (LDs) in a timed loop.
	
  .EXAMPLE
	Get-3parStatLD -Iteration 1
	This example displays read/write (I/O) statistics about Logical Disks (LDs).
	
  .EXAMPLE
   Get-3parStatLD -rw -Iteration 1
   This example displays statistics about Logical Disks (LDs).with Specification read/write
   
  .EXAMPLE  
	Get-3parStatLD -Begin -delay 2 -Iteration 1
	This example displays statistics about Logical Disks (LDs).with Specification begin & delay in execution of 2 sec.	
	
  .EXAMPLE  
	Get-3parStatLD -Begin -VVname demo1 -Delay 2 -Iteration 1
	This example displays statistics about Logical Disks (LDs) Show only LDs that are mapped to Virtual Volumes (VVs)
	
	
  .EXAMPLE  
	Get-3parStatLD -begin -LDname demoLD1 -delay 2 -Iteration 1
	This example displays statistics about Logical Disks (LDs).With Only statistics are displayed for the specified LD

  .PARAMETER RW		
	Specifies that reads and writes are displayed separately. If this option is not used, then the total
	of reads plus writes is displayed.
			
  .PARAMETER Begin	
	Specifies that I/O averages are computed from the system start time. If not specified, the average
	is computed since the first iteration of the command.
			
  .PARAMETER IDLEP	
    Specifies the percent of idle columns in the output.
	
  .PARAMETER VVname  
	Show only LDs that are mapped to Virtual Volumes (VVs) with names matching any of names or patterns specified
	
  .PARAMETER LDname  
	Only statistics are displayed for the specified LD or pattern
	
  .PARAMETER Domain
	Shows only LDs that are in domains with names matching any of the names or specified patterns.
	
  .PARAMETER Delay 
	Specifies the interval, in seconds, that statistics are sampled using an integer from 1 through
	2147483.

  .PARAMETER Iteration 
	Specifies that I/O statistics are displayed a specified number of times as indicated by the number
	argument using an integer from 1 through 2147483647.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parStatLD
    LASTEDIT: 08/07/2015
    KEYWORDS: Get-3parStatLD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$RW,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$IDLEP,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Begin,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$NI,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$VVname ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$LDname,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$Domain,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$Delay,
				
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$Iteration,
				
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parStatLD  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatLD   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatLD   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statld"	
	
	if($Iteration )
	{	
		$cmd+=" -iter $Iteration "	
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}
	if($RW)	
	{
		$cmd +=" -rw "
	}
	if($IDLEP)	
	{
		$cmd+=" -idlep "
	}
	if($Begin)	
	{
		$cmd+=" -begin "
	}
	if($NI)	
	{
		$cmd+=" -ni "
	}
	if($VVname)	
	{
		$ld="showvv"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $ld
		if($Result1 -match $VVname )
		{
			$cmd+=" -vv $VVname "
		}
		else 
		{
			Write-DebugLog "Stop: Exiting  Get-3parStatLD since -VVname $VVname in unavailable "
			Return "FAILURE : -VVname $VVname is not available .`n Try Using Get-3parVV to get all available VV  "
		}
	}
	if($LDname)	
	{
		if($cmd -match "-vv")
		{
			return "Stop: Executing -VVname $VVname and  -LDname $LDname cannot be done in a single Execution "
		}
		$ld="showld"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $ld		
		if($Result1 -match $LDname )
		{
			$cmd+=" $LDname "
		}
		else 
		{
			Write-DebugLog "Stop: Exiting  Get-3parStatLD since -LDname $LDname in unavailable "
			Return "FAILURE : -LDname $LDname is not available . "
		}
	}	
	if($Domain)	
	{
		$cmd+=" -domain $Domain "
	}	
	if($Delay)	
	{
		$cmd+=" -d $Delay "
	}		
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Get-3parStatLD command displays read/write (I/O) statistics about Logical Disks (LDs) in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -le "5")
	{
		return "No data available"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 1		
		if($IDLEP)	
		{
			Add-Content -Path $tempFile -Value "Ldname,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Idle_Cur,Idle_Avg,Time,Date"
		}
		else 
		{
			Add-Content -Path $tempFile -Value "Ldname,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Time,Date"	
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
		if ($s -match "r/w")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Ldname"))
			{
				continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "11")
			{
				continue
			}
			if (($aa -eq "13") -and ($IDLEP))
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s		
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parStatLD

####################################################################################################################
## FUNCTION Get-3parStatLink
####################################################################################################################

Function Get-3parStatLink
{
<#
  .SYNOPSIS
  The Get-3parStatLink command displays statistics for link utilization for all nodes in a timed loop.
  
  .DESCRIPTION
  Note : This cmdlet (Get-3parStatLink) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatLink) instead.
  
  The Get-3parStatLink command displays statistics for link utilization for all nodes in a timed loop.
   
	
  .EXAMPLE
	Get-3parStatLink -Iteration 1
	This Example displays statistics for link utilization for all nodes in a timed loop.
		
  .EXAMPLE
	Get-3parStatLink -Interval 3 -Iteration 1 
   This Example displays statistics for link utilization for all nodes in a timed loop, with a delay of 3 sec.
  
  .EXAMPLE
	Get-3parStatLink -Detail -Iteration 1
  
  .PARAMETER Detail
	Displays detailed information regarding the Queue statistics.	 
  
  .PARAMETER Interval
	Specifies the interval, in seconds, that statistics are sampled using an integer from 1 through
	2147483.

  .PARAMETER Iteration 
	Specifies that I/O statistics are displayed a specified number of times as indicated by the number
	argument using an integer from 1 through 2147483647.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Get-3parStatLink
    LASTEDIT: 08/10/2015
    KEYWORDS: Get-3parStatLink
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Detail,
				
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Interval,
				
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Iteration,
				
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Get-3parStatLink  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatLink   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatLink   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statlink"
	if($Iteration )
	{
		$cmd+=" -iter $Iteration "
	}
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}
	if ($Detail)
	{
		$cmd+=" -detail "
	}
	if ($Interval)
	{
		$cmd+=" -d $Interval "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Get-3parStatLink displays statistics for link utilization for all nodes in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -eq "3"){
		return "No data available"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		Add-Content -Path $tempFile -Value "Node,Q,ToNode,XCB_Cur,XCB_Avg,XCB_Max,KB_Cur,KB_Avg,KB_Max,XCBSz_KB_Cur,XCBSz_KB_Avg,Time,Date"
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "Local DMA 0")
			{
				$s= [regex]::Replace($s,"Local DMA 0","Local_DMA_0")			
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")
			if ($s -match "XCB_sent_per_second")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if ($s -match "Local DMA 0")
			{
			 $s= [regex]::Replace($s,"Local DMA 0","Local_DMA_0")			
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "ToNode"))
			{
			continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parStatLink
####################################################################################################################
## FUNCTION Get-3parstatPD
####################################################################################################################

Function Get-3parstatPD
{
<#
  .SYNOPSIS
   The Get-3parstatPD command displays the read/write (I/O) statistics for physical disks in a timed loop.
   
 .DESCRIPTION
    Note : This cmdlet (Get-3parStatPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatPD) instead.
 
    The Get-3parstatPD command displays the read/write (I/O) statistics for physical disks in a timed loop.   
	
  .EXAMPLE
	Get-3parstatPD -RW –Iteration 1
	This example displays one iteration of I/O statistics for all PDs.
   
  .EXAMPLE  
	Get-3parstatPD -IDLEP –nodes 2 –Iteration 1
   This example displays one iteration of I/O statistics for all PDs with the specification idlep preference of node 2.
   
  .EXAMPLE  
	Get-3parstatPD -NI -wwn 1122112211221122 –nodes 2 –Iteration 1
	This Example Specifies that statistics for a particular Physical Disk (PD) identified by World Wide Names (WWNs) and nodes
  
  .PARAMETER Devinfo
	Indicates the device disk type and speed.
	
  .PARAMETER RW
	Specifies that reads and writes are displayed separately. If this option is not used, then the total
	of reads plus writes is displayed.
	
  .PARAMETER Begin
    Specifies that I/O averages are computed from the system start time. If not specified, the average
	is computed since the first iteration of the command.
	
  .PARAMETER IDLEP
   Specifies the percent of idle columns in the output.
	
  .PARAMETER NI
   Specifies that statistics for only non-idle devices are displayed. This option is shorthand for the option				
	
  .PARAMETER wwn 
	Specifies that statistics for a particular Physical Disk (PD) identified by World Wide Names (WWNs) are displayed.
	
  .PARAMETER nodes  
	Specifies that the display is limited to specified nodes and PDs connected to those nodes
		
  .PARAMETER ports   
	Specifies that the display is limited to specified ports and PDs connected to those ports

 .PARAMETER  Iteration
	Specifies that the histogram is to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parstatPD
    LASTEDIT: 08/05/2015
    KEYWORDS: Get-3parstatPD
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$RW,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$IDLEP,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Begin,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$NI,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$wwn ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$nodes,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$slots,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$ports ,
		
		[Parameter(Position=9, Mandatory=$false)]
		[System.String]
		$Iteration ,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$DevInfo,
		
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parstatPD   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parstatPD   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parstatPD   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "statpd "	
	
	if($Iteration)
	{
		$cmd+=" -iter $Iteration "
	}
	else	
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}
	if($RW)	
	{
		$cmd +=" -rw "
	}
	if($Begin)	
	{
		$cmd+=" -begin "
	}
	if($IDLEP)	
	{
		$cmd+=" -idlep "
	}	
	if($NI)	
	{
		$cmd+=" -ni "
	}
	if($DevInfo)	
	{
		$cmd+=" -devinfo "
	}
	
	if ($wwn)
	{
		$cmd+=" -w $wwn "
	}	
	if ($nodes)
	{
		$cmd+=" -nodes $nodes "
	}	
	if ($slots)
	{
		$cmd+=" -slots $slots "
	}	
	if ($ports )
	{
		$cmd+=" -ports $ports "
	}			
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Get-3parstatPD command displays the read/write (I/O) statistics for physical disks in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.count	
	
	if($range1 -eq "4")
	{
		return "No data available"
	}	
	if ( $Result.Count -gt 1)
	{		
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 3
		if($DevInfo)
		{
			Add-Content -Path $tempFile -Value "ID,Port,Type,K_RPM,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Idle_Cur,Idle_Avg,Time,Date"
		}
		else
		{
			Add-Content -Path $tempFile -Value "ID,Port,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Idle_Cur,Idle_Avg,Time,Date"
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "r/w")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]				
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Port"))
			{
			continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "13")
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{		
		return $Result
	}
} # End Get-3parstatPD
####################################################################################################################
## FUNCTION Get-3parStatPort
####################################################################################################################
Function Get-3parStatPort
{
<#
  .SYNOPSIS
   The Get-3parStatPort command displays read/write (I/O) statistics for ports.
   
 .DESCRIPTION
   Note : This cmdlet (Get-3parStatPort) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatPort) instead.
 
   The Get-3parStatPort command displays read/write (I/O) statistics for ports.
	
  .EXAMPLE
	Get-3parStatPort -Iteration 1
	This example displays one iteration of I/O statistics for all ports.
   
  .EXAMPLE  
	Get-3parStatPort -Both -Iteration 1
	This example displays one iteration of I/O statistics for all ports,Show data transfers only. 
   
  .EXAMPLE  
	Get-3parStatPort -Host -nodes 2 -Iteration 1
	This example displays I/O statistics for all ports associated with node 2.
  
  .PARAMETER Both
	Show data transfers only.
	 
  .PARAMETER Ctl
	Show control transfers only.
	 
  .PARAMETER Data
	Show both data and control transfers only.
	 
  .PARAMETER Rcfc
	includes only statistics for Remote Copy over Fibre Channel ports related to cached READ requests
	
  .PARAMETER Rcip
	Includes only statistics for Ethernet configured Remote Copy ports.
	 
  .PARAMETER RW
	Specifies that the display includes separate read and write data.
	 
  .PARAMETER Begin
	Specifies that I/O averages are computed from the system start time
	 
  .PARAMETER Idlep
	Specifies the percent of idle columns in the output.
	 
  .PARAMETER Host
	Displays only host ports (target ports).
	 
  .PARAMETER Disk
	Displays only disk ports (initiator ports).
	 
  .PARAMETER Rcfc
	Displays only Fibre Channel remote-copy configured ports.
	 
  .PARAMETER NI
	Specifies that statistics for only non-idle devices are displayed.
  
  .PARAMETER FS
	Includes only statistics for File Persona ports.

  .PARAMETER Peer
	Specifies to display only host ports (target ports), only disk ports
	(initiator ports), only Fibre Channel Remote Copy configured ports, or
	only Fibre Channel ports for Data Migration.
	If no option is specified, all ports are displayed.
	
  .PARAMETER nodes  
	Specifies that the display is limited to specified nodes and PDs connected to those nodes
		
  .PARAMETER ports   
	Specifies that the display is limited to specified ports and PDs connected to those ports

  .PARAMETER slots
	Specifies that the display is limited to specified PCI slots and
	physical disks connected to those PCI slots. The slot list is specified
	as a series of integers separated by commas (e.g. 1,2,3). The list can
	also consist of a single integer. If the slot list is not specified, all
	disks on all slots are displayed.
	
 .PARAMETER  Iteration
	Specifies that the histogram is to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parStatPort
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parStatPort
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Both ,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Ctl ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Data ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Rcfc ,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Rcip ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$RW ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$FS ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$Host ,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$Peer ,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$IDLEP,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$Begin,
		
		[Parameter(Position=11, Mandatory=$false)]
		[switch]
		$NI,
		
		[Parameter(Position=12, Mandatory=$false)]
		[switch]
		$Disk,
					
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$nodes,
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$slots,
		
		[Parameter(Position=15, Mandatory=$false)]
		[System.String]
		$ports ,
		
		[Parameter(Position=16, Mandatory=$false)]
		[System.String]
		$Iteration ,
				
		[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parStatPort   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatPort   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatPort   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statport "
	
	if($Iteration)
	{	
		$cmd+=" -iter $Iteration "	
	}
	else	
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}	
	if($Both)	
	{
		$cmd +=" -both "
	}
	if($Ctl)	
	{
		$cmd +=" -ctl "
	}
	if($Data)	
	{
		$cmd +=" -data "
	}
	if($Rcfc)	
	{
		$cmd +=" -rcfc "
	}
	if($Rcip)	
	{
		$cmd +=" -rcip "
	}
	if($FS)	
	{
		$cmd +=" -fs "
	}
	if($Host)	
	{
		$cmd +=" -host "
	}
	if($Disk)	
	{
		$cmd +=" -disk "
	}
	if($Peer)	
	{
		$cmd +=" -peer "
	}	
	if($RW)	
	{
		$cmd +=" -rw "
	}
	if($Begin)	
	{
		$cmd+=" -begin "
	}
	if($IDLEP)	
	{
		$cmd+=" -idlep "
	}	
	if($NI)	
	{
		$cmd+=" -ni "
	}
	if ($nodes)
	{
		$cmd+=" -nodes $nodes "
	}
	if ($slots)
	{
		$cmd+=" -slots $slots "
	}
	if ($ports )
	{
		$cmd+=" -ports $ports "
	}				
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Get-3parStatPort command displays the read/write (I/O) statistics for physical disks in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -eq "4")
	{
		return "No data available"
	}
	if(($Both) -And ($range -eq "6"))
	{
		return "No data available"
	}
		
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -3
		if($Rcip)
		{
			Add-Content -Path $tempFile -Value "Port,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Errs,Drops,Time,Date"
		}
		elseif ($IDLEP)
		{
			Add-Content -Path $tempFile -Value "Port,D/C,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max, Svt_Cur, Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Idle_Cur,Idle_Avg,Time,Date"
		}
		else
		{
			Add-Content -Path $tempFile -Value "Port,D/C,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max, Svt_Cur, Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Time,Date"
		}	
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "r/w")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Port"))
			{
			continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if (($aa -eq "12") -or ($aa -eq "8") -or ($aa -eq "8"))
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}	
	else
	{
		return $Result
	}
} # End Get-3parStatPort
#EndRegion
####################################################################################################################
## FUNCTION Get-3parStatRCVV
####################################################################################################################

Function Get-3parStatRCVV
{
<#
	.SYNOPSIS
	The Get-3parStatRCVV command displays statistics for remote-copy volumes in a timed loop.
   
	.DESCRIPTION
	Note : This cmdlet (Get-3parStatRCVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatRcVv) instead.
	
    The Get-3parStatRCVV command displays statistics for remote-copy volumes in a timed loop.
  
	.EXAMPLE
	Get-3parStatRCVV -Iteration 1
	This Example displays statistics for remote-copy volumes in a timed loop.
   
	.EXAMPLE
	Get-3parStatRCVV -Iteration 1 -ASync

	.EXAMPLE
	Get-3parStatRCVV -Iteration 1 -Sync -VVname $VV

	.EXAMPLE
	Get-3parStatRCVV -Iteration 1 -TargetSum

	.EXAMPLE
	Get-3parStatRCVV -Iteration 1 -VVSum   
   
   .EXAMPLE  
	Get-3parStatRCVV -Iteration 1 -periodic 
	This Example displays statistics for remote-copy volumes in a timed loop and show only volumes that are being copied in asynchronous periodic mode	
   
	.EXAMPLE  
	Get-3parStatRCVV -target demotarget1  -Iteration 1
	This Example displays statistics for remote-copy volumes in a timed loop and Show only volumes whose group is copied to the specified target name.

  .PARAMETER Async      :  Show only volumes which are being copied in asynchronous mode.
	
  .PARAMETER sync		:	Show only volumes that are being copied in synchronous mode.
	
  .PARAMETER periodic	:	Show only volumes that are being copied in asynchronous periodic mode	
	
  .PARAMETER primary		:	Show only volumes that are in the primary role.
	
  .PARAMETER secondary	:	Show only volumes that are in the secondary role.
	
  .PARAMETER targetsum	:	Specifies that the sums for all volumes of a target are displayed.
	
  .PARAMETER portsum		:	Specifies that the sums for all volumes on a port are displayed.
	
  .PARAMETER groupsum	:	Specifies that the sums for all volumes of a group are displayed.
	
  .PARAMETER vvsum		:	Specifies that the sums for all targets and links of a volume are displayed.
	
  .PARAMETER domainsum	:	Specifies that the sums for all volumes of a domain are displayed.
	
  .PARAMETER ni			:	Specifies that statistics for only non-idle devices are displayed.
	
  .PARAMETER target   
	Show only volumes whose group is copied to the specified target name.
	
  .PARAMETER port    
	Show only volumes that are copied over the specified port or pattern.
	
  .PARAMETER group 
	Show only volumes whose group matches the specified group name or pattern.
	
  .PARAMETER VVname	
	Displays statistics only for the specified virtual volume or volume name pattern.
	
 .PARAMETER  Iteration
	Specifies that the histogram is to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
	
 .PARAMETER DomainName
	Shows only the virtual volumes that are in domains with names that match
	the specified domain name(s) or pattern(s).	
		
 .PARAMETER Interval
	Specifies the interval in seconds that statistics are sampled from
	using an integer from 1 through 2147483. If no count is specified, the
	command defaults to 2 seconds.
	
 .PARAMETER Subset
	Show subset statistics for Asynchronous Remote Copy on a per group basis.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parStatRCVV
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parStatRCVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iteration ,		
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Interval ,	
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Target ,
						
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Port,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Group ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$VVname  ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$DomainName  ,

		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$ASync,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$Sync,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$Periodic,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$Primary,
		
		[Parameter(Position=11, Mandatory=$false)]
		[switch]
		$Secondary,
		
		[Parameter(Position=12, Mandatory=$false)]
		[switch]
		$TargetSum,
		
		[Parameter(Position=13, Mandatory=$false)]
		[switch]
		$PortSum,
		
		[Parameter(Position=14, Mandatory=$false)]
		[switch]
		$GroupSum,
		
		[Parameter(Position=15, Mandatory=$false)]
		[switch]
		$VVSum,
		
		[Parameter(Position=16, Mandatory=$false)]
		[switch]
		$DomainSum,
		
		[Parameter(Position=17, Mandatory=$false)]
		[switch]
		$NI,
		
		[Parameter(Position=18, Mandatory=$false)]
		[switch]
		$SubSet,
				
		[Parameter(Position=19, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parStatRCVV   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatRCVV   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatRCVV   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statrcvv "	
	
	if($Iteration)
	{
		$cmd+=" -iter $Iteration "
	}
	else
	{
		Write-DebugLog "Stop: Exiting  Get-3parStatRCVV  Iteration in unavailable "
		Return "FAILURE : -Iteration  is Mandatory for Get-3parStatRCVV command to execute. "
	}
	if ($Interval)
	{
		$cmd+=" -d $Interval"
	}	
	if ($Target)
	{
		$cmd+=" -t $Target"
	}	
	if ($Port)
	{
		$cmd+=" -port $Port "
	}
	if ($Group)
	{
		$cmd+=" -g $Group"
	}
	if($ASync)	
	{
		$cmd += " -async "
	}
	if($Sync)	
	{
		$cmd += " -sync "
	}
	if($Periodic)	
	{
		$cmd += " -periodic "
	}
	if($Primary)	
	{
		$cmd += " -primary "
	}
	if($Secondary)	
	{
		$cmd += " -secondary "
	}
	if($TargetSum)	
	{
		$cmd += " -targetsum "
	}
	if($PortSum)	
	{
		$cmd += " -portsum "
	}
	if($GroupSum)	
	{
		$cmd += " -groupsum "
	}
	if($VVSum)	
	{
		$cmd += " -vvsum "
	}
	if($DomainSum)	
	{
		$cmd += " -domainsum "
	}
	if($DomainName)	
	{
		$cmd += " -domain $DomainName "
	}
	if($NI)	
	{
		$cmd += " -ni "
	}
	if($SubSet)	
	{
		$cmd += " -subset "
	}
	if ($VVname)
	{
		$s= get-3parvv -vvName  $VVname
		if ($s -match $VVname )
		{
			$cmd+=" $VVname"
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Get-3parStatRCVV  VVname in unavailable "
			Return "FAILURE : -VVname $VVname  is Unavailable to execute. "
		}		
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Get-3parStatRCVV command displays statistics for remote-copy volumes in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.count
	
	if($range1 -eq "4")
	{
		return "No data available"
	}
	if( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 2
		
		if($TargetSum)
		{
			Add-Content -Path $tempFile -Value "Target,Mode,I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg,Time,Date"		
		}
		elseif ($PortSum)
		{
			Add-Content -Path $tempFile -Value "Link,Target,Type,I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg,Time,Date"
		}
		elseif ($GroupSum)
		{
			Add-Content -Path $tempFile -Value "Group,Target,Mode,I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg,Time,Date"
		}
		elseif ($VVSum)
		{
			Add-Content -Path $tempFile -Value "VVname,RCGroup,Target,Mode,I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg,Time,Date"
		}
		elseif ($DomainSum)
		{
			Add-Content -Path $tempFile -Value "Domain,I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg,Time,Date"
		}
		else 
		{		
			Add-Content -Path $tempFile -Value "VVname,RCGroup,Target,Mode,Port,Type,I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg,Time,Date"
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ +","")
			#$s= [regex]::Replace($s,"-+","-")
			$s= [regex]::Replace($s," +",",")			# Replace one or more spaces with comma to build CSV line
			if ($s -match "I/O")
			{
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if (($s -match "-------") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "Avg"))
			{
			continue
			}
			$aa=$s.split(",").length
			if ($aa -eq "11")
			{
				continue
			}			
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s		
			#$s= $s.Trim() -replace 'Cur,Avg,Max,Cur,Avg,Max,Cur,Avg,Cur,Avg,Cur,Avg','I/O_Cur,I/O_Avg,I/O_Max,KBytes_Cur,KBytes_Avg,KBytes_Max,Svt_Cur,Svt_Avg,Rmt_Cur,Rmt_Avg,IOSz_Cur,IOSz_Avg' 	
			#Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
	
} # End Get-3parStatRCVV
####################################################################################################################
## FUNCTION Get-3parStatVlun
####################################################################################################################
Function Get-3parStatVlun
{
<#
  .SYNOPSIS
   The Get-3parStatVlun command displays statistics for Virtual Volumes (VVs) and Logical Unit Number (LUN) host attachments.
   
  .DESCRIPTION
   Note : This cmdlet (Get-3parStatVlun) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatVLun) instead.
  
   The Get-3parStatVlun command displays statistics for Virtual Volumes (VVs) and Logical Unit Number (LUN) host attachments.
   
  .EXAMPLE
	Get-3parStatVlun -Iteration 1
	This example displays statistics for Virtual Volumes (VVs) and Logical Unit Number (LUN) host attachments.
   
  .EXAMPLE  
	Get-3parStatVlun -vvSum -Iteration 1
	This example displays statistics for Virtual Volumes (VVs) and Specifies that sums for VLUNs of the same VV are displayed.
	
  .EXAMPLE  
	Get-3parStatVlun -vvSum -RW -Iteration 1
	
  .EXAMPLE  
	Get-3parStatVlun -vvSum -RW -VVname xxx -Iteration 1
   
  .EXAMPLE  
	Get-3parStatVlun -VVname demovv1 -Iteration 1
	This example displays statistics for Virtual Volumes (VVs) and only Logical Disks (LDs) mapped to VVs that match any of the specified names to be displayed.
 				
  .PARAMETER LW  		:	Lists the host’s World Wide Name (WWN) or iSCSI names.
			
  .PARAMETER Domainsum 	:	Specifies that sums for VLUNs are grouped by domain in the display.
	
  .PARAMETER vvSum 		:	Specifies that sums for VLUNs of the same VV are displayed.
	
  .PARAMETER Hostsum  	:	Specifies that sums for VLUNs are grouped by host in the display.
	
  .PARAMETER RW 			:	Specifies reads and writes to be displayed separately.
	
  .PARAMETER Begin		:	Specifies that I/O averages are computed from the system start time.
	
  .PARAMETER IDLEP  		:	Includes a percent idle columns in the output.
	
  .PARAMETER NI			:	Specifies that statistics for only nonidle devices are displayed.
	
  .PARAMETER domian    
	Shows only Virtual Volume Logical Unit Number (VLUNs) whose VVs are in domains with names that match one or more of the specified domain names or patterns.
	
  .PARAMETER VVname     
	Requests that only Logical Disks (LDs) mapped to VVs that match any of the specified names to be displayed.
	
  .PARAMETER LUN  
	Specifies that VLUNs with LUNs matching the specified LUN(s) or pattern(s) are displayed.
	
  .PARAMETER nodes
	Specifies that the display is limited to specified nodes and Physical Disks (PDs) connected to those
	nodes.
	
  .PARAMETER  Iteration
	Specifies that the histogram is to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parStatVlun
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parStatVlun
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$RW,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$IDLEP,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Begin,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$NI, 
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$LW,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$DomainSum,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$vvSum,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$HostSum,
		
		[Parameter(Position=9, Mandatory=$false)]
		[System.String]
		$domian  ,
						
		[Parameter(Position=10, Mandatory=$false)]
		[System.String]
		$VVname ,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$LUN ,
		
		[Parameter(Position=12, Mandatory=$false)]
		[System.String]
		$nodes,
		
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$Iteration ,
				
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Get-3parStatVlun  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatVlun   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatVlun   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statvlun "
	if($Iteration)
	{	
		$cmd+=" -iter $Iteration "	
	}
	else	
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}	
	
	if($RW)	
	{
		$cmd +=" -rw "
	}
	if($Begin)	
	{
		$cmd+=" -begin "
	}
	if($IDLEP)	
	{
		$cmd+=" -idlep "
	}	
	if($NI)	
	{
		$cmd+=" -ni "
	}	
	if($LW)	
	{
		$cmd +=" -lw "
	}
	if($DomainSum)	
	{
		$cmd+=" -domainsum "
	}
	if($vvSum)	
	{
		$cmd+=" -vvsum "
	}	
	if($HostSum)	
	{
		$cmd+=" -hostsum "
	}
	if ($domian)
	{
		$cmd+=" -domain $domian"
	}	
	if ($VVname)
	{
		$s= get-3parvv -vvName  $VVname
		if ($s -match $VVname )
		{
			$cmd+=" -v $VVname"
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Get-3parStatVlun  VVname in unavailable "
			Return "FAILURE : -VVname $VVname  is Unavailable to execute. "
		}		
	}
	if ($LUN)
	{
		$cmd+=" -l $LUN"
	}	
	if ($nodes)
	{
		$cmd+=" -nodes $nodes"
	}				
		
	#write-host " $cmd"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Get-3parStatVlun command command displays statistics for Virtual Volumes (VVs) and Logical Unit Number (LUN) host attachments. with the command  " "INFO:"
	$range1 = $Result.count
	#write-host "count = $range1"
	if($range1 -eq "4")
	{
		return "No data available"
	}	
	if(($range1 -eq "6") -and ($NI))
	{
		return "No data available"
	}
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 3
		if($LW)
		{	
			Add-Content -Path $tempFile -Value "Lun,VVname,Host,Port,Host_WWN/iSCSI_Name,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date"
		}
		elseif($DomainSum)
		{
			Add-Content -Path $tempFile -Value "Domain,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date" 
		}
		elseif($vvSum)
		{
			Add-Content -Path $tempFile -Value "VVname,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date"
		}
		elseif($RW)
		{
			Add-Content -Path $tempFile -Value "Lun,VVname,Host,Port,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date"
		}
		elseif($Begin)
		{
			Add-Content -Path $tempFile -Value "Lun,VVname,Host,Port,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date"
		}
		elseif($IDLEP)
		{ #IOSz
			Add-Content -Path $tempFile -Value "Lun,VVname,Host,Port,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,IOSz_Cur,IOSz_Avg,Time,Date"
		}
		elseif($NI)
		{
			Add-Content -Path $tempFile -Value "Lun,VVname,Host,Port,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date"
		}
		elseif($HostSum)
		{
			Add-Content -Path $tempFile -Value "Hostname,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date"
		}
		else
		{
			Add-Content -Path $tempFile -Value "Lun,VVname,Host,Port,r/w,r/w_Cur,r/w_Avg,r/w_Max,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,Svt_Cur,Svt_Avg,Qlen,Time,Date" 
		}
		foreach ($s in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")	
			if ($s -match "r/w")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "cur"))
			{
			continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "11")
			{
				continue
			}
			if (($aa -eq "13") -And ($IDLEP))
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
} # End Get-3parStatVlun

####################################################################################################################
## FUNCTION Get-3parStatVV
####################################################################################################################

Function Get-3parStatVV
{
<#
  .SYNOPSIS
   The Get-3parStatVV command displays statistics for Virtual Volumes (VVs) in a timed loop.
   
  .DESCRIPTION
    Note : This cmdlet (Get-3parStatVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatVv) instead.
  
	The Get-3parStatVV command displays statistics for Virtual Volumes (VVs) in a timed loop.
   
  .EXAMPLE
	Get-3parStatVV -Iteration 1
   This Example displays statistics for Virtual Volumes (VVs) in a timed loop.
   
   
  .EXAMPLE  
	Get-3parStatVV -RW -Iteration 1
   This Example displays statistics for Virtual Volumes (VVs) with specification of read/write option.
   
  .EXAMPLE  
	Get-3parStatVV -Delay -Seconds 2 -Iteration 1
	Specifies the interval in seconds that statistics are sampled from using an integer from 1 through 2147483.
	
  .EXAMPLE  
	Get-3parStatVV -RW -domain ZZZ -VVname demovv1 -Iteration 1
	This Example displays statistics for Virtual Volumes (VVs) with Only statistics are displayed for the specified VVname.			

  .PARAMETER RW :	Specifies reads and writes to be displayed separately.
 
  .PARAMETER Delay  : <Seconds> Specifies the interval in seconds that statistics are sampled from using an integer from 1 through 2147483. If no count is specified, the
						 command defaults to 2 seconds.
		
  .PARAMETER NI : Specifies that statistics for only non-idle devices are displayed. This option is shorthand for the option -filt curs,t,iops,0.
	
  .PARAMETER domian    
	Shows only Virtual Volume Logical Unit Number (VLUNs) whose VVs are in domains with names that match one or more of the specified domain names or patterns.
	
  .PARAMETER  Iteration
	Specifies that the histogram is to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
	
  .PARAMETER  VVname
	Only statistics are displayed for the specified VV.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parStatVV
    LASTEDIT: 08/11/2015
    KEYWORDS: Get-3parStatVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$RW ,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$NI ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Delay  ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$domian  ,
					
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$VVname ,	
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Iteration ,
				
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Get-3parStatVV  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatVV   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatVV   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "statvv "
	if($Iteration)
	{
		$cmd+=" -iter $Iteration "	
	}
	else	
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "
	}	
	
	if ($RW)
	{
		$cmd+=" -rw "
	}
	if ($Delay)
	{
		$cmd+=" -d $Delay "
	}
	if ($NI)
	{
		$cmd+=" -ni "
	}
	if ($domian)
	{
		$cmd+=" -domain $domian"
	}			
	if ($VVname)
	{
		$cmd+="  $VVname"
	}	
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing The Get-3parStatVV command displays statistics for Virtual Volumes (VVs) in a timed loop. with the command  " "INFO:" 
	$range1 = $Result.count
	if($range1 -eq "4")
	{
		return "No data available"
	}	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		Add-Content -Path $tempFile -Value "VVname,r/w,I/O_Cur,I/O_Avg,I/O_Max,KB_Cur,KB_Avg,KB_Max,Svt_Cur,Svt_Avg,IOSz_Cur,IOSz_Avg,Qlen,Time,Date"
		foreach ($s in  $Result[0..$LastItem] )
		{
			if ($s -match "r/w")
			{
				$s= [regex]::Replace($s,"^ +","")
				$s= [regex]::Replace($s," +"," ")
				$s= [regex]::Replace($s," ",",")
				$a=$s.split(",")
				$global:time1 = $a[0]
				$global:date1 = $a[1]
				continue
			}
			if (($s -match "----") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "VVname"))
			{
			continue
			}
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +",",")# Replace one or more spaces with comma to build CSV line
			$aa=$s.split(",").length
			if ($aa -eq "11")
			{
				continue
			}
			$s +=",$global:time1,$global:date1"
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile	
		del $tempFile
	}
	else
	{
		return $Result
	}	
} # End Get-3parStatVV
####################################################################################################################
## FUNCTION New-3parRCopyTarget
####################################################################################################################
Function New-3parRCopyTarget
{
<#
  .SYNOPSIS
   The New-3parRCopyTarget command creates a remote-copy target definition.
   
 .DESCRIPTION
    Note : This cmdlet (New-3parRCopyTarget) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-RCopyTarget) instead.
 
    The New-3parRCopyTarget command creates a remote-copy target definition.
   
  .EXAMPLE  
	New-3parRCopyTarget -TargetName demo1 -RCIP -NSP_IP 1:2:3:10.1.1.1
	This Example creates a remote-copy target, with option N_S_P_IP Node ,Slot ,Port and IP address. as 1:2:3:10.1.1.1 for Target Name demo1
	
  .EXAMPLE
	New-3parRCopyTarget -TargetName demo1 -RCIP -NSP_IP "1:2:3:10.1.1.1,1:2:3:10.20.30.40"
	This Example creates a remote-copy with multiple targets
	
  .EXAMPLE 
	 New-3parRCopyTarget -TargetName demo1 -RCFC -Node_WWN 1122112211221122 -NSP_WWN 1:2:3:1122112211221122
	This Example creates a remote-copy target, with option NSP_WWN Node ,Slot ,Port and WWN as 1:2:3:1122112211221122 for Target Name demo1
		
  .EXAMPLE 
	 New-3parRCopyTarget -TargetName demo1 -RCFC -Node_WWN 1122112211221122 -NSP_WWN "1:2:3:1122112211221122,1:2:3:2244224422442244"
	This Example creates a remote-copy of FC with multiple targets
		
  .PARAMETER TargetName
	The name of the target definition to be created, specified by using up to 23 characters.

  .PARAMETER RCIP	:	remote copy over IP (RCIP).
	
  .PARAMETER RCFC	:	remote copy over Fibre Channel (RCFC).
		
  .PARAMETER Node_WWN
	The node's World Wide Name (WWN) on the target system (Fibre Channel target only).
	
  .PARAMETER NSP_IP
	Node number:Slot number:Port Number:IP Address of the Target to be created.
	
  .PARAMETER NSP_WWN
	Node number:Slot number:Port Number:World Wide Name (WWN) address on the target system.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parRCopyTarget
    LASTEDIT: 08/25/2015
    KEYWORDS: New-3parRCopyTarget
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$RCIP,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$RCFC,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Disabled,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Node_WWN,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$NSP_IP,
		
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$NSP_WWN,
				
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In New-3parRCopyTarget   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parRCopyTarget   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parRCopyTarget   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "creatercopytarget"
	
	if ($Disabled)	
	{	
		$cmd+=" -disabled "
	}
	if ($TargetName)	
	{	
		$cmd+=" $TargetName "
	}
	else
	{
		Write-DebugLog "Stop: -TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}
	
	if ($RCIP)	
	{	
		if($RCFC)
		{
			return "FAILURE : Use either RCIP or RCFC"
		}
		else
		{
			$cmd+=" IP "
		}
	}
	if ($RCFC)	
	{	
		if($RCIP)
		{
			return "FAILURE : Use either RCIP or RCFC"
		}
		else
		{
			$cmd+=" FC "
		}		
	}
	if($NSP_IP)
	{
		if($RCFC)
		{
			return "Error : -NSP_IP $NSP_IP cannot be used, Along with $RCFC.  "
		}
		$s = $NSP_IP
		$s= [regex]::Replace($s,","," ")	
		$cmd+="$s"
	}
	if ($Node_WWN)
	{
		if($RCIP)
		{
			return "Error : -Node_WWN $Node_WWN cannot be used, Along with $RCIP.  "
		}		
		$cmd+=" $Node_WWN "	
		if ($NSP_WWN)
		{				
			$s = $NSP_WWN
			$s= [regex]::Replace($s,","," ")	
			$cmd+="$s"
		}
	}	
	if ($cmd -eq "creatercopytarget")
	{
		write-debuglog "Error: no parameters passed "
		return get-help New-3parRCopyTarget		
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  The New-3parRCopyTarget command creates a remote-copy target definition.   " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing New-3parRCopyTarget Command "
	}
	else
	{
		return  "FAILURE : While Executing New-3parRCopyTarget $Result "
	} 	
} # End New-3parRCopyTarget
####################################################################################################################
## FUNCTION New-3parRCopyGroup
###################################################################################################################

Function New-3parRCopyGroup
{
<#
  .SYNOPSIS
   The New-3parRCopyGroup command creates a remote-copy volume group.
   
  .DESCRIPTION
    Note : This cmdlet (New-3parRCopyGroup) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-RCopyGroup) instead.
  
    The New-3parRCopyGroup command creates a remote-copy volume group.   
	
  .EXAMPLE	
	New-3parRCopyGroup -GroupName AS_TEST -TargetName CHIMERA03 -Mode sync

  .EXAMPLE
	New-3parRCopyGroup -GroupName AS_TEST1 -TargetName CHIMERA03 -Mode async

  .EXAMPLE
	New-3parRCopyGroup -GroupName AS_TEST2 -TargetName CHIMERA03 -Mode periodic

  .EXAMPLE
	New-3parRCopyGroup -domain DEMO -GroupName AS_TEST3 -TargetName CHIMERA03 -Mode periodic     
		
  .PARAMETER domain
	Creates the remote-copy group in the specified domain.
	
  .PARAMETER Usr_Cpg_Name
	Specify the local user CPG and target user CPG that will be used for volumes that are auto-created.
	
  .PARAMETER Target_TargetCPG
	Specify the local user CPG and target user CPG that will be used for volumes that are auto-created.
	
  .PARAMETER Snp_Cpg_Name
	 Specify the local snap CPG and target snap CPG that will be used for volumes that are auto-created.
	
  .PARAMETER Target_TargetSNP
	 Specify the local snap CPG and target snap CPG that will be used for volumes that are auto-created.
	
  .PARAMETER GroupName
	Specifies the name of the volume group, using up to 22 characters if the mirror_config policy is set, or up to 31 characters otherwise. This name is assigned with this command.	
	
  .PARAMETER TargetName	
	Specifies the target name associated with this group.
	
  .PARAMETER Mode 	
	sync—synchronous replication
	async—asynchronous streaming replication
	periodic—periodic asynchronous replication
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  New-3parRCopyGroup
    LASTEDIT: 08/26/2015
    KEYWORDS: New-3parRCopyGroup
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$GroupName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,	
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Mode,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$domain,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Usr_Cpg_Name,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Target_TargetCPG,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Snp_Cpg_Name,		
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Target_TargetSNP,
				
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	Write-DebugLog "Start: In New-3parRCopyGroup   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parRCopyGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parRCopyGroup   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "creatercopygroup"	
	if ($domain)	
	{
		$cmd+=" -domain $domain"
	}
	if ($Usr_Cpg_Name)	
	{
		$cmd+=" -usr_cpg $Usr_Cpg_Name "
		if($Target_TargetCPG)
		{
			$cmd+= " $TargetName"
			$cmd+= ":$Target_TargetCPG "			
		}
		else
		{
			return "Target_TargetCPG is required with Usr CPG option"
		}
	}
	if ($Snp_Cpg_Name)	
	{
		$cmd+=" -snp_cpg $Snp_Cpg_Name "
		if($Target_TargetSNP)
		{
			$cmd+= " $TargetName"
			$cmd+= ":$Target_TargetSNP "			
		}
		else
		{
			return "Target_TargetSNP is required with Usr CPG option"
		}
	}
	if ($GroupName)
	{
		$cmd+=" $GroupName"
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "			
	}	
	if ($TargetName)
	{		
		$cmd+=" $TargetName"
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}
	if ($Mode)
	{		
		$a = "sync","async","periodic"
		$l=$Mode
		if($a -eq $l)
		{
			$cmd+=":$Mode "	
			
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting  New-3parRCopyGroup   since Mode $Mode in incorrect "
			Return "FAILURE : Mode :- $Mode is an Incorrect Mode  [a]  can be used only . "
		}		
	}
	else
	{
		Write-DebugLog "Stop: Mode is mandatory" $Debug
		return "Error :  -Mode is mandatory. "			
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  The command creates a remote-copy volume group..   " "INFO:" 	
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing  New-3parRCopyGroup Command $Result"
	}
	else
	{
		return  "FAILURE : While Executing  New-3parRCopyGroup 	$Result "
	} 	
} # End New-3parRCopyGroup	
####################################################################################################################
## FUNCTION Sync-3parRCopy
####################################################################################################################
Function Sync-3parRCopy
{
<#
  .SYNOPSIS
   The Sync-3parRCopy command manually synchronizes remote-copy volume groups.
   
  .DESCRIPTION
    Note : This cmdlet (Sync-3parRCopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Sync-Rcopy) instead.
  
    The Sync-3parRCopy command manually synchronizes remote-copy volume groups.
   
  .EXAMPLE
	Sync-3parRCopy -Wait -TargetName RCFC_Romulus_1 -GroupName AS_TEST1	   
	   
  .EXAMPLE  
	Sync-3parRCopy -N -TargetName RCFC_Romulus_1 -GroupName AS_TEST1	

  .PARAMETER Wait
	Wait for synchronization to complete before returning to a command prompt.
	
  .PARAMETER N
	Do not save resynchronization snapshot. This option is only relevant for asynchronous periodic mode volume groups.

  .PARAMETER Ovrd
	Force synchronization without prompting for confirmation, even if volumes are already synchronized.
	
  .PARAMETER TargetName
	Indicates that only the group on the specified target is started. If this option is not used, by default,  	the New-3parRcopyGroup command will affect all of a group’s targets.
	
  .PARAMETER GroupName 
	Specifies the name of the remote-copy volume group to be synchronized.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Sync-3parRCopy
    LASTEDIT: 08/22/2015
    KEYWORDS: Sync-3parRCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Wait,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$N,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Ovrd,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$GroupName,
				
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Sync-3parRCopy   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Sync-3parRCopy  since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Sync-3parRCopy  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd= "syncrcopy "
	
	if ($Wait)
	{
		$cmd+= " -w "
	}
	if ($N)
	{
		$cmd+= " -n "
	}
	if ($Ovrd)
	{
		$cmd+= " -ovrd "
	}
	if ($TargetName)
	{
		$cmd+=" -t $TargetName  "
	}			
	if ($GroupName)
	{		
		$cmd+="$GroupName "			
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "			
	}			
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  The Sync-3parRCopy command manually synchronizes remote-copy volume groups.-->" "INFO:" 
	return $Result	
} # End Sync-3parRCopy
####################################################################################################################
## FUNCTION Stop-3parRCopyGroup
####################################################################################################################
Function Stop-3parRCopyGroup
{
<#
  .SYNOPSIS
   The Stop-3parRCopyGroup command stops the remote-copy functionality for the specified remote-copy volume group.
   
  .DESCRIPTION
    Note : This cmdlet (Stop-3parRCopyGroup ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Stop-RCopyGroup) instead.
  
    The Stop-3parRCopyGroup command stops the remote-copy functionality for the specified remote-copy volume group.
  	   
  .EXAMPLE  
   Stop-3parRCopyGroup -NoSnap -GroupName RCFromRMC 	  
   
  .EXAMPLE  
	Stop-3parRCopyGroup -TargetName RCFC_Romulus_1 -GroupName RCFromRMC 	
 
  .PARAMETER NoSnap
	In synchronous mode, this option turns off the creation of snapshots.
  
  .PARAMETER TargetName
	Indicates that only the group on the specified target is started. If this option is not used, by default,  	the New-3parRcopyGroup command will affect all of a group’s targets.
	
  .PARAMETER GroupName 
	The name of the remote-copy volume group.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Stop-3parRCopyGroup
    LASTEDIT: 08/22/2015
    KEYWORDS: Stop-3parRCopyGroup
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$NoSnap,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$GroupName,		
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)	
	
	Write-DebugLog "Start: In Stop-3parRCopyGroup   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Stop-3parRCopyGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Stop-3parRCopyGroup   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "stoprcopygroup -f "
	
	if ($NoSnap)
	{
		$cmd+= " -nosnap "
	}	
	if ($TargetName)
	{
		$cmd+=" -t $TargetName  "
	}
	
	if ($GroupName)
	{
		$cmd1= "showrcopy"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
		if ($Result1 -match $GroupName )
		{
			$cmd+="$GroupName "
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Stop-3parRCopyGroup  GroupName in Not Available "
			Return "FAILURE : -GroupName $GroupName  is Not Available Try with a new Name. "				
		}		
	}
	else
	{	
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  The Stop-3parRCopyGroup command stops the remote-copy functionality for the specified remote-copy volume group. " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Stop-3parRCopyGroup Command $Result"
	}
	else
	{
		return 	$Result
	}
} # End Stop-3parRCopyGroup
####################################################################################################################
## FUNCTION Start-3parRcopy
####################################################################################################################
Function Start-3parRcopy
{
<#
  .SYNOPSIS
   The Start-3parRcopy command starts the Remote Copy Service.
   
  .DESCRIPTION
     Note : This cmdlet (Start-3parRcopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-Rcopy) instead.
  
     The Start-3parRcopy command starts the Remote Copy Service.
   
  .EXAMPLE  
	Start-3parRcopy 
     command starts the Remote Copy Service.
				
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Start-3parRcopy
    LASTEDIT: 08/22/2015
    KEYWORDS: Start-3parRcopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(

		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)			
	Write-DebugLog "Start: In Start-3parRcopy   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Start-3parRcopy   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Start-3parRcopy  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "startrcopy "	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  The Start-3parRcopy command disables the remote-copy functionality for any started remote-copy " "INFO:" 	
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Start-3parRcopy Command `n $Result "
	}
	else
	{
		return  "FAILURE : While Executing Start-3parRcopy `n $Result "
	}
} # End Start-3parRcopy
####################################################################################################################
## FUNCTION Stop-3parRCopy
####################################################################################################################
Function Stop-3parRCopy
{
<#
  .SYNOPSIS
   The Stop-3parRCopy command disables the remote-copy functionality for any started remote-copy
   
  .DESCRIPTION
     Note : This cmdlet (Stop-3parRCopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Stop-Rcopy) instead.
  
     The Stop-3parRCopy command disables the remote-copy functionality for any started remote-copy
   
  .EXAMPLE  
	Stop-3parRCopy -StopGroups
   This example disables the remote-copy functionality of all primary remote-copy volume groups
 
  .PARAMETER StopGroups
	Specifies that any started remote-copy volume groups are stopped.
	
  .PARAMETER Clear
	Specifies that configuration entries affiliated with the stopped mode are deleted.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Stop-3parRCopy
    LASTEDIT: 08/22/2015
    KEYWORDS: Stop-3parRCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$StopGroups,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Clear,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)	
	Write-DebugLog "Start: In Stop-3parRCopy   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Stop-3parRCopy   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Stop-3parRCopy  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "stoprcopy -f "	
	if ($StopGroups)
	{	
		$cmd+=" -stopgroups "
	}
	if ($Clear)
	{	
		$cmd+=" -clear "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  The Stop-3parRCopy command disables the remote-copy functionality for any started remote-copy " "INFO:" 	
	if($Result -match "Remote Copy config is not started")
	{
		Return "Command Execute Successfully :- Remote Copy config is not started"
	}
	else
	{
		return $Result
	}
} # End Stop-3parRCopy
####################################################################################################################
## FUNCTION Get-3parStatRCopy
####################################################################################################################
Function Get-3parStatRCopy
{
<#
  .SYNOPSIS
   The Get-3parStatRCopy command displays statistics for remote-copy volume groups.
   
	.DESCRIPTION
	   Note : This cmdlet (Get-3parStatRCopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-StatRCopy) instead.
	
       The Get-3parStatRCopy command displays statistics for remote-copy volume groups.
	
	.EXAMPLE
	Get-3parStatRCopy -HeartBeat -Iteration 1
	This example shows statistics for sending links ,Specifies that the heartbeat round-trip time.
	
	.EXAMPLE  
	Get-3parStatRCopy -Iteration 1
	This example shows statistics for sending links link0 and link1.
   
	.EXAMPLE  
	Get-3parStatRCopy -HeartBeat -Unit k -Iteration 1
	This example shows statistics for sending links ,Specifies that the heartbeat round-trip time & displays statistics as kilobytes	
	
	.PARAMETER HeartBeat  
	Specifies that the heartbeat round-trip time of the links should be displayed in addition to the link throughput.
	 
	.PARAMETER Unit
	Displays statistics as kilobytes (k), megabytes (m), or gigabytes (g). If no unit is specified, the default is kilobytes.
	
	.PARAMETER Iteration 
	Specifies that I/O statistics are displayed a specified number of times as indicated by the num argument using an integer from 1 through 2147483647.
	
	.PARAMETER Interval
	Specifies the interval, in seconds, that statistics are sampled using an
	integer from 1 through 2147483647. If no interval is specified, the option
	defaults to an interval of two seconds.
	
	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parStatRCopy
    LASTEDIT: 08/22/2015
    KEYWORDS: Get-3parStatRCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Interval,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$HeartBeat,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Unit,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Iteration,		
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Get-3parStatRCopy   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parStatRCopy   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parStatRCopy   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "statrcopy "	
	if ($Iteration)
	{
		$cmd += " -iter $Iteration "
	}	
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "			
	}
	
	if ($Interval )
	{
		$cmd+= "-d $Interval "
	}
	if ($HeartBeat )
	{
		$cmd+= "-hb "
	}
	if ($Unit)
	{
		$c= "k","m","g"		
		if ($c -eq $Unit)
		{
			$cmd+=" -u $Unit  "
		}
		else
		{
			Write-DebugLog "Stop: Exiting Get-3parStatRCopy  Unit  in unavailable "
			Return "FAILURE : -Unit  $Unit is Unavailable to execute use only [k | m | g]. "
		}
	}		
				
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  The Get-3parStatRCopy command displays statistics for remote-copy volume groups. " "INFO:" 
	return  $Result
	<#
	if($Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		$incre = "true" 		
		foreach ($s in  $Result[1..$LastItem] )
		{			
			$s= [regex]::Replace($s,"^ ","")						
			$s= [regex]::Replace($s," +",",")			
			$s= [regex]::Replace($s,"-","")			
			$s= $s.Trim()			
			if($incre -eq "true")
			{		
				$sTemp1=$s				
				$sTemp = $sTemp1.Split(',')					
				$sTemp[5]="Current(Throughput)"				
				$sTemp[6]="Average(Throughput)"
				$sTemp[7]="Current(Write_Same_Zero)"				
				$sTemp[8]="Average(Writ_Same_Zero)"
				$newTemp= [regex]::Replace($sTemp,"^ ","")			
				$newTemp= [regex]::Replace($sTemp," ",",")				
				$newTemp= $newTemp.Trim()
				$s=$newTemp							
			}					
			Add-Content -Path $tempFile -Value $s	
			$incre="false"
		}			
		Import-Csv $tempFile 
		del $tempFile			
	}
	else
	{			
		return  $Result
	}	
#>	
} # End Get-3parStatRCopy
####################################################################################################################
## FUNCTION Start-3parRCopyGroup
##################################################################################################################
Function Start-3parRCopyGroup
{
<#
  .SYNOPSIS
   The Start-3parRCopyGroup command enables remote copy for the specified remote-copy volume group.
   
 .DESCRIPTION
     Note : This cmdlet (Start-3parRCopyGroup) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-RCopyGroup) instead.
 
     The Start-3parRCopyGroup command enables remote copy for the specified remote-copy volume group.
	
 .EXAMPLE
	Start-3parRCopyGroup -NoSync -GroupName Group1
	This example starts remote copy for Group1.   
	
 .EXAMPLE  	
	Start-3parRCopyGroup -NoSync -GroupName Group2 -Volumes_Snapshots "vv1:sv1 vv2:sv2 vv3:sv3"
	This Example  starts Group2, which contains 4 virtual volumes, and specify starting snapshots, with vv4 starting from a full resynchronization.
	
 .PARAMETER NoSync	:	Prevents the initial synchronization and sets the virtual volumes to a synchronized state.
	
 .PARAMETER Wait	:	Specifies that the command blocks until the initial synchronization is complete. The system generates an event when the synchronization is complete.
		
 .PARAMETER Pat		:	Specifies that specified patterns are treated as glob-style patterns and that all remote-copy groups matching the specified pattern will be started.
	 
 .PARAMETER Target
	Indicates that only the group on the specified target is started. If this option is not used, by default,  	the New-3parRcopyGroup command will affect all of a group’s targets.
	
 .PARAMETER GroupName 
	The name of the remote-copy volume group.
	
  .PARAMETER Volumes_Snapshots 
	 Member volumes and snapshots can be specified by vv:sv syntax, where vv is
	the base volume name and sv is the snapshot volume name. To indicate a full
	resync, specify the starting, read-only snapshot with "-".

  
 .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
 .Notes
    NAME:  Start-3parRCopyGroup
    LASTEDIT: 08/22/2015
    KEYWORDS: Start-3parRCopyGroup
   
 .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$NoSync,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Wait,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Pat,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$GroupName,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Volumes_Snapshots,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Start-3parRCopyGroup   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Start-3parRCopyGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Start-3parRCopyGroup   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "startrcopygroup "
	
	if ($NoSync)
	{
		$cmd+= "-nosync "
	}
	if ($Wait)
	{
		$cmd+= "-wait "
	}
	if ($Pat)
	{
		$cmd+= "-pat "
	}
	
	if ($TargetName )
	{
		$cmd+="-t $TargetName  "
	}			
	if ($GroupName)
	{
		$cmd+="$GroupName "
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "
	}
	if ($Volumes_Snapshots)
	{			
		$cmd+="$Volumes_Snapshots "
	}
	if("startrcopygroup " -eq $cmd )
	{
		get-help Start-3parRCopyGroup
		return " "
	}	
	#write-host "$cmd"			
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  The Start-3parRCopyGroup command enables remote copy for the specified remote-copy volume group.using   " "INFO:"
	return $Result	
} # End Start-3parRCopyGroup
####################################################################################################################
## FUNCTION Get-3parRCopy
####################################################################################################################
Function Get-3parRCopy
{
<#
  .SYNOPSIS
   The Get-3parRCopy command displays details of the remote-copy configuration.
   
  .DESCRIPTION
    Note : This cmdlet (Get-3parRCopy) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Rcopy) instead.
  
    The Get-3parRCopy command displays details of the remote-copy configuration.
	
  .EXAMPLE
	Get-3parRCopy -Detailed -Links
	This Example displays details of the remote-copy configuration and Specifies all remote-copy links.   
	
  .EXAMPLE  	
	Get-3parRCopy -Detailed -Domain PSTest -Targets Demovv1
	This Example displays details of the remote-copy configuration which Specifies either all target definitions
 
  .PARAMETER Detailed	:	Displays more detailed configuration information.
	
  .PARAMETER QW	:	Displays additional target specific automatic transparent failover-related configuration, where applicable.
  	 
  .PARAMETER Domain
	Shows only remote-copy links whose virtual volumes are in domains with names that match one or more of the specified domain name or pattern.
	
  .PARAMETER Links
	Specifies all remote-copy links.
		
  .PARAMETER Groups 
	Specifies either all remote-copy volume groups or a specific remote-copy volume group by name or by glob-style pattern.
  
  .PARAMETER Targets
	Specifies either all target definitions or a specific target definition by name or by glob-style pattern.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parRCopy
    LASTEDIT: 08/22/2015
    KEYWORDS: Get-3parRCopy
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$Detailed,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[switch]
		$QW,
		
		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Domain,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Links,
		
		[Parameter(Position=4, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Groups,
		
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Targets,
			
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Get-3parRCopy   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parRCopy   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parRCopy   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "showrcopy "	
	if ($Detailed)
	{
		$cmd += " -d "
	}
	if ($QW)
	{
		$cmd += " -qw "
	}
	if ($Domain)
	{
		$cmd += " -domain $Domain "
	}
	if ($Links)
	{
		$cmd += " links "
	}	
	if ($Groups)
	{
		$cmd+="groups $Groups "		
	}	
	if ($Targets)
	{		
		$cmd+="targets $Targets "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  The Get-3parRCopy command displays details of the remote-copy configuration." "INFO:" 
	return $Result
} # End Get-3parRCopy
####################################################################################################################
## FUNCTION New-3parRCopyGroupCPG
###################################################################################################################
Function New-3parRCopyGroupCPG
{
<#
  .SYNOPSIS
   The New-3parRCopyGroupCPG command creates a remote-copy volume group.
   
  .DESCRIPTION
    Note : This cmdlet (New-3parRCopyGroupCPG) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-RCopyGroupCPG) instead.
  
    The New-3parRCopyGroupCPG command creates a remote-copy volume group.   
	
  .EXAMPLE
	New-3parRCopyGroupCPG -GroupName ABC -TargetName XYZ -Mode Sync	
	
  .EXAMPLE  
	New-3parRCopyGroupCPG -UsrCpg -LocalUserCPG BB -UsrTargetName XYZ -TargetUserCPG CC -GroupName ABC -TargetName XYZ -Mode Sync

  .PARAMETER UsrCpg
  
  .PARAMETER SnpCpg
  
  .PARAMETER UsrTargetName
  
  .PARAMETER SnpTargetName
	  
  .PARAMETER LocalUserCPG
	Specifies the local user CPG and target user CPG that will be used for volumes that are auto-created.
	
  .PARAMETER TargetUserCPG
	-TargetUserCPG target:Targetcpg The local CPG will only be used after fail-over and recovery.
	
  .PARAMETER LocalSnapCPG
	Specifies the local snap CPG and target snap CPG that will be used for volumes that are auto-created. 
	
  .PARAMETER TargetSnapCPG
	-LocalSnapCPG  target:Targetcpg
		
  .PARAMETER domain
	Creates the remote-copy group in the specified domain.
	
  .PARAMETER GroupName
	Specifies the name of the volume group, using up to 22 characters if the mirror_config policy is set, or up to 31 characters otherwise. This name is assigned with this command.	
	
  .PARAMETER TargetName
	Specifies the target name associated with this group.
	
  .PARAMETER Mode 	
	sync—synchronous replication
	async—asynchronous streaming replication
	periodic—periodic asynchronous replication
 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with New-3ParPoshSshConnection Or New-3parCLIConnection
	
  .Notes
    NAME:  New-3parRCopyGroupCPG
    LASTEDIT: 08/26/2015
    KEYWORDS: New-3parRCopyGroupCPG
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$GroupName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Mode,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$domain,
			
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$UsrCpg,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$LocalUserCPG,
		
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetUserCPG,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$UsrTargetName,
		
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
		[Switch]
		$SnpCpg,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$LocalSnapCPG,
				
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetSnapCPG,
		
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$SnpTargetName,
				
		[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
	)		
	Write-DebugLog "Start: In New-3parRCopyGroupCPG - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parRCopyGroupCPG since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parRCopyGroupCPG since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
		
	$cmd= "creatercopygroup"
	
	if ($domain)	
	{
		$cmd+=" -domain $domain"
	}	
	if($UsrCpg)
	{
		$cmd+=" -usr_cpg"
		if($LocalUserCPG)
		{
			$cmd+=" $LocalUserCPG"
		}
		if ($UsrTargetName)
		{		
			$cmd+=" $UsrTargetName"
		}
		if($TargetUserCPG)
		{
			$cmd+=":$TargetUserCPG "				
		}
	}
	if($SnpCpg)
	{
		$cmd+=" -snp_cpg"
		if($LocalSnapCPG)
		{
			$cmd+=" $LocalSnapCPG"
		}
		if ($SnpTargetName)
		{		
			$cmd+=" $SnpTargetName"
		}
		if($TargetSnapCPG)
		{
			$cmd+=":$TargetSnapCPG "				
		}
	}
	if ($GroupName)
	{
		$cmd+=" $GroupName"
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "			
	}	
	if ($TargetName)
	{		
		$cmd+=" $TargetName"
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}
	if ($Mode)
	{		
		$a = "sync","async","periodic"
		$l=$Mode
		if($a -eq $l)
		{
			$cmd+=":$Mode "				
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting  New-3parRCopyGroupCPG   since Mode $Mode in incorrect "
			Return "FAILURE : Mode :- $Mode is an Incorrect Mode  [sync | async | periodic]  can be used only . "
		}		
	}
	else
	{
		Write-DebugLog "Stop: Mode is mandatory" $Debug
		return "Error :  -Mode is mandatory. "			
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  The command creates a remote-copy volume group..   " "INFO:" 	
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing  New-3parRCopyGroupCPG Command $Result"
	}
	else
	{
		return  "FAILURE : While Executing  New-3parRCopyGroupCPG 	$Result "
	} 	
} # End New-3parRCopyGroupCPG	

#EndRegion

####################################################################################################################
## FUNCTION Set-3parRCopyTargetName
####################################################################################################################
Function Set-3parRCopyTargetName
{
<#
  .SYNOPSIS
	The Set-3parRCopyTargetName Changes the name of the indicated target using the <NewName> specifier.
   
  .DESCRIPTION
    Note : This cmdlet (Set-3parRCopyTargetName) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-RCopyTargetName) instead.
  
	The Set-3parRCopyTargetName Changes the name of the indicated target using the <NewName> specifier.
  
  .EXAMPLE
	Set-3parRCopyTargetName -NewName DemoNew1  -TargetName Demo1
	This Example Changes the name of the indicated target using the -NewName demoNew1.   
	
  .PARAMETER NewName 
	The new name for the indicated target. 
 
  .PARAMETER TargetName  
	Specifies the target name for the target definition.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection	
	  
  .Notes
    NAME: Set-3parRCopyTargetName
    LASTEDIT: 08/25/2015
    KEYWORDS: Set-3parRCopyTargetName
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$NewName,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Set-3parRCopyTargetName  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parRCopyTargetName    since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parRCopyTargetName    since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "setrcopytarget name "
	if ($NewName)
	{
		$cmd+="$NewName "
	}
	else
	{
		Write-DebugLog "Stop: NewName is mandatory" $Debug
		return "Error :  -NewName is mandatory. "			
	}	
	if ($TargetName)
	{
		$cmd+="$TargetName "
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Set-3parRCopyTargetName Changes the name of the indicated target   " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parRCopyTargetName $Result"
	}
	else
	{
		return  "FAILURE : While Executing Set-3parRCopyTargetName $Result "
	} 	
} # End Set-3parRCopyTargetName 

####################################################################################################################
## FUNCTION Set-3parRCopyTarget
####################################################################################################################
Function Set-3parRCopyTarget
{
<#
  .SYNOPSIS
	The Set-3parRCopyTarget Changes the name of the indicated target using the <NewName> specifier.
   
  .DESCRIPTION
    Note : This cmdlet (Set-3parRCopyTarget) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-RCopyTarget) instead.
  
	The Set-3parRCopyTarget Changes the name of the indicated target using the <NewName> specifier.  
	
  .EXAMPLE
	Set-3parRCopyTarget -Enable -TargetName Demo1
	This Example Enables  the targetname Demo1.
	
  .EXAMPLE
	Set-3parRCopyTarget -Disable -TargetName Demo1
	This Example disables  the targetname Demo1.  
	
  .PARAMETER Enables/Disable 
	specify enable or disable 
 
  .PARAMETER TargetName  
	Specifies the target name 
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection		
  
  .Notes
    NAME: Set-3parRCopyTarget
    LASTEDIT: 08/25/2015
    KEYWORDS: Set-3parRCopyTarget
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Enable ,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Disable ,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)			
	Write-DebugLog "Start: In Set-3parRCopyTarget  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parRCopyTarget since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parRCopyTarget since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "setrcopytarget "
	if ($Enable)
	{	
		$cmd += " enable "
	}
	elseif ($Disable)
	{	
		$cmd += " disable "
	}
	else
	{
		Write-DebugLog "Stop: Option  is mandatory" $Debug
		return "Error :  At-list select any one of them Enable/Disable. "			
	}	
	if ($TargetName)
	{
		$cmd+=" $TargetName "
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Set-3parRCopyTarget Changes the name of the indicated target   " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parRCopyTarget $Result"
	}
	else
	{
		return  "FAILURE : While Executing Set-3parRCopyTarget $Result "
	} 	
} # End Set-3parRCopyTarget
####################################################################################################################
## FUNCTION Set-3parRCopyTargetPol
####################################################################################################################
Function Set-3parRCopyTargetPol
{
<#
  .SYNOPSIS
  The Set-3parRCopyTargetPol command Sets the policy for the specified target using the <policy> specifier
   
  .DESCRIPTION
    Note : This cmdlet (Set-3parRCopyTargetPol) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-RCopyTargetPol) instead.
  
	The Set-3parRCopyTargetPol command Sets the policy for the specified target using the <policy> specifier

  .EXAMPLE
	Set-3parRCopyTargetPol -Mmirror_Config -Target vv3
	This Example sets the policy that all configuration commands,involving the specified target are duplicated for the target named vv3.   	

  .PARAMETER Mirror_Config
	Specifies that all configuration commands,involving the specified target are duplicated.

  .PARAMETER No_Mirror_Config
	If not specified, all configuration commands are duplicated.	

  .PARAMETER Target
	Specifies the target name for the target definition.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection

  .PARAMETER	Note
	That the no_mirror_config specifier should only be used to allow recovery from an unusual error condition and only used after consulting your HPE representative.

  .Notes
	NAME: Set-3parRCopyTargetPol
	LASTEDIT: 08/24/2015
	KEYWORDS: Set-3parRCopyTargetPol
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Mirror_Config,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$No_Mirror_Config,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Target,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Set-3parRCopyTargetPol   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parRCopyTargetPol   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parRCopyTargetPol   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "setrcopytarget pol "
	if ($Mirror_Config)
	{
		$cmd+=" mirror_config "
	}
	elseif($No_Mirror_Config)
	{
			$cmd+=" no_mirror_config "
	}
	else
	{
		Write-DebugLog "Stop: policy is mandatory" $Debug
		return "Error :  Please select at-list any one from Mirror_Config/No_Mirror_Config. "			
	}
	if ($Target)
	{
		$cmd+="$Target "
	}
	else
	{
		Write-DebugLog "Stop: Target is mandatory" $Debug
		return "Error :  -Target is mandatory. "			
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Set-3parRCopyTargetPol Command Sets the policy for the specified target using the <policy> specifier." "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parRCopyTargetPol Command "
	}
	else
	{
		return  "FAILURE : While Executing Set-3parRCopyTargetPol $result "
	} 
} # End Set-3parRCopyTargetPol

####################################################################################################################
## FUNCTION Set-3parRCopyTargetWitness
####################################################################################################################
Function Set-3parRCopyTargetWitness
{
<#
  .SYNOPSIS
	The Set-3parRCopyTargetWitness Changes the name of the indicated target using the <NewName> specifier.
   
  .DESCRIPTION
    Note : This cmdlet (Set-3parRCopyTargetWitness) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-RCopyTargetWitness) instead.
  
	The Set-3parRCopyTargetWitness Changes the name of the indicated target using the <NewName> specifier.
  
  .EXAMPLE
	Set-3parRCopyTargetWitness -SubCommand create -Witness_ip 1.2.3.4 -Target TEST
	This Example Changes the name of the indicated target using the -NewName demoNew1.
		
  .EXAMPLE	
	Set-3parRCopyTargetWitness -SubCommand create -Remote -Witness_ip 1.2.3.4 -Target TEST
	
  .EXAMPLE
	Set-3parRCopyTargetWitness -SubCommand start -Target TEST
  
  .EXAMPLE
	Set-3parRCopyTargetWitness -SubCommand stop  -Target TEST
  
  .EXAMPLE  
	Set-3parRCopyTargetWitness -SubCommand remove -Remote -Target TEST
  
  .EXAMPLE  
	Set-3parRCopyTargetWitness -SubCommand check  -Node_id 1 -Witness_ip 1.2.3.4
  
  .PARAMETER SubCommand 
	Sub Command like create, Start, Stop, Remove and check.				
	create
	Create an association between a synchronous target and a Quorum Witness (QW)
	as part of a Peer Persistence configuration.
	start|stop|remove
	Activate, deactivate and remove the ATF configuration.
	check
	Check connectivity to Quorum Witness.
		
 .PARAMETER Remote
	Used to forward a witness subcommand to the be executed on the
	remote HPE 3PAR Storage System. When used in conjunction with the
	"witness check" subcommand the target must be specified - when executing
	on the local storage system target specification is not required to check
	connectivity with the Quorum Witness.
	
  .PARAMETER Witness_ip
	The IP address of the Quorum Witness (QW) application, to which the
	HPE 3PAR Storage System will connect to update its status periodically.
		
  .PARAMETER Target			
	Specifies the target name for the target definition previously created
	with the creatercopytarget command.
  
  .PARAMETER Node_id	
	Nodee id with node option
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection	
	  
  .Notes
    NAME: Set-3parRCopyTargetWitness
    LASTEDIT: 08/25/2015
    KEYWORDS: Set-3parRCopyTargetWitness
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$SubCommand,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$Remote,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Witness_ip,
		
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Target,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$Node_id,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Set-3parRCopyTargetWitness  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parRCopyTargetWitness    since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parRCopyTargetWitness    since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if($SubCommand)
	{
		$Scmd  = "create","start","stop","remove","check"
		if($Scmd -eq $SubCommand)
		{		
			if($SubCommand -eq "create")
			{
				if($Witness_ip -And $Target)
				{
					$cmd= "setrcopytarget witness $SubCommand"	
					if ($Remote)
					{
						$cmd += " -remote "
					}
					$cmd +=" $Witness_ip $Target"
					#write-host "$cmd"
					$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
					write-debuglog "  Executing Set-3parRCopyTargetWitness Changes the name of the indicated target   " "INFO:" 
					if([string]::IsNullOrEmpty($Result))
					{
						return  "Success : Executing Set-3parRCopyTargetWitness Command`n$result "
					}
					else
					{
						return  "FAILURE : While Executing Set-3parRCopyTargetWitness`n$result "
					} 
				}		
				else
				{
					write-debugLog "witness_ip, target missing or anyone of them are missing." "ERR:" 
					return "FAILURE : witness_ip, target missing or anyone of them are missing."
				}
			}
			elseif($SubCommand -eq "start" -Or $SubCommand -eq "stop" -Or $SubCommand -eq "remove")
			{
				if($Target)
				{
					$cmd= "setrcopytarget witness $SubCommand"	
					if ($Remote)
					{
						$cmd += " -remote "
					}
					$cmd +=" $Target"
					#write-host "$cmd"
					$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
					write-debuglog "  Executing Set-3parRCopyTargetWitness Changes the name of the indicated target   " "INFO:" 
					if([string]::IsNullOrEmpty($Result))
					{
						return  "Success : Executing Set-3parRCopyTargetWitness Command`n$result "
					}
					else
					{
						return  "FAILURE : While Executing Set-3parRCopyTargetWitness`n$result "
					} 
				}		
				else
				{
					write-debugLog "Target is missing." "ERR:" 
					return "FAILURE : Target is missing."
				}
			}
			elseif($SubCommand -eq "check")
			{
				if($Witness_ip)
				{
					$cmd= "setrcopytarget witness $SubCommand"	
					if ($Remote)
					{
						$cmd += " -remote "
					}
					if($Node_Id)
					{
						$cmd += " -node $Node_Id "
					}
					$cmd +=" $Witness_ip $Target"
					#write-host "$cmd"
					$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
					write-debuglog "  Executing Set-3parRCopyTargetWitness Changes the name of the indicated target   " "INFO:" 
					if([string]::IsNullOrEmpty($Result))
					{
						return  "Success : Executing Set-3parRCopyTargetWitness Command`n$result "
					}
					else
					{
						return  "FAILURE : While Executing Set-3parRCopyTargetWitness`n$result "
					} 
				}		
				else
				{
					write-debugLog "Witness_ip is missing." "ERR:" 
					return "FAILURE : Witness_ip is missing."
				}
			}
			else
			{
				return "Invalid Sub Command, specify value as [witness create | start | stop | remove | check]"
			}
		}
		else
		{
			return "Sub Command should any one of this [witness create | start | stop | remove | check ]"
		}
	}
	else
	{
		return "Sub Command is missing, specify value as [witness create | start | stop | remove | check ]"
	}	
} # End Set-3parRCopyTargetWitness 

####################################################################################################################
## FUNCTION Set-3parRCopyGroupPeriod
####################################################################################################################
Function Set-3parRCopyGroupPeriod
{
<#
  .SYNOPSIS
  Sets a resynchronization period for volume groups in asynchronous periodic mode.
   
  .DESCRIPTION
    Note : This cmdlet (Set-3parRCopyGroupPeriod) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-RCopyGroupPeriod) instead.
  
	Sets a resynchronization period for volume groups in asynchronous periodic mode.   
	
  .EXAMPLE
	Set-3parRCopyGroupPeriod -Period 10m -TargetName CHIMERA03 -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPeriod -Period 10m -Force -TargetName CHIMERA03 -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPeriod -Period 10m -T 1 -TargetName CHIMERA03 -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPeriod -Period 10m -Stopgroups -TargetName CHIMERA03 -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPeriod -Period 10m -Local -TargetName CHIMERA03 -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPeriod -Period 10m -Natural -TargetName CHIMERA03 -GroupName AS_TEST	
  
  .PARAMETER PeriodValue
	Specifies the time period in units of seconds (s), minutes (m), hours (h), or days (d), for automatic resynchronization (for example, 14h for 14 hours).
		
  .PARAMETER TargetName
	Specifies the target name for the target definition
	
  .PARAMETER GroupName
	Specifies the name of the volume group whose policy is set, or whose target direction is switched.
	
  .PARAMETER T
	When used with <dr_operation> subcommands, specifies the target to which
	the <dr_operation> command applies to.  This is optional for single
	target groups, but is required for multi-target groups. If no groups are
	specified, it applies to all relevant groups. When used with the pol subcommand,
	specified for a group with multiple targets then the command only applies to
	that target, otherwise it will be applied to all targets.

	NOTE: The -t option without the groups listed in the command, will only work
	in a unidirectional configuration. For bidirectional configurations, the -t
	option must be used along with the groups listed in the command.

  .PARAMETER Force
	Does not ask for confirmation for disaster recovery commands.

  .PARAMETER Nostart
	Specifies that groups are not started after role reversal is completed.
	This option can be used for failover, recover and restore subcommands.

  .PARAMETER Nosync
	Specifies that groups are not synced after role reversal is completed
	through the recover, restore and failover specifiers.

  .PARAMETER Discard
	Specifies not to check a group's other targets to see if newer data
	should be pushed from them if the group has multiple targets. The use
	of this option can result in the loss of the most recent changes to
	the group's volumes and should be used carefully. This option is only
	valid for the failover specifier.

  .PARAMETER Nopromote
	This option is only valid for the failover and reverse specifiers.  When
	used with the reverse specifier, specifies that the synchronized snapshots
	of groups that are switched from primary to secondary not be promoted to
	the base volume. When used with the failover specifier, it indicates that
	snapshots of groups that are switched from secondary to primary should not
	be promoted to the base volume in the case where all volumes of the group
	were not synchronized to the same time point.
	The incorrect use of this option can lead to the primary secondary volumes
	not being consistent.

  .PARAMETER Nosnap
	Specifies that snapshots are not taken of groups that are switched from
	secondary to primary. Additionally, existing snapshots are deleted
	if groups are switched from primary to secondary. The use of this option
	may result in a full synchronization of the secondary volumes. This
	option can be used for failover, restore, and reverse subcommands.

  .PARAMETER Stopgroups
	Specifies that groups are stopped before running the reverse subcommand.
	
  .PARAMETER Local
	The -local option only applies to the "reverse" operation and then
	only when the -natural or -current options to the "reverse" operation
	are specified. Specifying -local with the "reverse" operation and an
	associated -natural or -current option will only affect the array
	where the command is issued and will not be mirrored to any other
	arrays in the Remote Copy configuration.

  .PARAMETER Natural
	Specifying the -natural option with the "reverse" operation changes
	the role of the groups but not the direction of data flow between the
	groups on the arrays. For example, if the role of the groups are
	"primary" and "secondary", issuing the -natural option with the
	"reverse" operation will result in the role of the groups becoming
	"primary-rev" and "secondary-rev" respectively. The direction of data
	flow between the groups is not affected only the roles. Since the
	-natural option does not change the direction of data flow between
	groups it does not require the groups be stopped.

  .PARAMETER Current
	Specifying the -current option with the "reverse" operation changes
	both the role and the direction of data flow between the groups. For
	example, if the roles of the groups are "primary" and "secondary",
	issuing the -current option to the "reverse" operation will result in
	the roles of the group becoming "secondary-rev" and "primary-rev"
	respectively and the direction data flow between the groups is
	reversed. Since the -current option actually reverses the direction of
	data replication it requires the group be stopped.

	Both the -natural and -current options must be used with care to
	ensure the Remote Copy groups do not end up in a non-deterministic
	state (like "secondary", "secondary-rev" for example) and to ensure
	data loss does not occur by inadvertently changing the direction of
	data flow and re-syncing old data on top of newer data.

  .PARAMETER Waittask
	Wait for all tasks created by this command to complete before returning.
	This option applies to the failover, recover, restore, and reverse subcommands.

  .PARAMETER Pat
	Specifies that specified patterns are treated as glob-style patterns
	and all remote copy groups matching the specified pattern will be
	set. The -pat option can specify a list of patterns. This option must be used
	if <pattern> specifier is used.

  .PARAMETER Usr_cpg 
	Specifies the local user CPG and target user CPG that will be used for
	volumes that are auto-created. The local CPG will only be used after failover
	and recover.

  .PARAMETER Snp_cpg 
	Specifies the local snap CPG and target snap CPG that will be used for
	volumes that are auto-created. The local CPG will only be used after failover
	and recover.

  .PARAMETER Usr_cpg_unset
	Unset all user CPGs that are associated with this group.
  .PARAMETER Snp_cpg_unset
	Unset all snap CPGs that are associated with this group.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with New-3ParPoshSshConnection Or New-3parCLIConnection
	
  .Notes
    NAME:  Set-3parRCopyGroupPeriod
    LASTEDIT: 08/24/2015
    KEYWORDS: Set-3parRCopyGroupPeriod
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$PeriodValue,
		
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$Force,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$T,	
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$Nostart,
		
		[Parameter(Position=4, Mandatory=$false)]
		[Switch]
		$Nosync,
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$Discard,
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Nopromote,
		
		[Parameter(Position=7, Mandatory=$false)]
		[Switch]
		$Nosnap,
		
		[Parameter(Position=8, Mandatory=$false)]
		[Switch]
		$Stopgroups,
		
		[Parameter(Position=9, Mandatory=$false)]
		[Switch]
		$Local,
		
		[Parameter(Position=10, Mandatory=$false)]
		[Switch]
		$Natural,
		
		[Parameter(Position=11, Mandatory=$false)]
		[Switch]
		$Current,
		
		[Parameter(Position=12, Mandatory=$false)]
		[Switch]
		$Waittask,
		
		[Parameter(Position=13, Mandatory=$false)]
		[Switch]
		$Pat,
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$Usr_cpg,
		
		[Parameter(Position=15, Mandatory=$false)]
		[System.String]
		$Snp_cpg,
		
		[Parameter(Position=16, Mandatory=$false)]
		[Switch]
		$Usr_cpg_unset,
		
		[Parameter(Position=17, Mandatory=$false)]
		[Switch]
		$Snp_cpg_unset,
		
		[Parameter(Position=18, Mandatory=$false)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=19, Mandatory=$false)]
		[System.String]
		$GroupName,
		
		[Parameter(Position=20, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection
	)			
	Write-DebugLog "Start: In Set-3parRCopyGroupPeriod   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parRCopyGroupPeriod   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parRCopyGroupPeriod   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
		
	$cmd= "setrcopygroup period "
		
	if($Force)
	{
		$cmd+= " -f "
	}
	if($T)
	{
		$cmd+= " -t $T "
	}
	if($Nostart)
	{
		$cmd+= " -nostart "
	}
	if($Nosync)
	{
		$cmd+= " -nosync "
	}
	if($Discard)
	{
		$cmd+= " -discard "
	}
	if($Nopromote)
	{
		$cmd+= " -nopromote "
	}
	if($Nosnap)
	{
		$cmd+= " -nosnap "
	}
	if($Stopgroups)
	{
		$cmd+= " -stopgroups "
	}
	if($Local)
	{
		$cmd+= " -local "
	}
	if($Natural)
	{
		$cmd+= " -natural "
	}
	if($Current)
	{
		$cmd+= " -current "
	}	
	if($Waittask)
	{
		$cmd+= " -waittask "
	}	
	if($Pat)
	{
		$cmd+= " -pat "
	}
	if($Usr_cpg)
	{
		$cmd+= " -usr_cpg $Usr_cpg "
	}
	if($Snp_cpg)
	{
		$cmd+= " -snp_cpg $Snp_cpg "
	}	
	if($Usr_cpg_unset)
	{
		$cmd+= " -usr_cpg_unset "
	}
	if($Snp_cpg_unset)
	{
		$cmd+= " -snp_cpg_unset "
	}	
	if ($PeriodValue)
	{
		$p=$PeriodValue[-1]
		$s = "s | m | h | d"	 			
		if($s -match $p)
		{
			$cmd+=" $PeriodValue "
		}
		else
		{
			return " ERROR : -Period $PeriodValue is not Valid . use [ s | m | h |  d ] Only, Ex: -Period 10s "	
		}
	}
	else
	{
		Write-DebugLog "Stop: Period is mandatory" $Debug
		return "Error : -Period is mandatory. "			
	}
	if ($TargetName)
	{
		$cmd+= " $TargetName "
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "
	}	
	if ($GroupName)
	{
		$cmd+= " $GroupName "
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "
	}
	
	#write-host "Command = $cmd"
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Set-3parRCopyGroupPeriod using cmd   " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parRCopyGroupPeriod Command "
	}
	else
	{
		return  "FAILURE : While Executing Set-3parRCopyGroupPeriod  $Result"
	} 
} # End Set-3parRCopyGroupPeriod
####################################################################################################################
## FUNCTION Set-3parRCopyGroupPol
####################################################################################################################
Function Set-3parRCopyGroupPol
{
<#
  .SYNOPSIS
    Sets the policy of the remote-copy volume group for dealing with I/O failure and error handling.
   
  .DESCRIPTION
    Note : This cmdlet (Set-3parRCopyGroupPol) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-RCopyGroupPol) instead.
  
	Sets the policy of the remote-copy volume group for dealing with I/O failure and error handling.
    
  .EXAMPLE	
	Set-3parRCopyGroupPol -policy test -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -policy auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -Force -policy auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -T 1 -policy auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -Stopgroups -policy auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -Local -policy auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -Natural -policy auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -policy no_auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -Force -policy no_auto_failover -GroupName AS_TEST

  .EXAMPLE
	Set-3parRCopyGroupPol -T 1 -policy no_auto_failover -GroupName AS_TEST
	
   .PARAMETER T
	When used with <dr_operation> subcommands, specifies the target to which
	the <dr_operation> command applies to.  This is optional for single
	target groups, but is required for multi-target groups. If no groups are
	specified, it applies to all relevant groups. When used with the pol subcommand,
	specified for a group with multiple targets then the command only applies to
	that target, otherwise it will be applied to all targets.

	NOTE: The -t option without the groups listed in the command, will only work
	in a unidirectional configuration. For bidirectional configurations, the -t
	option must be used along with the groups listed in the command.

  .PARAMETER Force
	Does not ask for confirmation for disaster recovery commands.

  .PARAMETER Nostart
	Specifies that groups are not started after role reversal is completed.
	This option can be used for failover, recover and restore subcommands.

  .PARAMETER Nosync
	Specifies that groups are not synced after role reversal is completed
	through the recover, restore and failover specifiers.

  .PARAMETER Discard
	Specifies not to check a group's other targets to see if newer data
	should be pushed from them if the group has multiple targets. The use
	of this option can result in the loss of the most recent changes to
	the group's volumes and should be used carefully. This option is only
	valid for the failover specifier.

  .PARAMETER Nopromote
	This option is only valid for the failover and reverse specifiers.  When
	used with the reverse specifier, specifies that the synchronized snapshots
	of groups that are switched from primary to secondary not be promoted to
	the base volume. When used with the failover specifier, it indicates that
	snapshots of groups that are switched from secondary to primary should not
	be promoted to the base volume in the case where all volumes of the group
	were not synchronized to the same time point.
	The incorrect use of this option can lead to the primary secondary volumes
	not being consistent.

  .PARAMETER Nosnap
	Specifies that snapshots are not taken of groups that are switched from
	secondary to primary. Additionally, existing snapshots are deleted
	if groups are switched from primary to secondary. The use of this option
	may result in a full synchronization of the secondary volumes. This
	option can be used for failover, restore, and reverse subcommands.

  .PARAMETER Stopgroups
	Specifies that groups are stopped before running the reverse subcommand.
	
  .PARAMETER Local
	The -local option only applies to the "reverse" operation and then
	only when the -natural or -current options to the "reverse" operation
	are specified. Specifying -local with the "reverse" operation and an
	associated -natural or -current option will only affect the array
	where the command is issued and will not be mirrored to any other
	arrays in the Remote Copy configuration.

  .PARAMETER Natural
	Specifying the -natural option with the "reverse" operation changes
	the role of the groups but not the direction of data flow between the
	groups on the arrays. For example, if the role of the groups are
	"primary" and "secondary", issuing the -natural option with the
	"reverse" operation will result in the role of the groups becoming
	"primary-rev" and "secondary-rev" respectively. The direction of data
	flow between the groups is not affected only the roles. Since the
	-natural option does not change the direction of data flow between
	groups it does not require the groups be stopped.

  .PARAMETER Current
	Specifying the -current option with the "reverse" operation changes
	both the role and the direction of data flow between the groups. For
	example, if the roles of the groups are "primary" and "secondary",
	issuing the -current option to the "reverse" operation will result in
	the roles of the group becoming "secondary-rev" and "primary-rev"
	respectively and the direction data flow between the groups is
	reversed. Since the -current option actually reverses the direction of
	data replication it requires the group be stopped.

	Both the -natural and -current options must be used with care to
	ensure the Remote Copy groups do not end up in a non-deterministic
	state (like "secondary", "secondary-rev" for example) and to ensure
	data loss does not occur by inadvertently changing the direction of
	data flow and re-syncing old data on top of newer data.

  .PARAMETER Waittask
	Wait for all tasks created by this command to complete before returning.
	This option applies to the failover, recover, restore, and reverse subcommands.

  .PARAMETER Pat
	Specifies that specified patterns are treated as glob-style patterns
	and all remote copy groups matching the specified pattern will be
	set. The -pat option can specify a list of patterns. This option must be used
	if <pattern> specifier is used.

  .PARAMETER Usr_cpg 
	Specifies the local user CPG and target user CPG that will be used for
	volumes that are auto-created. The local CPG will only be used after failover
	and recover.

  .PARAMETER Snp_cpg 
	Specifies the local snap CPG and target snap CPG that will be used for
	volumes that are auto-created. The local CPG will only be used after failover
	and recover.

  .PARAMETER Usr_cpg_unset
	Unset all user CPGs that are associated with this group.
	
  .PARAMETER Snp_cpg_unset
	Unset all snap CPGs that are associated with this group.
   
  .PARAMETER policy 
	auto_failover	:	Configure automatic failover on a remote-copy group.
	
	no_auto_failover	:	Remote-copy groups will not be subject to automatic fail-over (default).
	
	auto_recover	:	Specifies that if the remote copy is stopped as a result of the remote-copy links going down,	the group is restarted automatically after the links come back up.
	
	no_auto_recover	:	Specifies that if the remote copy is stopped as a result of the remote-copy links going down, the group must be restarted manually after the links come back up (default).
		
	over_per_alert	:	If a synchronization of a periodic remote-copy group takes longer to complete than its synchronization period then an alert will be generated.
	
	no_over_per_alert 	:	If a synchronization of a periodic remote-copy group takes longer to complete than its synchronization period then an alert will not be generated.
	
	path_management	:	Volumes in the specified group will be enabled to support ALUA.
	
	no_path_management	:	ALUA behaviour will be disabled for volumes in the group.	
	
  .PARAMETER GroupName
	Specifies the name of the volume group whose policy is set, or whose target direction is switched.
  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with New-3ParPoshSshConnection Or New-3parCLIConnection
	
  .Notes
    NAME:  Set-3parRCopyGroupPol
    LASTEDIT: 08/24/2015
    KEYWORDS: Set-3parRCopyGroupPol
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[Switch]
		$Force,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$T,	
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$Nostart,
		
		[Parameter(Position=4, Mandatory=$false)]
		[Switch]
		$Nosync,
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$Discard,
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Nopromote,
		
		[Parameter(Position=7, Mandatory=$false)]
		[Switch]
		$Nosnap,
		
		[Parameter(Position=8, Mandatory=$false)]
		[Switch]
		$Stopgroups,
		
		[Parameter(Position=9, Mandatory=$false)]
		[Switch]
		$Local,
		
		[Parameter(Position=10, Mandatory=$false)]
		[Switch]
		$Natural,
		
		[Parameter(Position=11, Mandatory=$false)]
		[Switch]
		$Current,
		
		[Parameter(Position=12, Mandatory=$false)]
		[Switch]
		$Waittask,
		
		[Parameter(Position=13, Mandatory=$false)]
		[Switch]
		$Pat,
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$Usr_cpg,
		
		[Parameter(Position=15, Mandatory=$false)]
		[System.String]
		$Snp_cpg,
		
		[Parameter(Position=16, Mandatory=$false)]
		[Switch]
		$Usr_cpg_unset,
		
		[Parameter(Position=17, Mandatory=$false)]
		[Switch]
		$Snp_cpg_unset,
		
		[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$policy,
		
		[Parameter(Position=19, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$GroupName,
		
		[Parameter(Position=20, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection
	)	
	Write-DebugLog "Start: In Set-3parRCopyGroupPol   - validating input values" $Debug 
	#check if connection object contents are null/empty		
	if(!$SANConnection)
	{			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parRCopyGroupPol   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parRCopyGroupPol   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
			
	$cmd= "setrcopygroup pol "
	
	if($Force)
	{
		$cmd+= " -f "
	}
	if($T)
	{
		$cmd+= " -t $T "
	}
	if($Nostart)
	{
		$cmd+= " -nostart "
	}
	if($Nosync)
	{
		$cmd+= " -nosync "
	}
	if($Discard)
	{
		$cmd+= " -discard "
	}
	if($Nopromote)
	{
		$cmd+= " -nopromote "
	}
	if($Nosnap)
	{
		$cmd+= " -nosnap "
	}
	if($Stopgroups)
	{
		$cmd+= " -stopgroups "
	}
	if($Local)
	{
		$cmd+= " -local "
	}
	if($Natural)
	{
		$cmd+= " -natural "
	}
	if($Current)
	{
		$cmd+= " -current "
	}	
	if($Waittask)
	{
		$cmd+= " -waittask "
	}	
	if($Pat)
	{
		$cmd+= " -pat "
	}
	if($Usr_cpg)
	{
		$cmd+= " -usr_cpg $Usr_cpg "
	}
	if($Snp_cpg)
	{
		$cmd+= " -snp_cpg $Snp_cpg "
	}	
	if($Usr_cpg_unset)
	{
		$cmd+= " -usr_cpg_unset "
	}
	if($Snp_cpg_unset)
	{
		$cmd+= " -snp_cpg_unset "
	}
	if ($policy )
	{
		$s = " auto_failover | no_auto_failover | auto_recover | no_auto_recover | over_per_alert | no_over_per_alert | path_management	| no_path_management "
	 	$demo = $policy
		if($s -match $demo)
		{
			$cmd+=" $policy "
		}
		else
		{
			return " FAILURE : -policy $policy is not Valid . use [$s] Only.  "	
		}
	}
	else
	{
		Write-DebugLog "Stop: policy is mandatory" $Debug
		return "Error :  -policy is mandatory. "
	}
	if ($GroupName)
	{		
		$cmd+="$GroupName "			
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "			
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Set-3parRCopyGroupPol using cmd    " "INFO:"	
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Executing Set-3parRCopyGroupPol Command "
	}
	else
	{
		return  "FAILURE : While Executing Set-3parRCopyGroupPol $Result "
	} 	
} # End Set-3parRCopyGroupPol
####################################################################################################################
## FUNCTION Remove-3parRCopyTarget
####################################################################################################################
Function Remove-3parRCopyTarget
{
<#
  .SYNOPSIS
   The Remove-3parRCopyTarget command command removes target designation from a remote-copy system and removes all links affiliated with that target definition.   
   
  .DESCRIPTION
   Note : This cmdlet (Remove-3parRCopyTarget) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-RCopyTarget) instead.
  
   The Remove-3parRCopyTarget command command removes target designation from a remote-copy system and removes all links affiliated with that target definition.   
 
  .EXAMPLE  
	Remove-3parRCopyTarget -ClearGroups -TargetName demovv1
    This Example removes target designation from a remote-copy system & Remove all groups.
		
  .PARAMETER ClearGroups :	Remove all groups that have no other targets or dismiss this target from groups with additional targets.
		
  .PARAMETER TargetName      
	The name of the group that currently includes the target.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parRCopyTarget
    LASTEDIT: 08/21/2015
    KEYWORDS: Remove-3parRCopyTarget
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$ClearGroups,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$TargetName,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Remove-3parRCopyTarget  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parRCopyTarget   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parRCopyTarget  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "removercopytarget -f "
	if ($ClearGroups)
	{
		$cmd+=" -cleargroups "
	}		
	if ($TargetName)
	{
		$cmd+=" $TargetName "	
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Remove-3parRCopyTarget  command removes target designation from a remote-copy system and removes all links affiliated with that target definitionusing. cmd   " "INFO:" 	
	if([string]::IsNullOrEmpty($Result))
	{
		return  "Success : Remove-3parRCopyTarget   "
	}
	else
	{
		return  "FAILURE : While Executing Remove-3parRCopyTarget $Result  "
	} 
} # End Remove-3parRCopyTarget
#EndRegion
####################################################################################################################
## FUNCTION Remove-3parRCopyGroup
###################################################################################################################
Function Remove-3parRCopyGroup
{
<#
  .SYNOPSIS
   The Remove-3parRCopyGroup command removes a remote-copy volume group or multiple remote-copy groups that match a given pattern.
   
  .DESCRIPTION
    Note : This cmdlet (Remove-3parRCopyGroup) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-RCopyGroup) instead.
  
    The Remove-3parRCopyGroup command removes a remote-copy volume group or multiple remote-copy groups that match a given pattern.	
   
  .EXAMPLE  
	Remove-3parRCopyGroup -Pat -GroupName testgroup*	
	This example Removes remote-copy groups that start with the name testgroup	
   
  .EXAMPLE  
	Remove-3parRCopyGroup -KeepSnap -GroupName group1	
	This example Removes the remote-copy group (group1) and retains the resync snapshots associated with each volume
		
  .PARAMETER Pat
	Specifies that specified patterns are treated as glob-style patterns and that all remote-copy groups matching the specified pattern will be removed.
				
  .PARAMETER KeepSnap
	Specifies that the local volume's resync snapshot should be retained.
	
  .PARAMETER RemoveVV
	Remove remote sides' volumes.	
	
  .PARAMETER GroupName      
	The name of the group that currently includes the target.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parRCopyGroup
    LASTEDIT: 08/21/2015
    KEYWORDS: Remove-3parRCopyGroup
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$RemoveVV,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$KeepSnap,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Pat,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$GroupName,
				
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	
	Write-DebugLog "Start: In Remove-3parRCopyGroup  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parRCopyGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parRCopyGroup  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "removercopygroup -f "	
	if ($RemoveVV)
	{
		$cmd+=" -removevv "
	}	
	if ($KeepSnap)
	{
		$cmd+=" -keepsnap "
	}
	if ($Pat)
	{
		$cmd+=" -pat "
	}
	if ($GroupName)
	{
		$cmd1= "showrcopy"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
		if ($Result1 -match $GroupName )
		{
			$cmd+=" $GroupName "
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Remove-3parRCopyGroup  GroupName in unavailable "
			Return "FAILURE : -GroupName $GroupName  is Unavailable . "
		}		
	}		
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "			
	}		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog "  Executing Remove-3parRCopyGroup  command removes a remote-copy volume group or multiple remote-copy groups that match a given pattern." "INFO:" 	
	if($Result -match "deleted")
	{
		return  "Success : Remove-3parRCopyGroup Command `n $Result  "
	}
	else
	{
		return  "FAILURE : While Executing DRemove-3parRCopyGroup `n $Result "
	} 	
} # End Remove-3parRCopyGroup
#EndRegion

####################################################################################################################
## FUNCTION Remove-3parRCopyVVFromGroup
####################################################################################################################
Function Remove-3parRCopyVVFromGroup
{
<#
  .SYNOPSIS
   The Remove-3parRCopyVVFromGroup command removes a virtual volume from a remote-copy volume group.
   
  .DESCRIPTION
   Note : This cmdlet (Remove-3parRCopyVVFromGroup) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-RCopyVvFromGroup) instead.
  
   The Remove-3parRCopyVVFromGroup command removes a virtual volume from a remote-copy volume group.
   
  .EXAMPLE
	Remove-3parRCopyVVFromGroup -VV_name vv1 -group_name Group1
	dismisses virtual volume vv1 from Group1:
   
  .EXAMPLE  
	Remove-3parRCopyVVFromGroup -Pat -VV_name testvv* -group_name Group1
	dismisses all virtual volumes that start with the name testvv from Group1:
   
  .EXAMPLE  
	Remove-3parRCopyVVFromGroup -KeepSnap -VV_name vv1 -group_name Group1
	dismisses volume vv1 from Group1 and removes the corresponding volumes of vv1 on all the target systems of Group1.
	
  .EXAMPLE 
	Remove-3parRCopyVVFromGroup -RemoveVV -VV_name vv2 -group_name Group1
	dismisses volume vv2 from Group2 and retains the resync snapshot associated with vv2 for this group.
	
  .PARAMETER Pat
	Specifies that specified patterns are treated as glob-style patterns and that all remote-copy volumes matching the specified pattern will be dismissed from the remote-copy group.
				
  .PARAMETER KeepSnap
	Specifies that the local volume's resync snapshot should be retained.
	
  .PARAMETER RemoveVV
	Remove remote sides' volumes.	
	    	
  .PARAMETER VVname
	The name of the volume to be removed. Volumes are added to a group with the admitrcopyvv command.	
	
  .PARAMETER GroupName      
	The name of the group that currently includes the target.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parRCopyVVFromGroup
    LASTEDIT: 08/21/2015
    KEYWORDS: Remove-3parRCopyVVFromGroup
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Pat,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$KeepSnap,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$RemoveVV,
				
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$VVname,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$GroupName,
				
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Remove-3parRCopyVVFromGroup  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parRCopyVVFromGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parRCopyVVFromGroup   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd= "dismissrcopyvv -f "	
	
	if ($Pat)
	{
		$cmd+=" -pat "
	}
	if ($KeepSnap)
	{
		$cmd+=" -keepsnap "
	}
	if ($RemoveVV)
	{
		$cmd+=" -removevv "
	}
	if ($VVname)
	{
		$cmd+=" $VVname "
	}
	else
	{
		Write-DebugLog "Stop: VVname is mandatory" $Debug
		return "Error :  -VVname is mandatory. "
	}
	if ($GroupName)
	{
		$cmd1= "showrcopy"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
		if ($Result1 -match $GroupName )
		{
			$cmd+=" $GroupName "
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Remove-3parRCopyVVFromGroup  GroupName in unavailable "
			Return "FAILURE : -GroupName $GroupName  is Unavailable to execute. "
		}	
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "		
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Remove-3parRCopyVVFromGroup  command removes a virtual volume from a remote-copy volume group.using cmd   " "INFO:" 
	return $Result
} # End Remove-3parRCopyVVFromGroup 
#EndRegion

####################################################################################################################
## FUNCTION Remove-3parRCopyTargetFromGroup
####################################################################################################################
Function Remove-3parRCopyTargetFromGroup
{
<#
  .SYNOPSIS
   The Remove-3parRCopyTargetFromGroup removes a remote-copy target from a remote-copy volume group.
   
 .DESCRIPTION
   Note : This cmdlet (Remove-3parRCopyTargetFromGroup) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-RCopyTargetFromGroup) instead.
 
   The Remove-3parRCopyTargetFromGroup removes a remote-copy target from a remote-copy volume group.
   
  .EXAMPLE
	Remove-3parRCopyTargetFromGroup -TargetName target1 -GroupName group1
   The following example removes target Target1 from Group1.
	
  .PARAMETER TargetName     
	The name of the target to be removed.
	
  .PARAMETER GroupName      
	The name of the group that currently includes the target.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Remove-3parRCopyTargetFromGroup
    LASTEDIT: 08/19/2015
    KEYWORDS: Remove-3parRCopyTargetFromGroup
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$GroupName,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	Write-DebugLog "Start: In Remove-3parRCopyTargetFromGroup  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parRCopyTargetFromGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parRCopyTargetFromGroup   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "dismissrcopytarget -f "	
	if ($TargetName)
	{		
		$cmd+=" $TargetName "
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "		
	}
	if ($GroupName)
	{
		$cmd1= "showrcopy"
		$Result1 = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd1
		if ($Result1 -match $GroupName )
		{
			$cmd+=" $GroupName "
		}
		else
		{
			Write-DebugLog "Stop: Exiting  Remove-3parRCopyTargetFromGroup GroupName in unavailable "
			Return "FAILURE : -GroupName $GroupName is Unavailable to execute. "
		}
	}
	else
	{
		Write-DebugLog "Stop: GroupName is mandatory" $Debug
		return "Error :  -GroupName is mandatory. "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Remove-3parRCopyTargetFromGroup removes a remote-copy target from a remote-copy volume group.using cmd   " "INFO:" 
	return  "$Result"
} # End Remove-3parRCopyTargetFromGroup

####################################################################################################################
## FUNCTION Approve-3parRCopyLink 
###################################################################################################################
Function Approve-3parRCopyLink
{
<#
  .SYNOPSIS
    The  command adds one or more links (connections) to a remote-copy target system.
	
  .DESCRIPTION
    Note : This cmdlet (Approve-3parRCopyLink) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Add-RCopyLink) instead.
  
    The  command adds one or more links (connections) to a remote-copy target system.  
  
  .EXAMPLE
  Approve-3parRCopyLink  -TargetName demo1 -N_S_P_IP 1:2:1:193.1.2.11
  This Example adds a link on System2 using the node, slot, and port information of node 1, slot 2, port 1 of the Ethernet port on the primary system. The IP address 193.1.2.11 specifies the address on the target system:
  
  .EXAMPLE
  Approve-3parRCopyLink  -TargetName System2 -N_S_P_WWN 5:3:2:1122112211221122
  This Example WWN creates an RCFC link to target System2, which connects to the local 5:3:2 (N:S:P) in the target system.
  
	
  .PARAMETER TargetName 
    Specify name of the TargetName to be updated.

  .PARAMETER N_S_P_IP
	Node number:Slot number:Port Number:IP Address of the Target to be created.
	
   .PARAMETER N_S_P_WWN
	Node number:Slot number:Port Number:World Wide Name (WWN) address on the target system.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Approve-3parRCopyLink   
    LASTEDIT: 07/22/2015
    KEYWORDS: Approve-3parRCopyLink 
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$TargetName,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$N_S_P_IP,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$N_S_P_WWN,
				
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Approve-3parRCopyLink    - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Approve-3parRCopyLink    since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Approve-3parRCopyLink   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd = "admitrcopylink "
	
	if ($TargetName)
	{
		$cmd += "$TargetName "
	}
	else
	{
		Write-DebugLog "Stop: TargetName is mandatory" $Debug
		return "Error :  -TargetName is mandatory. "			
	}	
	if($N_S_P_IP)
	{
		if ($N_S_P_WWN)
		{
			return "Error : -N_S_P_WWN and -N_S_P_IP cannot be used simultaneously.  "
		}
		$s = $N_S_P_IP
		$s= [regex]::Replace($s,","," ")
		$cmd+="$s"
		$cmd1="yes"
	}
	if ($N_S_P_WWN)
	{
		if("yes" -eq $cmd1)
		{
			return "Error : -N_S_P_WWN and -N_S_P_IP cannot be used simultaneously.  "
		}
		$s = $N_S_P_WWN
		$s= [regex]::Replace($s,","," ")
		$cmd+="$s"	
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "Approve-3parRCopyLink  command adds one or more links (connections) to a remote-copy target system. cmd   " "INFO:" 	
	return $Result	
} # End Approve-3parRCopyLink  
####################################################################################################################
## FUNCTION Get-3parHistRCopyVV
###################################################################################################################
Function Get-3parHistRCopyVV
{
<#
  .SYNOPSIS
   The Get-3parHistRCopyVV command shows a histogram of total remote-copy service times and backup system remote-copy service times in a timed loop.
	
  .DESCRIPTION
   Note : This cmdlet (Get-3parHistRCopyVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-HistRCopyVv) instead.
  
   The Get-3parHistRCopyVV command shows a histogram of total remote-copy service times and backup system 	remote-copy service times in a timed loop        
  
  .EXAMPLE
	Get-3parHistRCopyVV -iteration 1
	The Get-3parHistRCopyVV command shows a histogram of total remote-copy service iteration number of times
  
  .EXAMPLE
    Get-3parHistRCopyVV -iteration 1 -Sync
	The Get-3parHistRCopyVV command shows a histogram of total remote-copy service iteration number of times
	with option sync
	
  .EXAMPLE	
	Get-3parHistRCopyVV -group groupvv_1 -iteration

  .EXAMPLE	
	Get-3parHistRCopyVV -iteration 1 -Periodic
	
  .EXAMPLE	
	Get-3parHistRCopyVV -iteration 1 -PortSum
	
  .EXAMPLE	
	Get-3parHistRCopyVV -target name_vv1 -iteration 1
	The Get-3parHistRCopyVV command shows a histogram of total remote-copy service with specified target name.
	
  .EXAMPLE	
	Get-3parHistRCopyVV -group groupvv_1 -iteration   
	The Get-3parHistRCopyVV command shows a histogram of total remote-copy service with specified Group name.
	
  .PARAMETER Async - Show only volumes which are being copied in asynchronous mode.

  .PARAMETER sync - Show only volumes that are being copied in synchronous mode.
  
  .PARAMETER periodic- Show only volumes which are being copied in asynchronous periodic mode.
  
  .PARAMETER primary - Show only virtual volumes in the primary role.
  
  .PARAMETER secondary - Show only virtual volumes in the secondary role.
  
  .PARAMETER targetsum - Displays the sums for all volumes of a target.
  
  .PARAMETER portsum - Displays the sums for all volumes on a port.
  
  .PARAMETER groupsum - Displays the sums for all volumes of a volume group.
  
  .PARAMETER vvsum - Displays the sums for all targets and links of a virtual volume.
  
  .PARAMETER domainsum - Displays the sums for all volumes of a domain.

  .PARAMETER VV_Name
	Displays statistics only for the specified virtual volume or volume name
    pattern. Multiple volumes or patterns can be repeated (for example,
    <VV_name> <VV_name>). If not specified, all virtual volumes that are
    configured for remote copy are listed.
  
  .PARAMETER interval 
    <secs>  Specifies the interval in seconds that statistics are sampled from using an integer from 1 through 2147483. If no count is specified, the  command defaults to 2 seconds. 
  
  .PARAMETER Pct
	Shows the access count in each bucket as a percentage. If this option is
	not specified, the histogram shows the access counts.

  .PARAMETER Prev
	Specifies that the histogram displays data from a previous sample.
	If no option is specified, the histogram shows data from the beginning
	of the command's execution.
  
  .PARAMETER domain
	Shows only the virtual volumes that are in domains with names that match the specified domain name(s) or pattern(s).
	
  .PARAMETER target
   Shows only volumes whose group is copied to the specified target name or pattern. Multiple target names or patterns may be specified using a comma-separated list.
   
  .PARAMETER group
    Shows only volumes whose volume group matches the specified group name or pattern of names.
	Multiple group names or patterns may be specified using a comma-separated list.
  
  .PARAMETER iteration
    Specifies that the statistics are to stop after the indicated number of iterations using an integer from
	1 through 2147483647.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parHistRCopyVV
    LASTEDIT: 05/08/2015
    KEYWORDS: Get-3parHistRCopyVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$ASync,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Sync,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Periodic,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Primary,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Secondary,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$TargetSum,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$PortSum,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$GroupSum,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$VVSum,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$DomainSum,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$Pct,
		
		[Parameter(Position=11, Mandatory=$false)]
		[switch]
		$Prev,

		[Parameter(Position=12, Mandatory=$false)]
		[System.String]
		$VV_Name,
		
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$interval,	
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$domain,
		
		[Parameter(Position=15, Mandatory=$false)]
		[System.String]
		$group,
		
		[Parameter(Position=16, Mandatory=$false)]
		[System.String]
		$target,
		
		[Parameter(Position=17, Mandatory=$false)]
		[System.String]
		$iteration,		
		
		[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)	
	Write-DebugLog "Start: In Get-3parHistRCopyVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parHistRCopyVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parHistRCopyVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$Cmd = "histrcvv "
	
	if($ASync)	
	{
		$Cmd += " -async "
	}
	if($Sync)	
	{
		$Cmd += " -sync "
	}
	if($Periodic)	
	{
		$Cmd += " -periodic "
	}
	if($Primary)	
	{
		$Cmd += " -primary "
	}
	if($Secondary)	
	{
		$Cmd += " -secondary "
	}
	if($TargetSum)	
	{
		$Cmd += " -targetsum "
	}
	if($PortSum)	
	{
		$Cmd += " -portsum "
	}
	if($GroupSum)	
	{
		$Cmd += " -groupsum "
	}
	if($VVSum)	
	{
		$Cmd += " -vvsum "
	}
	if($DomainSum)	
	{
		$Cmd += " -domainsum "
	}
	if($Pct)	
	{
		$Cmd += " -pct "
	}
	if($Prev)	
	{
		$Cmd += " -prev "
	}	
	if($interval)
	{
		$Cmd += " -d $interval"
	}
	if ($domain)
	{ 
		$Cmd += " -domain  $domain"
	}
	if ($group)
	{ 
		$Cmd += " -g $group"			
	}
	if ($target)
	{ 
		$Cmd += " -t $target"			
	}
	if ($VV_Name)
	{ 
		$Cmd += " $VV_Name"			
	}
	if ($iteration)
	{ 
		$Cmd += " -iter $iteration "			
	}	
	else
	{
		Write-DebugLog "Stop: Iteration is mandatory" $Debug
		return "Error :  -Iteration is mandatory. "		
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	write-debuglog " histograms sums for all synchronous remote - copy volumes" "INFO:" 
	
	if ( $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 2
		if($VVSum)
		{
			Add-Content -Path $tempFile -Value "VVname,RCGroup,Target,Mode,Svt_0.50,Svt_1,Svt_2,Svt_4,Svt_8,Svt_16,Svt_32,Svt_64,Svt_128,Svt_256,Rmt_0.50,Rmt_1,Rmt_2,Rmt_4,Rmt_8,Rmt_16,Rmt_32,Rmt_64,Rmt_128,Rmt_256,Time,Date" 
		}
		elseif($PortSum) 
		{
			Add-Content -Path $tempFile -Value "Link,Target,Type,Svt_0.50,Svt_1,Svt_2,Svt_4,Svt_8,Svt_16,Svt_32,Svt_64,Svt_128,Svt_256,Rmt_0.50,Rmt_1,Rmt_2,Rmt_4,Rmt_8,Rmt_16,Rmt_32,Rmt_64,Rmt_128,Rmt_256,Time,Date"
		}
		elseif($GroupSum) 
		{
			Add-Content -Path $tempFile -Value "Group,Target,Mode,Svt_0.50,Svt_1,Svt_2,Svt_4,Svt_8,Svt_16,Svt_32,Svt_64,Svt_128,Svt_256,Rmt_0.50,Rmt_1,Rmt_2,Rmt_4,Rmt_8,Rmt_16,Rmt_32,Rmt_64,Rmt_128,Rmt_256,Time,Date"
		}
		elseif($TargetSum)
		{
			Add-Content -Path $tempFile -Value "Target,Svt_0.50,Svt_1,Svt_2,Svt_4,Svt_8,Svt_16,Svt_32,Svt_64,Svt_128,Svt_256,Rmt_0.50,Rmt_1,Rmt_2,Rmt_4,Rmt_8,Rmt_16,Rmt_32,Rmt_64,Rmt_128,Rmt_256,Time,Date"
		}
		elseif($DomainSum)
		{
			Add-Content -Path $tempFile -Value "Domain,Svt_0.50,Svt_1,Svt_2,Svt_4,Svt_8,Svt_16,Svt_32,Svt_64,Svt_128,Svt_256,Rmt_0.50,Rmt_1,Rmt_2,Rmt_4,Rmt_8,Rmt_16,Rmt_32,Rmt_64,Rmt_128,Rmt_256,Time,Date"
		}
		else 
		{
			Add-Content -Path $tempFile -Value "VVname,RCGroup,Target,Mode,Port,Type,Svt_0.50,Svt_1,Svt_2,Svt_4,Svt_8,Svt_16,Svt_32,Svt_64,Svt_128,Svt_256,Rmt_0.50,Rmt_1,Rmt_2,Rmt_4,Rmt_8,Rmt_16,Rmt_32,Rmt_64,Rmt_128,Rmt_256,Time,Date"
		}
		foreach($s in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			
			if($s -match "millisec")
			{			 
				$split1=$s.split(",")
				$global:time1 = $split1[0]
				$global:date1 = $split1[1]
				continue
			}
			$lent=$s.split(",").length
			
			$var2 = $lent[0]
			if( "total" -eq $var2)
			{
				continue
			}	
			if(($s -match "-------") -or ([string]::IsNullOrEmpty($s)) -or ($s -match "RCGroup"))
			{
				continue
			}	
			
			# Replace one or more spaces with comma to build CSV line
			$s +=",$global:time1,$global:date1"	
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	elseif($Result -match "No virtual volume")
	{ 
		Return "No data available : $Result"
	}
	else
	{
		return $Result
	}
} # End Get-3parHistRCopyVV

#####################################################################################
#   Function   UnProtect-String
#####################################################################################
function UnProtect-String($Encrypted)
{
[Byte[]] $key = (3,4,5,7,2,5,30,40,50,70,20,50,20,60,60,20)
$stringPASS=$Encrypted | ConvertTo-SecureString -Key $key
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($stringPASS)
$Pwd = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
return $pwd
 }
##end of Function  UnProtect-String

#####################################################################################
#   Function   Set-3parPoshSshConnectionUsingPasswordFile
#####################################################################################
Function Set-3parPoshSshConnectionUsingPasswordFile
{
<#
  .SYNOPSIS
    Creates a SAN Connection object using Encrypted password file
  
  .DESCRIPTION
    Note : This cmdlet (Set-3parPoshSshConnectionUsingPasswordFile) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-PoshSshConnectionUsingPasswordFile) instead.
  
	Creates a SAN Connection object using Encrypted password file.
    No connection is made by this cmdlet call, it merely builds the connection object. 
        
  .EXAMPLE
    Set-3parPoshSshConnectionUsingPasswordFile  -ArrayNameOrIPAddress 10.1.1.1 -SANUserName "3parUser" -epwdFile "C:\HPE3PARepwdlogin.txt"
	Creates a SAN Connection object with the specified Array Name or IP Address and password file
		
  .PARAMETER ArrayNameOrIPAddress 
    Specify Array Name or Array IP Address
    
  .PARAMETER SANUserName
  Specify the SAN UserName.
  
  .PARAMETER epwdFile 
    Specify the encrypted password file location , example “c:\hpe3parstoreserv244.txt” To create encrypted password file use “New-3parSSHCONNECTION_PassFile” cmdlet           
	
  .Notes
    NAME:  Set-3parPoshSshConnectionUsingPasswordFile
    EDIT:0/06/2016
	LASTEDIT: 04/10/2017
    KEYWORDS: Set-3parPoshSshConnectionUsingPasswordFile
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #Requires HPE 3par cli.exe 
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $ArrayNameOrIPAddress=$null,
		[Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $SANUserName,
		[Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $epwdFile        
	) 
					
	try{			
		if( -not (Test-Path $epwdFile))
		{
			Write-DebugLog "Running: Path for HPE 3PAR encrypted password file  was not found. Now created new epwd file." "INFO:"
			return " Encrypted password file does not exist , create encrypted password file using 'Set-3parSSHConnectionPasswordFile' "
		}	
		
		Write-DebugLog "Running: Patch for HPE 3PAR encrypted password file ." "INFO:"
		
		$tempFile=$epwdFile			
		$Temp=import-CliXml $tempFile
		$pass=$temp[0]
		$ip=$temp[1]
		$user=$temp[2]
		if($ip -eq $ArrayNameOrIPAddress)  
		{
			if($user -eq $SANUserName)
			{
				$Passs = UnProtect-String $pass 
				#New-3parSSHConnection -SANUserName $SANUserName  -SANPassword $Passs -ArrayNameOrIPAddress $ArrayNameOrIPAddress -SSHDir "C:\plink"
				New-3ParPoshSshConnection -ArrayNameOrIPAddress $ArrayNameOrIPAddress -SANUserName $SANUserName -SANPassword $Passs

			}
			else
			{ 
				Return "Password file SANUserName $user and entered SANUserName $SANUserName dose not match  . "
				Write-DebugLog "Running: Password file SANUserName $user and entered SANUserName $SANUserName dose not match ." "INFO:"
			}
		}
		else 
		{
			Return  "Password file ip $ip and entered ip $ArrayNameOrIPAddress dose not match"
			Write-DebugLog "Password file ip $ip and entered ip $ArrayNameOrIPAddress dose not match." "INFO:"
		}
	}
	catch 
	{	
		$msg = "In function Set-3parPoshSshConnectionUsingPasswordFile. "
		$msg+= $_.Exception.ToString()	
		# Write-Exception function is used for exception logging so that it creates a separate exception log file.
		Write-Exception $msg -error		
		return "FAILURE : $msg"
	}
} #End Function   Set-3parPoshSshConnectionUsingPasswordFile
 
#####################################################################################
#   Function   Protect-String
#####################################################################################

Function Protect-String($String) 
{ 
    [Byte[]] $key = (3,4,5,7,2,5,30,40,50,70,20,50,20,60,60,20)
	$Password = $String | ConvertTo-SecureString -AsPlainText -Force
    return $Password | ConvertFrom-SecureString -key $Key 
} ## end of Function   Protect-String

######################################################################################################################
## FUNCTION Set-3parPoshSshConnectionPasswordFile
######################################################################################################################
Function Set-3parPoshSshConnectionPasswordFile
{
<#
  .SYNOPSIS
   Creates a encrypted password file on client machine to be used by "Set-3parPoshSshConnectionUsingPasswordFile"
  
  .DESCRIPTION
    Note : This cmdlet (Set-3parPoshSshConnectionPasswordFile) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-PoshSshConnectionPasswordFile) instead.
  
	Creates an encrypted password file on client machine
        
  .EXAMPLE
   Set-3parPoshSshConnectionPasswordFile -ArrayNameOrIPAddress "15.1.1.1" -SANUserName "3parDemoUser"  -$SANPassword "demoPass1"  -epwdFile "C:\hpe3paradmepwd.txt"
	
	This examples stores the encrypted password file hpe3paradmepwd.txt on client machine c:\ drive, subsequent commands uses this encryped password file ,
	This example authenticates the entered credentials if correct creates the password file.
  
  .PARAMETER SANUserName 
    Specify the SAN SANUserName .
    
  .PARAMETER ArrayNameOrIPAddress 
    Specify Array Name or Array IP Address
    
  .PARAMETER SANPassword 
    Specify the Password with the Linked IP
  
  .PARAMETER epwdFile 
    Specify the file location to create encrypted password file
	
  .Notes
    NAME:   Set-3parPoshSshConnectionPasswordFile
    EDIT: 06/03/2016
	LASTEDIT: 04/10/2017
    KEYWORDS:  Set-3parPoshSshConnectionPasswordFile
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 2.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $ArrayNameOrIPAddress=$null,
		
		[Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$SANUserName=$null,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[System.String]
		$SANPassword=$null,
		
		[Parameter(Position=3, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
        $epwdFile=$null,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$AcceptKey       
	)
		
	## Check IP Address Format
	#if(-not (Test-IPFormat $ArrayNameOrIPAddress))		
	#{
	#	Write-DebugLog "Stop: Invalid IP Address $ArrayNameOrIPAddress" "ERR:"
	#	return "FAILURE : Invalid IP Address $ArrayNameOrIPAddress"
	#}			
	#Write-DebugLog "Running: Completed validating IP address format." $Debug		
	
	Write-DebugLog "Running: Authenticating credentials - for user $SANUserName and SANIP= $ArrayNameOrIPAddress" $Debug
	
	# Authenticate
	try
	{
		if(!($SANPassword))
		{				
			$securePasswordStr = Read-Host "SANPassword" -AsSecureString				
			$mycreds = New-Object System.Management.Automation.PSCredential ($SANUserName, $securePasswordStr)
			
			$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePasswordStr)
			$tempPwd = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
		}
		else
		{				
			$tempstring  = convertto-securestring $SANPassword -asplaintext -force				
			$mycreds = New-Object System.Management.Automation.PSCredential ($SANUserName, $tempstring)	

			$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($tempstring)
			$tempPwd = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
		}			
		
		if($AcceptKey) 
		{
			#$Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential (Get-Credential $SANUserName) -AcceptKey                           
			$Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential $mycreds -AcceptKey
		}
		else 
		{
			#$Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential (Get-Credential $SANUserName)                        
			$Session = New-SSHSession -ComputerName $ArrayNameOrIPAddress -Credential $mycreds
		}
		
		Write-DebugLog "Running: Executed . Check on PS console if there are any errors reported" $Debug
		if (!$Session)
		{
			return "FAILURE : In function Set-3parPoshSshConnectionPasswordFile."
		}
		else
		{
			$RemveResult = Remove-SSHSession -Index $Session.SessionId
		}
		
		$Enc_Pass = Protect-String $tempPwd 
		$Enc_Pass,$ArrayNameOrIPAddress,$SANUserName | Export-CliXml $epwdFile	
	}
	catch 
	{	
		$msg = "In function Set-3parPoshSshConnectionPasswordFile. "
		$msg+= $_.Exception.ToString()	
		
		Write-Exception $msg -error		
		return "FAILURE : $msg `n credentials incorrect"
	}

	Write-DebugLog "Running: HPE 3PAR System's encrypted password file has been created successfully and the file location is $epwdFile " "INFO:"
	return "`n Success : HPE 3PAR System's encrypted SANPassword file has been created successfully and the file location : $epwdFile"	

} #  End-of  Set-3parPoshSshConnectionPasswordFile

####################################################################################################################
## FUNCTION Update-3parVV
####################################################################################################################
Function Update-3parVV
{
<#
  .SYNOPSIS
   The Update-3parVV command increases the size of a virtual volume.
   
  .DESCRIPTION
   Note : This cmdlet (Update-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-Vv) instead.
  
   The Update-3parVV command increases the size of a virtual volume.
   
  .EXAMPLE
	Update-3parVV -VVname XYZ -Size 1g
	
  .PARAMETER VVname     
	The name of the volume to be grown.
	
  .PARAMETER Size       
	Specifies the size in MB to be added to the volume user space. The size must be an integer in the range from 1 to 16T.

  .PARAMETER Option       
	Suppresses the requested confirmation before growing a virtual volume size from under 2 T to over2 T.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Update-3parVV
    LASTEDIT: 10/15/2015
    KEYWORDS: Update-3parVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$VVname ,		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Size ,						
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       )		
	Write-DebugLog "Start: In Update-3parVV  - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Update-3parVV   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Update-3parVV   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "growvv -f "
	
	if ($VVname)
	{		
		$cmd+=" $VVname "
	}
	else
	{
		Write-DebugLog "Stop: VVname  is mandatory" $Debug
		return "Error :  -VVname  is mandatory. "		
	}
	if ($Size)
	{
		$demo=$Size[-1]
		$de=" g | G | t | T "
		if($de -match $demo)
		{
			$cmd+=" $Size "
		}
		else
		{
			return "Error: -Size $Size is Invalid Try eg: 2G  "
		}
	}
	else
	{
		Write-DebugLog "Stop: Size  is mandatory" $Debug
		return "Error :  -Size  is mandatory. "
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Update-3parVV command increases the size of a virtual volume" "INFO:" 
	return  $Result
} #End FUNCTION Update-3parVV


######################################################################################################################
## FUNCTION Compress-3parVV
######################################################################################################################
Function Compress-3parVV
{
<#
  .SYNOPSIS   
	The Compress-3parVV command is used to change the properties of a virtual volume that
	was created with the createvv command by associating it with a different CPG.
	
  .DESCRIPTION  
    Note : This cmdlet (Compress-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Compress-VV) instead.
  
	The Compress-3parVV command is used to change the properties of a virtual volume that
    was created with the createvv command by associating it with a different CPG.
	
  .EXAMPLE	
	Compress-3parVV -SUBCommand usr_cpg -CPGName XYZ
		
  .EXAMPLE
	Compress-3parVV -SUBCommand usr_cpg -CPGName XYZ -VVName XYZ
	
  .EXAMPLE
	Compress-3parVV -SUBCommand usr_cpg -CPGName XYZ -Option XYZ -VVName XYZ
	
  .EXAMPLE
	Compress-3parVV -SUBCommand usr_cpg -CPGName XYZ -Option keepvv -KeepVVName XYZ -VVName XYZ
		
  .EXAMPLE
	Compress-3parVV -SUBCommand snp_cpg -CPGName XYZ -VVName XYZ
	
  .PARAMETER SUBCommand
	usr_cpg <cpg>
		Moves the logical disks being used for user space to the specified CPG.
		
	snp_cpg <cpg>
		Moves the logical disks being used for snapshot space to the specified
		CPG.
		
	restart
		Restarts a tunevv command call that was previously interrupted because
		of component failure, or because of user initiated cancellation. This
		cannot be used on TPVVs or TDVVs.
		
	rollback
		Returns to a previously issued tunevv operation call that was
		interrupted. The canceltask command needs to run before the rollback.
		This cannot be used on TPVVs or TDVVs.
	
  .PARAMETER CPGName
	Indicates that only regions of the VV which are part of the the specified
	CPG should be tuned to the destination USR or SNP CPG.
	
  .PARAMETER VVName
	 Specifies the name of the existing virtual volume.

  .PARAMETER WaitTask
	Specifies that the command will wait for any created tasks to
	complete.

  .PARAMETER DryRun
	Specifies that the command is a dry run and that no logical disks or
	virtual volumes are actually tuned.  Cannot be used with the -tpvv,
	-dedup, -full, or -compr options.

  .PARAMETER Count
	Specifies the number of identical virtual volumes to tune using an
	integer from 1 through 999. If not specified, one virtual volume
	is tuned. If the '-cnt' option is specified, then the subcommands,
	"restart" and "rollback" are not permitted.

  .PARAMETER TPVV
	Indicates that the VV should be converted to a thin provision virtual
	volume.  Cannot be used with the -dedup or -full options.

  .PARAMETER TDVV
	This option is deprecated, see -dedup.

  .PARAMETER DeDup
	Indicates that the VV should be converted to a thin provision virtual
	volume that shares logical disk space with other instances of this
	volume type.  Cannot be used with the -tpvv or -full options.

  .PARAMETER Full
	Indicates that the VV should be converted to a fully provisioned virtual
	volume.  Cannot be used with the -tpvv, -dedup, or -compr options.

  .PARAMETER Compr
	Indicates that the VV should be converted to a compressed virtual
	volume.  Cannot be used with the -full option.

  .PARAMETER KeepVV
	Indicates that the original logical disks should be saved under a new
	virtual volume with the given name.  Can only be used with the -tpvv,
	-dedup, -full, or -compr options.

  .PARAMETER Src_Cpg 
	Indicates that only regions of the VV which are part of the the specified
	CPG should be tuned to the destination USR or SNP CPG. This option is
	recommended when a VV belongs to an AO configuration and will avoid
	disrupting any optimizations already performed.

  .PARAMETER Threshold 
	Slice threshold. Volumes above this size will be tuned in slices.
	<threshold> must be in multiples of 128GiB. Minimum is 128GiB.
	Default is 16TiB. Maximum is 16TiB.

  .PARAMETER SliceSize
	Slice size. Size of slice to use when volume size is greater than
	<threshold>. <size> must be in multiples of 128GiB. Minimum is 128GiB.
	 Default is 2TiB. Maximum is 16TiB.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Compress-3parVV
	LASTEDIT: 01/03/2017
	KEYWORDS: Compress-3parVV
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(	
		[Parameter(Position=0, Mandatory=$true)]
		[System.String]
		$SUBCommand ,
		
		[Parameter(Position=1, Mandatory=$true)]
		[System.String]
		$VVName ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
        $CPGName ,	
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$WaitTask ,		
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$DryRun ,		
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Count ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$TPVV ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$TDVV ,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$DeDup ,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$Full ,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$Compr ,
		
		[Parameter(Position=11, Mandatory=$false)]
		[System.String]
		$KeepVV ,		
		
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$Threshold , 
		
		[Parameter(Position=14, Mandatory=$false)]
		[System.String]
		$SliceSize , 
		
		[Parameter(Position=15, Mandatory=$false)]
		[System.String]
		$Src_Cpg ,
				
		[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Compress-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Compress-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Compress-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$Cmd = " tunevv "
	
	if($SUBCommand)
	{
		$test="usr_cpg","snp_cpg","restart","rollback"
		$SbCmd = $SUBCommand.toLower()
		if ($test -eq $SbCmd)
		{
			$Cmd += " $SUBCommand"			
		}
		else
		{
			return "SubCommand Should be [usr_cpg | snp_cpg | restart | rollback]"
		}
		if($SUBCommand -eq "usr_cpg" -Or $SUBCommand -eq "snp_cpg")
		{
			if($CPGName)
			{
				$Cmd += " $CPGName"
			}
			else
			{
				return "SubCommand : $SUBCommand,Must Require CPG Name."
			}
		}
	}
	$Cmd += " -f "
	
	if($WaitTask)
	{
		$Cmd += " -waittask "
	}
	if($DryRun)
	{
		$Cmd += " -dr "
	}
	if($Count)
	{
		$Cmd += " -cnt $Count"
	}
	if($TPVV)
	{
		$Cmd += " -tpvv "
	}
	if($TDVV)
	{
		$Cmd += " -tdvv "
	}
	if($DeDup)
	{
		$Cmd += " -dedup "
	}
	if($Full)
	{
		$Cmd += " -full "
	}
	if($Compr)
	{
		$Cmd += " -compr "
	}
	if($KeepVV)
	{
		$Cmd += " -keepvv $KeepVV"
	}
	if($Src_Cpg)
	{
		$Cmd += " -src_cpg $Src_Cpg"
	}
	if($Threshold)
	{
		$Cmd += " -slth $Threshold"
	}
	if($SliceSize)
	{
		$Cmd += " -slsz $SliceSize"
	}
	if($VVName)
	{					
		$Cmd += " $VVName"			
	}
	
	#write-host "Command = $Cmd"
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	write-debuglog "  Executing Compress-3parVV for tuning virtual volume.-->  " "INFO:" 
	return  $Result

} ##  End-of  Compress-3parVV 

######################################################################################################################
## FUNCTION Test-3parVV
######################################################################################################################
Function Test-3parVV
{
<#
  .SYNOPSIS
	The Test-3parVV command executes validity checks of VV administration information in the event of an uncontrolled system shutdown and optionally repairs corrupted virtual volumes.   
   
  .DESCRIPTION
    Note : This cmdlet (Test-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Test-Vv) instead.
  
	The Test-3parVV command executes validity checks of VV administration information in the event of an uncontrolled system shutdown
    and optionally repairs corrupted virtual volumes.
   
  .EXAMPLE
	Test-3parVV -VVName XYZ

  .EXAMPLE
	Test-3parVV -Yes -VVName XYZ
	
  .EXAMPLE
	Test-3parVV -Offline -VVName XYZ

  .PARAMETER Yes
	Specifies that if errors are found they are either modified so they are valid (-y) or left unmodified (-n). If not specified, errors are left
	unmodified (-n).
	
  .PARAMETER No
	Specifies that if errors are found they are either modified so they are valid (-y) or left unmodified (-n). If not specified, errors are left
	unmodified (-n)

  .PARAMETER Offline
	Specifies that VVs specified by <VV_name> be offlined before validating the VV administration information. The entire VV tree will be
	offlined if this option is specified.

  .PARAMETER Dedup_Dryrun
	Launches a dedup ratio calculation task in the background that analyzes
	the potential space savings with HPE 3PAR Deduplication technology if the
	VVs specified were in a same deduplication group. The VVs specified
	can be TPVVs, compressed VVs and fully provisioned volumes.

  .PARAMETER Compr_Dryrun
	Launches a compression ratio calculation task in the background that analyzes
	the potential space savings with HPE 3PAR Compression technology of specified
	VVs. Specified volumes can be TPVVs, TDVVs, fully provisioned volumes
	and snapshots.
		
  .PARAMETER Fixsd
	Specifies that VVs specified by <VV_name> be checked for compressed data
	consistency. The entire tree will not be checked; only those VVs
	specified in the list will be checked.


  .PARAMETER Dedup_Compr_Dryrun
	Launches background space estimation task that analyzes the overall
	savings of converting the specified VVs into a compressed TDVVs.
	Specified volumes can be TPVVs, TDVVs, compressed TPVVs, fully
	provisioned volumes, and snapshots.

	This task will display compression and total savings ratios on a per-VV
	basis, and the dedup ratio will be calculated on a group basis of input VVs. 	
	
  .PARAMETER VVName       
	Requests that the integrity of the specified VV is checked. This
	specifier can be repeated to execute validity checks on multiple VVs.
	Only base VVs are allowed.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: Test-3parVV  
    LASTEDIT: 05/01/2017
    KEYWORDS: Test-3parVV 
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Yes,	
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$No,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Offline,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$VVName,

		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$Fixsd,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$Dedup_Dryrun,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$Compr_Dryrun,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$Dedup_Compr_Dryrun,
		
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Test-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Test-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Test-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if($VVName)
	{		
		$cmd = "checkvv -f "	
			
		if($Yes)	
		{
			$cmd += " -y "
		}
		if($No)	
		{
			$cmd += " -n "
		}
		if($Offline)	
		{
			$cmd += " -offline "
		}
		if($Fixsd)	
		{
			$cmd += " -fixsd "
		}
		if($Dedup_Dryrun)	
		{
			$cmd += " -dedup_dryrun "
		}
		if($Compr_Dryrun)	
		{
			$cmd += " -compr_dryrun "
		}
		if($Dedup_Compr_Dryrun)	
		{
			$cmd += " -dedup_compr_dryrun "
		}
		
		$cmd += " $VVName"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
		write-debuglog "  Executing Test-3parVV Command.-->  " "INFO:" 
		return  "$Result"
	}
	else
	{
		write-debugLog "No VV Name specified ." "ERR:" 
		return "FAILURE : No VV name specified"
	}       
	

} ##  End-of  Test-3parVV

######################################################################################################################
## FUNCTION Add-3parVV
######################################################################################################################
Function Add-3parVV
{
<#
  .SYNOPSIS
   The Add-3parVV command creates and admits remotely exported virtual volume definitions to enable the migration of these volumes. The newly created
   volume will have the WWN of the underlying remote volume.
   
  .DESCRIPTION
   Note : This cmdlet (Add-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Add-Vv) instead.
  
   The Add-3parVV command creates and admits remotely exported virtual volume definitions to enable the migration of these volumes. The newly created
   volume will have the WWN of the underlying remote volume.
   
  .EXAMPLE
	Add-3parVV -VV_WWN  migvv.0:50002AC00037001A
	Specifies the local name that should be given to the volume being admitted and Specifies the World Wide Name (WWN) of the remote volumes to be admitted.

  .EXAMPLE
	Add-3parVV -VV_WWN  "migvv.0:50002AC00037001A migvv.1:50002AC00047001A"

  .EXAMPLE
	Add-3parVV -DomainName XYZ -VV_WWN X:Y
	Create the admitted volume in the specified domain. The default is to create it in the current domain, or no domain if the current domain is not set.
	
  .PARAMETER DomainName
	Create the admitted volume in the specified domain   

  .PARAMETER VV_WWN
	Specifies the World Wide Name (WWN) of the remote volumes to be admitted.

  .PARAMETER VV_WWN_NewWWN 
	 Specifies the World Wide Name (WWN) for the local copy of the remote volume. If the keyword "auto" is specified the system automatically generates a WWN for the virtual volume
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Add-3parVV
    LASTEDIT: 1/1/2017
    KEYWORDS: Add-3parVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$DomainName ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$VV_WWN ,

		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$VV_WWN_NewWWN ,
				
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Add-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Add-3parVV since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Add-3parVV since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if($VV_WWN -Or $VV_WWN_NewWWN)
	{		
		$cmd = "admitvv"
		
		if($DomainName)
		{
			$Cmd+= " -domain $DomainName"						
		}		
		
		if($VV_WWN)	
		{
			$cmd += " $VV_WWN"
			$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
			write-debuglog "  Executing Add-3parVV Command.-->  " "INFO:" 
			return  "$Result"
		}
		if($VV_WWN_NewWWN)	
		{
			$cmd += " $VV_WWN_NewWWN"
			$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
			write-debuglog "  Executing Add-3parVV Command.--> " "INFO:" 
			return  $Result
		}		
	}
	else
	{
		write-debugLog "No VV_WWN Name specified ." "ERR:" 
		return "FAILURE : No VV_WWN name specified"
	}
} ##  End-of  Add-3parVV 
######################################################################################################################
## FUNCTION New-3parFed
######################################################################################################################
Function New-3parFed
{
<#
  .SYNOPSIS
   The New-3parFed command generates a UUID for the named Federation and makes the StoreServ system a member of that Federation.
   
  .DESCRIPTION
   Note : This cmdlet (New-3parFed) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Federation) instead.
  
   The New-3parFed command generates a UUID for the named Federation
    and makes the StoreServ system a member of that Federation.
   
  .EXAMPLE
	New-3parFed -Fedname XYZ
	
  .EXAMPLE
	New-3parFed –CommentString XYZ -Fedname XYZ
	
  .EXAMPLE
	New-3parFed -Setkv TETS -Fedname XYZ

  .EXAMPLE
	New-3parFed -Setkvifnotset TETS -Fedname XYZ
 
  .PARAMETER comment
	Specifies any additional textual information.

  .PARAMETER Setkv 
	Sets or resets key/value pairs on the federation.
	<key> is a string of alphanumeric characters.
	<value> is a string of characters other than "=", "," or ".".

  .PARAMETER Setkvifnotset
	Sets key/value pairs on the federation if not already set.
	A key/value pair is not reset on a federation if it already
	exists.
		
  .PARAMETER Fedname
	Specifies the name of the Federation to be created.
	The name must be between 1 and 31 characters in length
	and must contain only letters, digits, or punctuation
	characters '_', '-', or '.'
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME: New-3parFed  
    LASTEDIT: 01/03/2017
    KEYWORDS: New-3parFed 
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Fedname ,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Comment ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Setkv ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Setkvifnotset ,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In New-3parFed - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting New-3parFed since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting New-3parFed  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if($Fedname)
	{		
		$cmd = "createfed"
		
		if($Comment)
		{
			$cmd+= " -comment $Comment"						
		}
		if($Setkv)
		{
			$cmd+= " -setkv $Setkv"						
		}
		if($Setkvifnotset)
		{
			$cmd+= " -setkvifnotset $Setkvifnotset"						
		}
		
		$cmd += " $Fedname"
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
		write-debuglog "  Executing New-3parFed Command.--> " "INFO:" 
		return  "$Result"				
	}
	else
	{
		write-debugLog "No Federation Name specified ." "ERR:" 
		return "FAILURE : No Federation name specified"
	}
} ##  End-of  New-3parFed 

######################################################################################################################
## FUNCTION Join-3parFed
######################################################################################################################
Function Join-3parFed
{
<#
  .SYNOPSIS  
	The Join-3parFed command makes the StoreServ system a member of the Federation identified by the specified name and UUID.
   
  .DESCRIPTION
    Note : This cmdlet (Join-3parFed) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Join-Federation) instead.
  
	The Join-3parFed command makes the StoreServ system a member
	of the Federation identified by the specified name and UUID.
   
  .EXAMPLE
	Join-3parFed -FedName test -UUID 12345
	
  .EXAMPLE
	Join-3parFed -Comment hello -UUID 12345
		
  .EXAMPLE
	Join-3parFed -Comment hello -UUID 12345 -FedName test
		
  .EXAMPLE
	Join-3parFed -Setkv 10 -UUID 12345 -FedName test
		
  .EXAMPLE
	Join-3parFed -Setkvifnotset 20  -UUID 12345 -FedName test
 
  .PARAMETER Force
	If the StoreServ system is already a member of a Federation, the option
	forcefully removes the system from the current Federation and makes it a
	member of the new Federation identified by the specified name and UUID.
 
  .PARAMETER Comment
	Specifies any additional textual information.

  .PARAMETER Setkv
	Sets or resets key/value pairs on the federation.
	<key> is a string of alphanumeric characters.
	<value> is a string of characters other than "=", "," or ".".

  .PARAMETER Setkvifnotset
	Sets key/value pairs on the federation if not already set.
	A key/value pair is not reset on a federation if it already
	exists.  If a key already exists, it is not treated as an error
	and the value is left as it is.

  .PARAMETER UUID
	Specifies the UUID of the Federation to be joined.

  .PARAMETER FedName
	Specifies the name of the Federation to be joined.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Join-3parFed  
	LASTEDIT: 01/03/2017
	KEYWORDS: Join-3parFed
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$Force ,
	
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$UUID ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$FedName ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Comment ,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Setkv ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Setkvifnotset ,
				
		[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Join-3parFed - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Join-3parFed since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Join-3parFed since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	if($FedName )
	{	
		if($UUID )
		{
			$Cmd = "joinfed "
			
			if($Force)
			{
				$Cmd+= " -force "						
			}
			if($Comment)
			{
				$Cmd+= " -comment $Comment"						
			}
			if($Setkv)
			{
				$Cmd+= " -setkv $Setkv"						
			}
			if($Setkvifnotset)
			{
				$Cmd+= " -setkvifnotset $Setkvifnotset"						
			}
				
			$Cmd += " $UUID $FedName "
			#write-host "Command = 	$Cmd"
			$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
			write-debuglog "  Executing Join-3parFed Command.--> " "INFO:" 
			return  "$Result"	
		}
		else
		{
			write-debugLog "UUID Not specified." "ERR:" 
			return "FAILURE : UUID Not specified."
		}
	}
	else
	{
		write-debugLog "Federation Name Not specified ." "ERR:" 
		return "FAILURE : Federation Name Not specified"
	}
} ##  End-of  Join-3parFed 

######################################################################################################################
## FUNCTION Set-3parFed
######################################################################################################################
Function Set-3parFed
{
<#
  .SYNOPSIS
	 The Set-3parFed command modifies name, comment, or key/value attributes of the Federation of which the StoreServ system is member.
   
  .DESCRIPTION 
     Note : This cmdlet (Set-3parFed) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Federation) instead.
  
	 The Set-3parFed command modifies name, comment, or key/value attributes of the Federation of which the StoreServ system is member.
   
  .EXAMPLE
	Set-3parFed -FedName test
	
  .EXAMPLE
	Set-3parFed -Comment hello
		
  .EXAMPLE
	Set-3parFed -ClrAllKeys
	
  .EXAMPLE
	Set-3parFed -Setkv 1

  .PARAMETER Comment
		Specifies any additional textual information.

  .PARAMETER Setkv
	Sets or resets key/value pairs on the federation.
	<key> is a string of alphanumeric characters.
	<value> is a string of characters other than "=", "," or ".".

  .PARAMETER Setkvifnotset
	Sets key/value pairs on the federation if not already set.
	A key/value pair is not reset on a federation if it already
	exists.  If a key already exists, it is not treated as an error
	and the value is left as it is.

  .PARAMETER ClrallKeys
		Clears all key/value pairs on the federation.

  .PARAMETER ClrKey
	Clears key/value pairs, regardless of the value.
	If a specified key does not exist, this is not
	treated as an error.

  .PARAMETER ClrKV
	Clears key/value pairs only if the value matches the given key.
	Mismatches or keys that do not exist are not treated as errors.

  .PARAMETER IfKV
	Checks whether given key/value pairs exist. If not, any subsequent
	key/value options on the command line will be ignored for the
	federation.
			
  .PARAMETER FedName
	 Specifies the new name of the Federation.
		 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Set-3parFed  
	LASTEDIT: 01/03/2017
	KEYWORDS: Set-3parFed

	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(		
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$FedName ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Comment ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$Setkv ,	
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Setkvifnotset ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$ClrAllKeys ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$ClrKey ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$ClrKV ,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$IfKV ,
				
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Set-3parFed - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3parFed since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3parFed since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	
	$cmd = "setfed"	

	if($FedName)
	{
		$cmd += " -name $FedName "	
	}
	if($Comment)
	{
		$cmd += " -comment $Comment "	
	}
	if($Setkv)
	{
		$cmd += " -setkv $Setkv "	
	}
	if($Setkvifnotset)
	{
		$cmd += " -setkvifnotset $Setkvifnotset "	
	}
	if($ClrAllKeys)
	{
		$cmd += "  -clrallkeys "	
	}
	if($ClrKey)
	{
		$cmd += " -clrkey $ClrKey "	
	}
	if($ClrKV)
	{
		$cmd += " -clrkv $ClrKV "	
	}
	if($IfKV)
	{
		$cmd += " -ifkv $IfKV "	
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Set-3parFed Command.-->  " "INFO:" 
	if([string]::IsNullOrEmpty($Result))
	{
		return "Success : Set-3parFed command executed successfully."
	}
	else
	{
		return $Result
	}
	
} ##  End-of  Set-3parFed 


######################################################################################################################
## FUNCTION Remove-3parFed
######################################################################################################################
Function Remove-3parFed
{
<#
  .SYNOPSIS
	The Remove-3parFed command removes the StoreServ system from Federation membership.
   
  .DESCRIPTION 
    Note : This cmdlet (Remove-3parFed) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Federation) instead.
  
	The Remove-3parFed command removes the StoreServ system from Federation membership.
   
  .EXAMPLE	
	Remove-3parFed	
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Remove-3parFed  
	LASTEDIT: 01/03/2017
	KEYWORDS: Remove-3parFed
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(	
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Remove-3parFed - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Remove-3parFed since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Remove-3parFed since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd = " removefed -f"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Remove-3parFed Command.-->  " "INFO:" 
	return  "$Result"				
	
} ##  End-of  Remove-3parFed 

######################################################################################################################
## FUNCTION Show-3parFed
######################################################################################################################
Function Show-3parFed
{
<#
  .SYNOPSIS 
	The Show-3parFed command displays the name, UUID, and comment of the Federation of which the StoreServ system is member.
   
  .DESCRIPTION 
    Note : This cmdlet (Show-3parFed) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-Federation) instead.
  
	The Show-3parFed command displays the name, UUID, and comment
	of the Federation of which the StoreServ system is member.
   
  .EXAMPLE	
	Show-3parFed	
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Show-3parFed  
	LASTEDIT: 01/03/2017
	KEYWORDS: Show-3parFed

	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(	
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Show-3parFed - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parFed since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parFed since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd = " showfed"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Show-3parFed Command.--> " "INFO:"
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count  
	#Write-Host " Result Count =" $Result.Count
	foreach ($s in  $Result[0..$LastItem] )
	{		
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s," +",",")	
		$s= [regex]::Replace($s,"-","")
		$s= $s.Trim() 	
		Add-Content -Path $tempFile -Value $s
		#Write-Host	" First if statement $s"		
	}
	Import-Csv $tempFile 
	del $tempFile
	if($Result -match "Name")
	{	
		return  " Success : Executing Show-3parFed "		
	}
	else
	{
		return $Result		 		
	}		
	
} ##  End-of  Show-3parFed 

######################################################################################################################
## FUNCTION Show-3parPeer
######################################################################################################################
Function Show-3parPeer
{
<#
  .SYNOPSIS   
	The Show-3parPeer command displays the arrays connected through the host ports or peer ports over the same fabric.
		
  .DESCRIPTION 
    Note : This cmdlet (Show-3parPeer) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-Peer) instead.
  
	The Show-3parPeer command displays the arrays connected through the
    host ports or peer ports over the same fabric. The Type field
    specifies the connectivity type with the array. The Type value
    of Slave means the array is acting as a source, the Type value
    of Master means the array is acting as a destination, the type
    value of Peer means the array is acting as both source and
    destination.
   
  .EXAMPLE	
	Show-3parPeer
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Show-3parPeer
	LASTEDIT: 01/03/2017
	KEYWORDS: Show-3parPeer
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(	
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Show-3parPeer - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parPeer since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parPeer since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd = " showpeer"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing Show-3parPeer Command.-->" "INFO:"
	if($Result -match "No peers")
	{
		return $Result
	}
	else
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count  
		#Write-Host " Result Count =" $Result.Count
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")	
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim() 	
			Add-Content -Path $tempFile -Value $s
			#Write-Host	" First if statement $s"		
		}
		Import-Csv $tempFile 
		del $tempFile
	}
	if($Result -match "No peers")
	{	
		return $Result			
	}
	else
	{
		return  " Success : Executing Show-3parPeer "			 		
	}		
	
} ##  End-of  Show-3parPeer 

######################################################################################################################
## FUNCTION Import-3parVV
######################################################################################################################
Function Import-3parVV
{
<#
  .SYNOPSIS
	The Import-3parVV command starts migrating the data from a remote LUN to the local HPE 3PAR Storage System. The remote LUN should have been prepared using the
	admitvv command.

  .DESCRIPTION
    Note : This cmdlet (Import-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Import-Vv) instead.
  
	The Import-3parVV command starts migrating the data from a remote LUN to the local HPE 3PAR Storage System. The remote LUN should have been prepared using the
	admitvv command.

  .EXAMPLE
	Import-3parVV -Usrcpg asCpg

  .EXAMPLE
	Import-3parVV -Usrcpg asCpg -VVName as4
	
  .EXAMPLE
	Import-3parVV -Usrcpg asCpg -Snapname asTest -VVName as4
	
  .EXAMPLE
	Import-3parVV -Usrcpg asCpg -Snp_cpg asCpg -VVName as4

  .EXAMPLE
	Import-3parVV -Usrcpg asCpg -Priority high -VVName as4
	
  .EXAMPLE
	Import-3parVV -Usrcpg asCpg -NoTask -VVName as4
	
  .PARAMETER NoCons
	Any VV sets specified will not be imported as consistent groups.
	Allows multiple VV sets to be specified.

	If the VV set contains any VV members that in a previous import
	attempt were imported consistently, they will continue to get
	imported consistently.

  .PARAMETER Priority 
	Specifies the priority of migration of a volume or a volume set. If
	this option is not specified, the default priority will be medium.
	The volumes with priority set to high will migrate faster than other
	volumes with medium and low priority.

  .PARAMETER Job_ID
	Specifies the Job ID up to 511 characters for the volume. The Job ID
	will be tagged in the events that are posted during volume migration.
	Use -jobid "" to remove the Job ID.

  .PARAMETER NoTask
	Performs import related pre-processing which results in transitioning
	the volume to exclusive state and setting up of the "consistent" flag
	on the volume if importing consistently. The import task will not be
	created, and hence volume migration will not happen. The "importvv"
	command should be rerun on the volume at a later point of time without
	specifying the -notask option to initiate the actual migration of the
	volume. With the -notask option, other options namely -tpvv, -dedup,
	-compr, -snp_cpg, -snap, -clrsrc, -jobid and -pri cannot be specified.

  .PARAMETER Cleanup
	Performs cleanup on source array after successful migration of the
	volume. As part of the cleanup, any exports of the source volume will be
	removed, the source volume will be removed from all of the VV sets it
	is member of, the VV sets will be removed if the source volume is their
	only member, all of the snapshots of source volume will be removed,
	and finally the source volume itself will be removed. The -clrsrc
	option is valid only when the source array is running HPE 3PAR OS release
	3.2.2 or higher. The cleanup will not be performed if the source volume
	has any snapshots that have VLUN exports.

  .PARAMETER TpVV
	Import the VV into a thinly provisioned space in the CPG specified
	in the command line. The import will enable zero detect for the duration
	of import so that the data blocks containing zero do not occupy
	space on the new array.

  .PARAMETER TdVV
	This option is deprecated, see -dedup.

  .PARAMETER DeDup
	Import the VV into a thinly provisioned space in the CPG specified in
	the command line. This volume will share logical disk space with other
	instances of this volume type created from the same CPG to store
	identical data blocks for space saving.

  .PARAMETER Compr
	Import the VV into a compressed virtual volume in the CPG specified
	in the command line.

  .PARAMETER MinAlloc
	This option specifies the default allocation size (in MB) to be set for TPVVs and TDVVs.


  .PARAMETER Snapname
	 Create a snapshot of the volume at the end of the import phase

  .PARAMETER Snp_cpg
	 Specifies the name of the CPG from which the snapshot space will be allocated.
	 
  .PARAMETER Usrcpg
	 Specifies the name of the CPG from which the volume user space will be allocated.
	
  .PARAMETER VVName
	 Specifies the VVs with the specified name 
	 
  .PARAMETER SANConnection 
	Specify the SAN Connection object created with new-SANConnection

  .Notes
	NAME: Import-3parVV  
	LASTEDIT: 01/03/2017
	KEYWORDS: Import-3parVV 

  .Link
	Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Usrcpg ,
	
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Snapname ,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$Snp_cpg ,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$NoCons ,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Priority ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$Job_ID ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$NoTask ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$Cleanup ,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$TpVV ,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$TdVV ,
		
		[Parameter(Position=10, Mandatory=$false)]
		[switch]
		$DeDup ,
		
		[Parameter(Position=11, Mandatory=$false)]
		[switch]
		$Compr ,
		
		[Parameter(Position=12, Mandatory=$false)]
		[System.String]
		$MinAlloc ,
		
		[Parameter(Position=13, Mandatory=$false)]
		[System.String]
		$VVName ,
				
		[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection        
	)		
	
	Write-DebugLog "Start: In Import-3parVV - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Import-3parVV  since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Import-3parVV  since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli -SANConnection $SANConnection
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	$Cmd = "importvv -f"			

	if($Snapname)
	{
		$Cmd+= " -snap $Snapname"
	}
	if($Snp_cpg)
	{
		$Cmd+= " -snp_cpg $Snp_cpg"
	}
	if($NoCons)
	{
		$Cmd+= " -nocons "
	}
	if($Priority)
	{
		$opt="high","med","low"		
		if ($opt -eq $Priority)
		{
			$Cmd+= " -pri $Priority"
		}
		else
		{
			return " FAILURE : Invalid Priority $Priority ,Please use [high | med | low]."
		}
	}
	if ($Job_ID)
	{
		$Cmd+= " -jobid $Job_ID"
	}
	if($NoTask)
	{
		$Cmd+= " -notask "
	}
	if($Cleanup)
	{
		$Cmd+= " -clrsrc "
	}
	if($TpVV)
	{
		$Cmd+= " -tpvv "
	}
	if($TdVV)
	{
		$Cmd+= " -tdvv "
	}
	if($DeDup)
	{
		$Cmd+= " -dedup "
	}
	if($Compr)
	{
		$Cmd+= " -compr "
	}
	if($MinAlloc)
	{
		$Cmd+= " -minalloc $MinAlloc"
	}
	
	if($Usrcpg)
	{
		$Cmd += " $Usrcpg "
	}
	else
	{
		write-debugLog "No CPG Name specified ." "ERR:" 
		return "FAILURE : No CPG Name specified ."
	}
	
	if($VVName)
	{
		$Cmd += " $VVName"
	}	
	#write-host "$Cmd"
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	write-debuglog "  Executing Import-3parVV Command.--> " "INFO:" 
	return  "$Result"	

} ##  End-of Import-3parVV 

######################################################################################################################
## FUNCTION Close-3PARConnection
######################################################################################################################
Function Close-3PARConnection
{
<#
  .SYNOPSIS   
   Session Management Command to close the connection
   
  .DESCRIPTION
   Note : This cmdlet (Close-3PARConnection) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Close-Connection) instead.
  
   Session Management Command to close the connection
   
  .EXAMPLE
	Close-3PARConnection
		
  .Notes
    NAME: Close-3PARConnection  
    LASTEDIT: 05/01/2017
    KEYWORDS: Close-3PARConnection 
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
 [CmdletBinding()]
	param(
				
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)
	
	Write-DebugLog "Start : in Close-3PARConnection function " "INFO:"
	
	$SANCOB = $SANConnection		
	$clittype = $SANCOB.CliType
	$SecnId =""
	
	if($clittype -eq "SshClient")
	{
		$SecnId = $SANCOB.SessionId
	}
	
	$global:SANConnection = $null
	#write-host "$global:SANConnection"
	$SANConnection = $global:SANConnection
	
	#write-host "$SANConnection"
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		#write-host "$Validate1"
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			#write-host "$Validate2"
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parUserConnection since SAN connection object values are null/empty" $Debug
				if($clittype -eq "SshClient")
				{
					$res = Remove-SSHSession -Index $SecnId 
				}
				write-host ""
				return "Success : Exiting SAN connection session End`n"
			}
		}
	}	
} # End Function Close-3PARConnection

####################################################################################################################
## FUNCTION Show-3parISCSISession
####################################################################################################################
Function Show-3parISCSISession
{
<#
	.SYNOPSIS
		 The showiscsisession command shows the iSCSI sessions.
   
	.DESCRIPTION  
	     Note : This cmdlet (Show-3parISCSISession) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-iSCSISession) instead.
	
		 The showiscsisession command shows the iSCSI sessions.
   
	.EXAMPLE
		Show-3parISCSISession
		
	.EXAMPLE
		Show-3parISCSISession -NSP 1:2:1
		
	.EXAMPLE
		Show-3parISCSISession -Detailed -NSP 1:2:1

	.PARAMETER Detailed
        Specifies that more detailed information about the iSCSI session is
        displayed. If this option is not used, then only summary information
        about the iSCSI session is displayed.

	.PARAMETER ConnectionState
        Specifies the connection state of current iSCSI sessions.
        If this option is not used, then only summary information about
        the iSCSI session is displayed.
	
	.PARAMETER NSP
		Requests that information for a specified port is displayed.
	 
	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
	.Notes
		NAME: Show-3parISCSISession
		LASTEDIT: 01/03/2017
		KEYWORDS: Show-3parISCSISession
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Detailed,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$ConnectionState,

		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$NSP ,
			
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Show-3parISCSISession   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parISCSISession   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parISCSISession   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "showiscsisession "
	
	if ($Detailed)
	{		
		$cmd+=" -d "			
	}
	if ($ConnectionState)
	{		
		$cmd+=" -state "			
	}
	if ($NSP)
	{
		$cmd+=" $NSP "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3parISCSISession command that displays iSCSI ports in the system  " "INFO:"
	if($Result -match "total")
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -2 		
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim() -replace 'StartTime','Date,Time,Zone' 	
			Add-Content -Path $tempFile -Value $s
			#Write-Host	" only else statement"		
		}			
		Import-Csv $tempFile 
		del $tempFile
	}
	if($Result -match "total")	
	{
		return  " Success : Executing Show-3parISCSISession"
	}
	else
	{			
		return  $Result
	}
	
} # End Show-3parISCSISession

####################################################################################################################
## FUNCTION Show-3parPortARP
####################################################################################################################
Function Show-3parPortARP
{
<#
	.SYNOPSIS   
		The Show-3parPortARP command shows the ARP table for iSCSI ports in the system.
		
	.DESCRIPTION  
	    Note : This cmdlet (Show-3parPortARP) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-PortARP) instead.
	
		The Show-3parPortARP command shows the ARP table for iSCSI ports in the system.
		
	.EXAMPLE
		Show-3parPortARP 
		
	.EXAMPLE
		Show-3parPortARP -NSP 1:2:3
		
	.PARAMETER NSP
		Specifies the port for which information about devices on that port are displayed.

	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
	.Notes
		NAME: Show-3parPortARP
		LASTEDIT: 01/03/2017
		KEYWORDS: Show-3parPortARP
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$NSP ,
			
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Show-3parPortARP   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parPortARP   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parPortARP   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "showportarp "	
	if ($NSP)
	{
		$cmd+=" $NSP "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3parPortARP command that displays information ARP table for iSCSI ports in the system  " "INFO:"
	if($Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count 		
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim() 	
			Add-Content -Path $tempFile -Value $s				
		}			
		Import-Csv $tempFile 
		del $tempFile
	}	
	else
	{
		return $Result
	}
	if($Result.Count -gt 1)
	{
		return  " Success : Executing Show-3parPortARP"				
	}
	else
	{			
		return  $Result
	}
	
} # End Show-3parPortARP

####################################################################################################################
## FUNCTION Show-3parPortISNS
####################################################################################################################
Function Show-3parPortISNS
{
<#
	.SYNOPSIS   
		The Show-3parPortISNS command shows iSNS host information for iSCSI ports in the system.
		
	.DESCRIPTION 
	    Note : This cmdlet (Show-3parPortISNS) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-PortISNS) instead.
	
		The Show-3parPortISNS command shows iSNS host information for iSCSI ports in the
    system.
   
	.EXAMPLE	
		Show-3parPortISNS
		
	.EXAMPLE	
		Show-3parPortISNS -NSP 1:2:3
		
	.PARAMETER NSP
		 Specifies the port for which information about devices on that port are
        displayed.
	
	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
	.Notes
		NAME: Show-3parPortISNS
		LASTEDIT: 01/03/2017
		KEYWORDS: Show-3parPortISNS
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$NSP ,
			
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Show-3parPortISNS   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parPortISNS   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parPortISNS   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "showportisns "	
	if ($NSP)
	{
		$cmd+=" $NSP "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3parPortISNS command that displays information iSNS table for iSCSI ports in the system  " "INFO:"
	if($Result -match "N:S:P")
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count -2 		
		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim() 	
			Add-Content -Path $tempFile -Value $s				
		}			
		Import-Csv $tempFile 
		del $tempFile
	}
	if($Result -match "N:S:P")
	{
		return  " Success : Executing Show-3parPortISNS"
	}
	else
	{			
		return  $Result
	}
	
} # End Show-3parPortISNS

####################################################################################################################
## FUNCTION Start-3parFSNDMP
####################################################################################################################
Function Start-3parFSNDMP
{
<#
	.SYNOPSIS   
		The Start-3parFSNDMP command is used to start both NDMP service and ISCSI
    service. 
	
	.DESCRIPTION 
        Note : This cmdlet (Start-3parFSNDMP) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-FSNDMP) instead.
	
		The Start-3parFSNDMP command is used to start both NDMP service and ISCSI
    service.
	
	.EXAMPLE	
		Start-3parFSNDMP
	
	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
	.Notes
		NAME: Start-3parFSNDMP
		LASTEDIT: 01/03/2017
		KEYWORDS: Start-3parFSNDMP
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(	
			
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Start-3parFSNDMP   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Start-3parFSNDMP   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Start-3parFSNDMP   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "startfsndmp "	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Start-3parFSNDMP command that displays information iSNS table for iSCSI ports in the system  " "INFO:"	
	write-host ""
	Return $Result
	
} # End Start-3parFSNDMP

####################################################################################################################
## FUNCTION Stop-3parFSNDMP
####################################################################################################################
Function Stop-3parFSNDMP
{
<#
  .SYNOPSIS   
	The Stop-3parFSNDMP command is used to stop both NDMP service and ISCSI
	service.
	
  .DESCRIPTION  
    Note : This cmdlet (Stop-3parFSNDMP) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Stop-FSNDMP) instead.
  
	The Stop-3parFSNDMP command is used to stop both NDMP service and ISCSI
	service.
	
  .EXAMPLE	
		Stop-3parFSNDMP	
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
	NAME: Stop-3parFSNDMP
	LASTEDIT: 01/03/2017
	KEYWORDS: Stop-3parFSNDMP

  .Link
	Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(	
			
		[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Stop-3parFSNDMP   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Stop-3parFSNDMP   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Stop-3parFSNDMP   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "stopfsndmp "	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Stop-3parFSNDMP command that displays information iSNS table for iSCSI ports in the system  " "INFO:"	
	write-host ""
	return $Result
	
} # End Stop-3parFSNDMP

####################################################################################################################
## FUNCTION Show-3parSRSTATISCSISession
####################################################################################################################
Function Show-3parSRSTATISCSISession
{
<#
  .SYNOPSIS   
	The Show-3parSRSTATISCSISession command displays historical performance data reports for
	iSCSI sessions.

  .DESCRIPTION  
    Note : This cmdlet (Show-3parSRSTATISCSISession) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-SrStatIscsiSession) instead.
  
	The Show-3parSRSTATISCSISession command displays historical performance data reports for
	iSCSI sessions.

  .EXAMPLE	
	Show-3parSRSTATISCSISession

  .EXAMPLE
	Show-3parSRSTATISCSISession -Attime

  .EXAMPLE
	Show-3parSRSTATISCSISession -Attime -NSP 0:2:1

  .EXAMPLE
	Show-3parSRSTATISCSISession -Summary min -NSP 0:2:1

  .EXAMPLE
	Show-3parSRSTATISCSISession -Btsecs 1 -NSP 0:2:1

  .EXAMPLE
	Show-3parSRSTATISCSISession -Hourly -NSP 0:2:1

  .EXAMPLE
	Show-3parSRSTATISCSISession -Daily

  .EXAMPLE
	Show-3parSRSTATISCSISession -Groupby PORT_N

  .PARAMETER Attime
	Performance is shown at a particular time interval, specified by the
	-etsecs option, with one row per object group described by the
	-groupby option. Without this option performance is shown versus time,
	with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
	- Full time string including time zone: "2012-10-26 11:00:00 PDT"
	- Full time string excluding time zone: "2012-10-26 11:00:00"
	- Date string: "2012-10-26" or 2012-10-26
	- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	current time. Instead of a number representing seconds, <secs> can
	be specified with a suffix of m, h or d to represent time in minutes
	(e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
	- For hires, the default begin time is 12 hours ago (-btsecs -12h).
	- For hourly, the default begin time is 7 days ago (-btsecs -7d).
	- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is
	specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
	Select high resolution samples (5 minute intervals) for the report.
	This is the default.

  .PARAMETER Hourly
	Select hourly samples for the report.

  .PARAMETER Daily
	Select daily samples for the report.

  .PARAMETER Summary
	Summarize performance across requested objects and time range.
	The possible summary types are:
		"min" (minimum), "avg" (average), "max" (maximum), and "detail"
	The "detail" type causes the individual performance records to be
	presented along with the summary type(s) requested. One or more of these
	summary types may be specified.

  .PARAMETER Groupby
	For -attime reports, generate a separate row for each combination of
	<groupby> items.  Each <groupby> must be different and
	one of the following:
	PORT_N      The node number for the session
	PORT_S      The PCI slot number for the session
	PORT_P      The port number for the session
	ISCSI_NAME  The iSCSI name for the session
	TPGT        The TPGT ID for the session

  .PARAMETER NSP
	Node Sloat Poart Value 1:2:3

  .PARAMETER SANConnection 
	Specify the SAN Connection object created with new-SANConnection

  .Notes
	NAME: Show-3parSRSTATISCSISession
	LASTEDIT: 01/03/2017
	KEYWORDS: Show-3parSRSTATISCSISession

  .Link
	Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Attime, 
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Hires,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Hourly,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Daily,
				
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Summary ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$BTSecs ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$ETSecs ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$Groupby ,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$NSP ,		
			
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)		
	Write-DebugLog "Start: In Show-3parSRSTATISCSISession   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parSRSTATISCSISession   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parSRSTATISCSISession   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "srstatiscsisession "	
	
	if ($Attime)
	{
		$cmd+=" -attime "
	}
	if ($Summary)
	{
		$a = "min","avg","max","detail"
		$l=$Summary
		if($a -eq $l)
		{
			$cmd+=" -summary $Summary "
		}
		else
		{
			return "Summary : $Summary is incorrect value please use [ min | avg | max | detail] only."
		}
		
	}
	if ($BTSecs)
	{
		$cmd+=" -btsecs $BTSecs "
	}
	if ($ETSecs)
	{
		$cmd+=" -etsecs $ETSecs "
	}
	if ($Hires)
	{
		$cmd+=" -hires "
	}
	if ($Hourly)
	{
		$cmd+=" -hourly "
	}
	if ($Daily)
	{
		$cmd+=" -daily "
	}	
	
	if($Groupby)
	{
		$gbVal="PORT_N","PORT_S","PORT_P","ISCSI_NAME","TPGT"
		$gbl=$Groupby
		if($gbVal -eq $gbl)
		{
			$cmd+=" -groupby $Groupby"
		}
		else
		{
			Return "FAILURE : Invalid -Group-by option: $Groupby cannot be used only [PORT_N | PORT_S | PORT_P | ISCSI_NAME | TPGT] "
		}				
	}
	
	if ($NSP)
	{
		$cmd+=" $NSP "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3parSRSTATISCSISession command that displays information iSNS table for iSCSI ports in the system  " "INFO:"
	if($Attime)
	{
		if($Result -match "Time")
		{
			if($Result.Count -lt 5)
			{
				return "No data found please try with different values."
			}
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count
			$incre = "true" 		
			foreach ($s in  $Result[2..$LastItem] )
			{			
				$s= [regex]::Replace($s,"^ ","")						
				$s= [regex]::Replace($s," +",",")			
				$s= [regex]::Replace($s,"-","")			
				$s= $s.Trim()			
				if($incre -eq "true")
				{		
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')					
					$sTemp[3]="Total(PDUs/s)"				
					$sTemp[6]="Total(KBytes/s)"
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
				if($incre -eq "false")
				{
					$s=$s.Substring(1)
				}			
				Add-Content -Path $tempFile -Value $s	
				$incre="false"
			}			
			Import-Csv $tempFile 
			del $tempFile
		}
		else
		{
			return $Result
		}
	}
	elseif($Summary)
	{
		if($Result -match "Time")
		{
			if($Result.Count -lt 5)
			{
				return "No data found please try with different values."
			}
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count
			$incre = "true" 		
			foreach ($s in  $Result[3..$LastItem] )
			{			
				$s= [regex]::Replace($s,"^ ","")						
				$s= [regex]::Replace($s," +",",")			
				$s= [regex]::Replace($s,"-","")			
				$s= $s.Trim()			
				if($incre -eq "true")
				{		
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')					
					$sTemp[3]="Total(PDUs/s)"				
					$sTemp[6]="Total(KBytes/s)"
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
				if($incre -eq "false")
				{
					$s=$s.Substring(1)
				}			
				Add-Content -Path $tempFile -Value $s	
				$incre="false"
			}			
			Import-Csv $tempFile 
			del $tempFile
		}
		else
		{
			return $Result
		}
	}
	elseif($Groupby)
	{		
		if($Result -match "Time")
		{	
			if($Result.Count -lt 5)
			{
				return "No data found please try with different values."
			}
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count
			$incre = "true" 		
			foreach ($s in  $Result[1..$LastItem] )
			{			
				$s= [regex]::Replace($s,"^ ","")						
				$s= [regex]::Replace($s," +",",")			
				$s= [regex]::Replace($s,"-","")			
				$s= $s.Trim() -replace 'Time','Date,Time,Zone'				
				if($incre -eq "true")
				{
					$sTemp1=$s.Substring(1)					
					$sTemp2=$sTemp1.Substring(0,$sTemp1.Length - 17)
					$sTemp2 +="TimeOut"					
					$sTemp = $sTemp2.Split(',')					
					$sTemp[7]="Total(PDUs/s)"				
					$sTemp[10]="Total(KBytes/s)"
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}							
				Add-Content -Path $tempFile -Value $s	
				$incre="false"
			}			
			Import-Csv $tempFile 
			del $tempFile
		}
		else
		{
			return $Result
		}
	}
	else
	{
		if($Result -match "Time")
		{
			if($Result.Count -lt 5)
			{
				return "No data found please try with different values."
			}
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count
			$incre = "true" 		
			foreach ($s in  $Result[1..$LastItem] )
			{			
				$s= [regex]::Replace($s,"^ ","")						
				$s= [regex]::Replace($s," +",",")			
				$s= [regex]::Replace($s,"-","")			
				$s= $s.Trim()					
				if($incre -eq "true")
				{
					$s=$s.Substring(1)								
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')							
					$sTemp[4]="Total(PDUs/s)"				
					$sTemp[7]="Total(KBytes/s)"
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
				if($incre -eq "false")
				{
					$sTemp1=$s
					$sTemp = $sTemp1.Split(',')	
					$sTemp2=$sTemp[0]+"-"+$sTemp[1]+"-"+$sTemp[2]
					$sTemp[0]=$sTemp2				
					$sTemp[1]=$sTemp[3]
					$sTemp[2]=$sTemp[4]
					$sTemp[3]=$sTemp[5]
					$sTemp[4]=$sTemp[6]
					$sTemp[5]=$sTemp[7]
					$sTemp[6]=$sTemp[8]
					$sTemp[7]=$sTemp[9]
					$sTemp[8]=$sTemp[10]
					$sTemp[9]=$sTemp[11]
					$sTemp[10]=""
					$sTemp[11]=""				
					$newTemp= [regex]::Replace($sTemp," ",",")	
					$newTemp= $newTemp.Trim()
					$s=$newTemp				
				}
				Add-Content -Path $tempFile -Value $s	
				$incre="false"
			}			
			Import-Csv $tempFile 
			del $tempFile
		}
		else
		{
			return $Result
		}
	}	
	if($Result -match "Time")
	{
		return  " Success : Executing Show-3parSRSTATISCSISession"
	}
	else
	{			
		return  $Result
	}
	
} # End Show-3parSRSTATISCSISession

####################################################################################################################
## FUNCTION Show-3pariSCSIStatistics
####################################################################################################################
Function Show-3pariSCSIStatistics
{
<#
	.SYNOPSIS  
		The Show-3pariSCSIStatistics command displays the iSCSI statistics.
   
	.DESCRIPTION
        Note : This cmdlet (Show-3pariSCSIStatistics) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-iSCSIStatistics) instead.
	
		The Show-3pariSCSIStatistics command displays the iSCSI statistics.
   
	.EXAMPLE
		Show-3pariSCSIStatistics
	
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -Delay 2
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -NodeList 1
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -SlotList 1
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -PortList 1
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -Fullcounts
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -Prev
		
	.EXAMPLE
		Show-3pariSCSIStatistics -Iterations 1 -Begin
		
	.PARAMETER Iterations 
		 The command stops after a user-defined <number> of iterations.
		 
	.PARAMETER Delay
		 Looping delay in seconds <secs>. The default is 2.
	
	.PARAMETER NodeList
		List of nodes for which the ports are included.
	
	.PARAMETER SlotList
		List of PCI slots for which the ports are included.

	.PARAMETER PortList
		List of ports for which the ports are included. Lists are specified
        in a comma-separated manner such as: -ports 1,2 or -ports 1.
		
	.PARAMETER Fullcounts
		Shows the values for the full list of counters instead of the default
        packets and KBytes for the specified protocols. The values are shown in
        three columns:

          o Current   - Counts since the last sample.
          o CmdStart  - Counts since the start of the command.
          o Begin     - Counts since the port was reset.

        This option cannot be used with the -prot option. If the -fullcounts
        option is not specified, the metrics from the start of the command are
        displayed.
		
	.PARAMETER Prev
		Shows the differences from the previous sample.
		
	.PARAMETER Begin
		Shows the values from when the system was last initiated.

	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
	.Notes
		NAME: Show-3pariSCSIStatistics
		LASTEDIT: 01/03/2017
		KEYWORDS: Show-3pariSCSIStatistics
		
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iterations,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Delay,		
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$NodeList,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$SlotList,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$PortList,
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$Fullcounts,
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Prev,
		
		[Parameter(Position=7, Mandatory=$false)]
		[Switch]
		$Begin,
			
		[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Show-3pariSCSIStatistics   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3pariSCSIStatistics   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3pariSCSIStatistics   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	
	$cmd= " statiscsi "	
	if($Iterations)
	{
		$cmd+=" -iter $Iterations "
	}
	else
	{
		return " Iterations is mandatory "
	}
	if($Delay)
	{
		$cmd+=" -d $Delay "
	}	
	if($NodeList)
	{
		$cmd+=" -nodes $NodeList "
	}
	if($SlotList)
	{
		$cmd+=" -slots $SlotList "
	}
	if($PortList)
	{
		$cmd+=" -ports $PortList "
	}
	if($Fullcounts)
	{
		$cmd+=" -fullcounts "
	}
	if($Prev)
	{
		$cmd+=" -prev "
	}
	if($Begin)
	{
		$cmd+=" -begin "
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3pariSCSIStatistics command that displays information iSNS table for iSCSI ports in the system  " "INFO:"	
	if($Result -match "Total" -or $Result.Count -gt 1)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count 
		$Flag = "False"
		$Loop_Cnt = 2	
		if($Fullcounts)
		{
			$Loop_Cnt = 1
		}		
		foreach ($s in  $Result[$Loop_Cnt..$LastItem] )
		{			
		    if($Flag -eq "true")
			{
				if(($s -match "From start of statiscsi command") -or ($s -match "----Receive---- ---Transmit---- -----Total-----") -or ($s -match "port    Protocol Pkts/s KBytes/s Pkts/s KBytes/s Pkts/s KBytes/s Errs/") -or ($s -match "Counts/sec") -or ($s -match "Port Counter                             Current CmdStart   Begin"))
				{
					if(($s -match "port    Protocol Pkts/s KBytes/s Pkts/s KBytes/s Pkts/s KBytes/s Errs/") -or ($s -match "Port Counter                             Current CmdStart   Begin"))
					{
						$temp="=============================="
						Add-Content -Path $tempFile -Value $temp
					}
				}
				else
				{
					$s= [regex]::Replace($s,"^ ","")			
					$s= [regex]::Replace($s," +",",")	
					$s= [regex]::Replace($s,"-","")
					$s= $s.Trim() -replace 'Pkts/s,KBytes/s,Pkts/s,KBytes/s,Pkts/s,KBytes/s','Pkts/s(Receive),KBytes/s(Receive),Pkts/s(Transmit),KBytes/s(Transmit),Pkts/s(Total),KBytes/s(Total)' 	
					if($s.length -ne 0)
					{
						if(-not $Fullcounts)
						{
							$s=$s.Substring(1)	
						}
					}				
					Add-Content -Path $tempFile -Value $s	
				}
			}
			else
			{
				$s= [regex]::Replace($s,"^ ","")			
				$s= [regex]::Replace($s," +",",")	
				$s= [regex]::Replace($s,"-","")
				$s= $s.Trim() -replace 'Pkts/s,KBytes/s,Pkts/s,KBytes/s,Pkts/s,KBytes/s','Pkts/s(Receive),KBytes/s(Receive),Pkts/s(Transmit),KBytes/s(Transmit),Pkts/s(Total),KBytes/s(Total)' 	
				if($s.length -ne 0)
				{					
					if(-not $Fullcounts)
					{
						$s=$s.Substring(1)	
					}					
				}				
				Add-Content -Path $tempFile -Value $s	
			}
			$Flag = "true"			
		}
		Import-Csv $tempFile 
		del $tempFile
	}
	else
	{
		return  $Result
	}
} # End Show-3pariSCSIStatistics

####################################################################################################################
## FUNCTION Show-3pariSCSISessionStatistics
####################################################################################################################
Function Show-3pariSCSISessionStatistics
{
<#
  .SYNOPSIS  
	The Show-3pariSCSISessionStatistics command displays the iSCSI session statistics.

  .DESCRIPTION  
    Note : This cmdlet (Show-3pariSCSISessionStatistics) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-iSCSISessionStatistics) instead.
  
	The Show-3pariSCSISessionStatistics command displays the iSCSI session statistics.

  .EXAMPLE
	Show-3pariSCSISessionStatistics

  .EXAMPLE
	Show-3pariSCSISessionStatistics -Iterations 1
	
  .EXAMPLE
	Show-3pariSCSISessionStatistics -Iterations 1 -Delay 2
	
  .EXAMPLE
	Show-3pariSCSISessionStatistics -Iterations 1 -NodeList 1
	
  .EXAMPLE
	Show-3pariSCSISessionStatistics -Iterations 1 -SlotList 1
	
  .EXAMPLE
	Show-3pariSCSISessionStatistics -Iterations 1 -PortList 1
	
  .EXAMPLE
	Show-3pariSCSISessionStatistics -Iterations 1 -Prev
	
  .PARAMETER Iterations 
	 The command stops after a user-defined <number> of iterations.
	 
  .PARAMETER Delay
	 Looping delay in seconds <secs>. The default is 2.

  .PARAMETER NodeList
	List of nodes for which the ports are included.

  .PARAMETER SlotList
	List of PCI slots for which the ports are included.

  .PARAMETER PortList
	List of ports for which the ports are included. Lists are specified
	in a comma-separated manner such as: -ports 1,2 or -ports 1.

  .PARAMETER Previous
	Shows the differences from the previous sample.
	
  .PARAMETER Begin
	Shows the values from when the system was last initiated.
	
  .PARAMETER SANConnection 
	Specify the SAN Connection object created with new-SANConnection

  .Notes
	NAME: Show-3pariSCSISessionStatistics
	LASTEDIT: 01/03/2017
	KEYWORDS: Show-3pariSCSISessionStatistics

  .Link
	Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Iterations,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Delay,		
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$NodeList,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$SlotList,
		
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$PortList,		
		
		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$Previous,	
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Begin,
			
		[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Show-3pariSCSISessionStatistics   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3pariSCSISessionStatistics   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3pariSCSISessionStatistics   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "statiscsisession "	
	
	if($Iterations)
	{
		$cmd+=" -iter $Iterations "
	}
	else
	{
		return " Iterations is mandatory "
	}
	if($Delay)
	{
		$cmd+=" -d $Delay "
	}	
	if($NodeList)
	{
		$cmd+=" -nodes $NodeList "
	}
	if($SlotList)
	{
		$cmd+=" -slots $SlotList "
	}
	if($PortList)
	{
		$cmd+=" -ports $PortList "
	}	
	if($Previous)
	{
		$cmd+=" -prev "
	}
	if($Begin)
	{
		$cmd+=" -begin "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3pariSCSISessionStatistics command that displays information iSNS table for iSCSI ports in the system  " "INFO:"	
	if($Result -match "Total" -and $Result.Count -gt 5)
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 3 
		$Flag = "False"
		$Loop_Cnt = 2	
				
		foreach ($s in  $Result[$Loop_Cnt..$LastItem] )
		{			
		    if($Flag -eq "true")
			{
				if(($s -match "statiscsisession") -or ($s -match "----PDUs/s---- --KBytes/s--- ----Errs/s----") -or ($s -match " port -------------iSCSI_Name-------------- TPGT Cmd Resp Total  Tx  Rx Total Digest TimeOut VLAN") -or ($s -match " port -iSCSI_Name- TPGT Cmd Resp Total  Tx  Rx Total Digest TimeOut VLAN"))
				{
					if(($s -match " port -------------iSCSI_Name-------------- TPGT Cmd Resp Total  Tx  Rx Total Digest TimeOut VLAN") -or ($s -match " port -iSCSI_Name- TPGT Cmd Resp Total  Tx  Rx Total Digest TimeOut VLAN"))
					{
						$temp="=============================="
						Add-Content -Path $tempFile -Value $temp
					}
				}
				else
				{
					$s= [regex]::Replace($s,"^ ","")			
					$s= [regex]::Replace($s," +",",")	
					$s= [regex]::Replace($s,"-","")
					$s= $s.Trim()					
					if($s.length -ne 0)
					{
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')							
						$cnt = $sTemp.count			
						if($cnt -gt 8)
						{
							$sTemp[5]="Total(PDUs/s)"				
							$sTemp[8]="Total(KBytes/s)"
						}
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp
					}					
					Add-Content -Path $tempFile -Value $s	
				}
			}
			else
			{
				$s= [regex]::Replace($s,"^ ","")			
				$s= [regex]::Replace($s," +",",")	
				$s= [regex]::Replace($s,"-","")
				$s= $s.Trim()				
				$sTemp1=$s				
				$sTemp = $sTemp1.Split(',')							
				$cnt = $sTemp.count			
				if($cnt -gt 8)
				{
					$sTemp[5]="Total(PDUs/s)"				
					$sTemp[8]="Total(KBytes/s)"
				}
				$newTemp= [regex]::Replace($sTemp,"^ ","")			
				$newTemp= [regex]::Replace($sTemp," ",",")				
				$newTemp= $newTemp.Trim()
				$s=$newTemp							
				
				Add-Content -Path $tempFile -Value $s	
			}
			$Flag = "true"			
		}
		Import-Csv $tempFile 
		del $tempFile
	}
	if($Result -match "Total" -and $Result.Count -gt 5)
	{	
		return  " Success : Executing Show-3pariSCSISessionStatistics"
	}
	else
	{
		if($Result.Count -lt 5)
		{					
			return  $Result
		}
		else
		{
			return  "No Data Found while Executing Show-3pariSCSISessionStatistics"	
		}
	}
	
} # End Show-3pariSCSISessionStatistics

####################################################################################################################
## FUNCTION Show-3parSRStatIscsi
####################################################################################################################
Function Show-3parSRStatIscsi
{
<#
  .SYNOPSIS   
	The Show-3parSRStatIscsi command displays historical performance data reports for
	iSCSI ports.

  .DESCRIPTION  
    Note : This cmdlet (Show-3parSRStatIscsi) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-SrStatIscsi) instead.
  
	The Show-3parSRStatIscsi command displays historical performance data reports for
    iSCSI ports.

  .EXAMPLE	
	Show-3parSRStatIscsi
	
  .EXAMPLE
	Show-3parSRStatIscsi  -Attime

  .EXAMPLE
	Show-3parSRStatIscsi  -Summary min          /max/aug/detail

  .EXAMPLE
	Show-3parSRStatIscsi  -BTSecs 1

  .EXAMPLE
	Show-3parSRStatIscsi  -ETSecs 1

  .EXAMPLE
	Show-3parSRStatIscsi  -Groupby PORT_N

	.PARAMETER Attime
        Performance is shown at a particular time interval, specified by the
        -etsecs option, with one row per object group described by the
        -groupby option. Without this option performance is shown versus time,
        with a row per time interval.

	.PARAMETER BTsecs
        Select the begin time in seconds for the report.
        The value can be specified as either
        - The absolute epoch time (for example 1351263600).
        - The absolute time as a text string in one of the following formats:
            - Full time string including time zone: "2012-10-26 11:00:00 PDT"
            - Full time string excluding time zone: "2012-10-26 11:00:00"
            - Date string: "2012-10-26" or 2012-10-26
            - Time string: "11:00:00" or 11:00:00
        - A negative number indicating the number of seconds before the
          current time. Instead of a number representing seconds, <secs> can
          be specified with a suffix of m, h or d to represent time in minutes
          (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
        If it is not specified then the time at which the report begins depends
        on the sample category (-hires, -hourly, -daily):
            - For hires, the default begin time is 12 hours ago (-btsecs -12h).
            - For hourly, the default begin time is 7 days ago (-btsecs -7d).
            - For daily, the default begin time is 90 days ago (-btsecs -90d).
        If begin time and sample category are not specified then the time
        the report begins is 12 hours ago and the default sample category is hires.
        If -btsecs 0 is specified then the report begins at the earliest sample.

	.PARAMETER ETsecs
        Select the end time in seconds for the report.  If -attime is
        specified, select the time for the report.
        The value can be specified as either
        - The absolute epoch time (for example 1351263600).
        - The absolute time as a text string in one of the following formats:
            - Full time string including time zone: "2012-10-26 11:00:00 PDT"
            - Full time string excluding time zone: "2012-10-26 11:00:00"
            - Date string: "2012-10-26" or 2012-10-26
            - Time string: "11:00:00" or 11:00:00
        - A negative number indicating the number of seconds before the
          current time. Instead of a number representing seconds, <secs> can
          be specified with a suffix of m, h or d to represent time in minutes
          (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
        If it is not specified then the report ends with the most recent
        sample.

	.PARAMETER Hires
        Select high resolution samples (5 minute intervals) for the report.
        This is the default.

	.PARAMETER Hourly
        Select hourly samples for the report.

	.PARAMETER Daily
        Select daily samples for the report.

	.PARAMETER Summary 
        Summarize performance across requested objects and time range.
        The possible summary types are:
            "min" (minimum), "avg" (average), "max" (maximum), and "detail"
        The "detail" type causes the individual performance records to be
        presented along with the summary type(s) requested. One or more of these
        summary types may be specified.

	.PARAMETER Groupby
        For -attime reports, generate a separate row for each combination of
        <groupby> items.  Each <groupby> must be different and
        one of the following:
        PORT_N      The node number for the port
        PORT_S      The PCI slot number for the port
        PORT_P      The port number for the port
        PROTOCOL    The protocol type for the port
		
	.PARAMETER NSP
		Dode Sloat Port Value 1:2:3
	
	.PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
	.Notes
		NAME: Show-3parSRStatIscsi
		LASTEDIT: 01/03/2017
		KEYWORDS: Show-3parSRStatIscsi
   
	.Link
		Http://www.hpe.com
 
 #Requires PS -Version 3.0
 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Attime, 
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Hires,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Hourly,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Daily,
				
		[Parameter(Position=4, Mandatory=$false)]
		[System.String]
		$Summary ,
		
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$BTSecs ,
		
		[Parameter(Position=6, Mandatory=$false)]
		[System.String]
		$ETSecs ,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$Groupby ,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$NSP ,		
			
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	Write-DebugLog "Start: In Show-3parSRStatIscsi   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{	
			
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3parSRStatIscsi   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3parSRStatIscsi   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	$cmd= "srstatiscsi "
	
	if ($Attime)
	{
		$cmd+=" -attime "
	}
	if ($Summary)
	{
		$a = "min","avg","max","detail"
		$l=$Summary
		if($a -eq $l)
		{
			$cmd+=" -summary $Summary "
		}
		else
		{
			return "Summary : $Summary is incorrect value please use [ min | avg | max | detail] only."
		}
		
	}
	if ($BTSecs)
	{
		$cmd+=" -btsecs $BTSecs "
	}
	if ($ETSecs)
	{
		$cmd+=" -etsecs $ETSecs "
	}
	if ($Hires)
	{
		$cmd+=" -hires "
	}
	if ($Hourly)
	{
		$cmd+=" -hourly "
	}
	if ($Daily)
	{
		$cmd+=" -daily "
	}	
	
	if($Groupby)
	{
		$gbVal="PORT_N","PORT_S","PORT_P","PROTOCOL"
		$gbl=$Groupby
		if($gbVal -eq $gbl)
		{
			$cmd+=" -groupby $Groupby"
		}
		else
		{
			Return "FAILURE : Invalid -Group-by option: $Groupby cannot be used only [PORT_N | PORT_S | PORT_P | PROTOCOL] "
		}				
	}	
		
	if ($NSP)
	{
		$cmd+=" $NSP "
	}
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog "  Executing  Show-3parSRStatIscsi command that displays information iSNS table for iSCSI ports in the system  " "INFO:"
	
	$Flag="True"
	if($Attime -or $Summary)
	{
		$Flag="Fals"
		if($Result -match "Time")
		{
			if($Result.Count -lt 5)
			{
				return "No data found please try with different values."
			}
			$count=2
			if($Summary)
			{
				$count=3
			}
			$tempFile = [IO.Path]::GetTempFileName()
			$LastItem = $Result.Count
			$incre = "true" 		
			foreach ($s in  $Result[$count..$LastItem] )
			{			
				$s= [regex]::Replace($s,"^ ","")						
				$s= [regex]::Replace($s," +",",")			
				$s= [regex]::Replace($s,"-","")			
				$s= $s.Trim()			
				if($incre -eq "true")
				{		
					$sTemp1=$s				
					$sTemp = $sTemp1.Split(',')							
					$sTemp[1]="Pkts/s(Receive)"				
					$sTemp[2]="KBytes/s(Receive)"
					$sTemp[3]="Pkts/s(Transmit)"				
					$sTemp[4]="Kytes/s(Transmit)"
					$sTemp[5]="Pkts/s(Total)"				
					$sTemp[6]="Kytes/s(Total)"
					$newTemp= [regex]::Replace($sTemp,"^ ","")			
					$newTemp= [regex]::Replace($sTemp," ",",")				
					$newTemp= $newTemp.Trim()
					$s=$newTemp							
				}
				if($incre -eq "false")
				{
					$s=$s.Substring(1)
				}			
				Add-Content -Path $tempFile -Value $s	
				$incre="false"
			}			
			Import-Csv $tempFile 
			del $tempFile
		}
		else
		{
			return $Result
		}
	}	
	else
	{	
		if($Flag -eq "True")
		{
			if($Result -match "Time")
			{
				if($Result.Count -lt 4)
				{
					return "No data found please try with different values."
				}
				$tempFile = [IO.Path]::GetTempFileName()
				$LastItem = $Result.Count
				$incre = "true" 		
				foreach ($s in  $Result[1..$LastItem] )
				{			
					$s= [regex]::Replace($s,"^ ","")						
					$s= [regex]::Replace($s," +",",")			
					$s= [regex]::Replace($s,"-","")			
					$s= $s.Trim() -replace 'Time','Date,Time,Zone' 						
					if($incre -eq "true")
					{
						$s=$s.Substring(1)
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')							
						$sTemp[4]="Pkts/s(Receive)"				
						$sTemp[5]="KBytes/s(Receive)"
						$sTemp[6]="Pkts/s(Transmit)"				
						$sTemp[7]="Kytes/s(Transmit)"
						$sTemp[8]="Pkts/s(Total)"				
						$sTemp[9]="Kytes/s(Total)"
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp
					}				
					Add-Content -Path $tempFile -Value $s	
					$incre="false"
				}			
				Import-Csv $tempFile 
				del $tempFile
			}
			else
			{
				return $Result
			}
		}
	}	
	if($Result -match "Time")
	{
		return  " Success : Executing Show-3parSRStatIscsi"
	}
	else
	{			
		return  $Result
	}
	
} # End Show-3parSRStatIscsi

#######################################################################################################
## FUNCTION Get-3parSystemInformation
########################################################################################################
Function Get-3parSystemInformation
{
<#
  .SYNOPSIS
    Command displays the 3PAR Storage system information. 
  
  .DESCRIPTION
    Note : This cmdlet (Get-3parSystemInformation) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SystemInformation) instead.
  
    Command displays the 3PAR Storage system information.
        
  .EXAMPLE
    Get-3parSystemInformation 
	Command displays the 3PAR Storage system information.such as system name, model, serial number, and system capacity information.
	
  .EXAMPLE
    Get-3parSystemInformation -Option space
	Lists 3PAR Storage system space information in MB(1024^2 bytes)
  	
  .PARAMETER Option
	space 
    Displays the system capacity information in MB (1024^2 bytes)
	
    domainspace 
    Displays the system capacity information broken down by domain in MB(1024^2 bytes)
	
    fan 
    Displays the system fan information.
	
    date	
	command displays the date and time for each system node
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3parSystemInformation
    LASTEDIT: 01/23/2017
    KEYWORDS: Get-3parSystemInformation
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Option,
		
		[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection 
       
	)		
	$Option = $Option.toLower()
	Write-DebugLog "Start: In Get-3parSystemInformation - validating input values" $Debug 

	#check if connection object contents are null/empty
	if(!$SANConnection)
	{				
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3parSystemInformation since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3parSystemInformation since SAN connection object values are null/empty"
			}
		}
	}
	$cliresult1 = Test-PARCli -SANConnection $SANConnection
	if(($cliresult1 -match "FAILURE :"))
	{
		write-debuglog "$cliresult1" "ERR:" 
		return $cliresult1
	}
	$sysinfocmd = "showsys "
	
	if ($Option)
	{
		$a = "d","param","fan","space","vvspace","domainspace","desc","devtype","date"
		$l=$Option
		if($a -eq $l)
		{
			$sysinfocmd+=" -$option "
			if($Option -eq "date")
			{
				$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  "showdate"
				write-debuglog "Get 3par system date information " "INFO:"
				write-debuglog "Get 3par system fan information cmd -> showdate " "INFO:"
				$tempFile = [IO.Path]::GetTempFileName()
				Add-Content -Path $tempFile -Value "Node,Date"
				foreach ($s in  $Result[1..$Result.Count] )
				{
					$splits = $s.split(" ")
					$var1 = $splits[0].trim()
					#write-host "var1 = $var1"
					$var2 = ""
					foreach ($t in $splits[1..$splits.Count])
					{
						#write-host "t = $t"
						if(-not $t)
						{
							continue
						}
						$var2 += $t+" "
						
						#write-host "var2 $var2"
					}
					$var3 = $var1+","+$var2
					Add-Content -Path $tempFile -Value $var3
				}
				Import-Csv $tempFile
				del $tempFile
				return
			}	
			else
			{
				$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysinfocmd
				return $Result
			}
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting  Get-3parSystemInformation since -option $option in incorrect "
			Return "FAILURE : -option :- $option is an Incorrect option  [d,param,fan,space,vvspace,domainspace,desc,devtype]  can be used only . "
		}
	}
	else
	{	
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $sysinfocmd
		return $Result 
	}		
}
##### END Get-3parSystemInformation #####

####################################################################################################################
## FUNCTION Add-3parRcopytarget
####################################################################################################################
Function Add-3parRcopytarget
{
<#
  .SYNOPSIS
    The Add-3parRcopytarget command adds a target to a remote-copy volume group.
	
  .DESCRIPTION
    Note : This cmdlet (Add-3parRcopytarget) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Add-RCopyTarget) instead.
  
    The Add-3parRcopytarget command adds a target to a remote-copy volume group.
	
  .EXAMPLE
   Add-3parRcopytarget -Target_name XYZ -Mode sync -Group_name test
   This example admits physical disks.
  
  .PARAMETER Target_name 
	Specifies the name of the target that was previously created with the creatercopytarget command.
	 
  .PARAMETER Mode 
	Specifies the mode of the target as either synchronous (sync), asynchronous periodic (periodic), or asynchronous streaming (async).
	
  .PARAMETER Group_name 
    Specifies the name of the existing remote copy volume group created with the creatercopygroup command to which the target will be added.
	  
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Add-3parRcopytarget
    LASTEDIT: 03/03/2017
    KEYWORDS: Add-3parRcopytarget
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
		
		[Parameter(Position=0, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$Target_name,
		
		[Parameter(Position=1, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$Mode,
		
		[Parameter(Position=2, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$Group_name,
				
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
		)	
	
	Write-DebugLog "Start: In Add-3parRcopytarget   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Add-3parRcopytarget   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Add-3parRcopytarget   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "admitrcopytarget "
	if ($Target_name)
	{		
		$cmd+=" $Target_name "			
	}
	else
	{
		return " FAILURE :  Target_name is mandatory for to execute  "
	}
	if ($Mode)
	{	
		$a = "sync","periodic","async"
		$l=$Mode
		if($a -eq $l)
		{
			$cmd+=" $Mode "			
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting    Add-3parRcopytarget since -Mode $Mode in incorrect "
			Return "FAILURE : -Mode :- $Mode is an Incorrect Mode  [sync | periodic | async]  can be used only . "
		}
					
	}
	else
	{
		return " FAILURE :  Mode is mandatory for to execute  "
	}
	if ($Group_name)
	{		
		$cmd+=" $Group_name "			
	}
	else
	{
		return " FAILURE :  Group_name is mandatory for to execute  "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd	
	write-debuglog " The Add-3parRcopytarget command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Add-3parRcopytarget

####################################################################################################################
## FUNCTION Add-3parRcopyVV
####################################################################################################################
Function Add-3parRcopyVV
{
<#
  .SYNOPSIS
    The Add-3parRcopyVV command adds an existing virtual volume to an existing remote copy volume group.

  .DESCRIPTION
    Note : This cmdlet (Add-3parRcopyVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Add-RCopyVv) instead.
  
	The Add-3parRcopyVV command adds an existing virtual volume to an existing remote copy volume group.
	
  .EXAMPLE	
    Add-3parRcopyVV -SourceVolumeName XXXX -Group_name ZZZZ -Target_name TestTarget -TargetVolumeName YYYY
	
  .EXAMPLE
     Add-3parRcopyVV -SourceVolumeName XXXX -Snapname snp -Group_name ZZZZ -Target_name TestTarget -TargetVolumeName YYYY
   
  .EXAMPLE
    Add-3parRcopyVV -SourceVolumeName XXXX -Snapname snp -Group_name AS_TEST -Target_name CHIMERA03 -TargetVolumeName YYYY
   
  .EXAMPLE
    Add-3parRcopyVV -Pat -SourceVolumeName XXXX -Group_name ZZZZ -Target_name TestTarget -TargetVolumeName YYYY

  .EXAMPLE	
	Add-3parRcopyVV -CreateVV -SourceVolumeName XXXX -Group_name ZZZZ -Target_name TestTarget -TargetVolumeName YYYY
	
  .EXAMPLE
	Add-3parRcopyVV -NoWWN -SourceVolumeName XXXX -Group_name ZZZZ -Target_name TestTarget -TargetVolumeName YYYY
  
  .PARAMETER Pat
	Specifies that the <VV_name> is treated as a glob-style pattern and that
	all remote copy volumes matching the specified pattern are admitted to the
	remote copy group. When this option is used the <sec_VV_name> and
	<snapname> (if specified) are also treated as patterns. It is required
	that the secondary volume names and snapshot names can be derived from the
	local volume name by adding a prefix, suffix or both. <snapname> and
	<sec_VV_name> should take the form prefix@vvname@suffix, where @vvname@
	resolves to the name of each volume that matches the <VV_name> pattern.

  .PARAMETER CreateVV
	Specifies that the secondary volumes should be created automatically. This
	specifier cannot be used when starting snapshots (<VV_name>:<snapname>) are
	specified.

  .PARAMETER NoWWN
	When used with -createvv, it ensures a different WWN is	used on the secondary volume. Without this option -createvv will use the same WWN for both primary and secondary volumes.

  .PARAMETER NoSync
	Specifies that the volume should skip the initial sync. This is for the
	admission of volumes that have been pre-synced with the target volume.
	This specifier cannot be used when starting snapshots (<VV_name>:<snapname>)
	are specified.
  
  .PARAMETER SourceVolumeName
	Specifies the name of the existing virtual volume to be admitted to an
	existing remote copy volume group that was created with the
	creatercopygroup command.
  
  .PARAMETER Snapname
	An optional read-only snapshot <snapname> can be specified along with
	the virtual volume name <VV_name>.
		
  .PARAMETER Group_name
	Specifies the name of the existing remote copy volume group created with
	the creatercopygroup command, to which the volume will be added.

  .PARAMETER Target_name
	The target name associated with this group, as set with the
	creatercopygroup command. The target is created with the
	creatercopytarget command.
  
  .PARAMETER TargetVolumeName
	The target name associated with this group, as set with the
	creatercopygroup command. The target is created with the
	creatercopytarget command. <sec_VV_name> specifies the name of the
	secondary volume on the target system.  One <target_name>:<sec_VV_name>
	must be specified for each target of the group.
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Add-3parRcopyVV
    LASTEDIT: 03/03/2017
    KEYWORDS: Add-3parRcopyVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Pat,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$CreateVV,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$NoWWN,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$NoSync,
		
		[Parameter(Position=4, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$SourceVolumeName,
		
		[Parameter(Position=5, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Snapname,
		
		[Parameter(Position=6, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$Group_name,
		
		[Parameter(Position=7, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$Target_name,
		
		[Parameter(Position=8, Mandatory=$true,ValueFromPipeline=$true)]
		[System.String]
		$TargetVolumeName,		
				
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Add-3parRcopyVV   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Add-3parRcopyVV   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Add-3parRcopyVV   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "admitrcopyvv "
	if ($Pat)
	{	
		$cmd+=" -pat "		
	}
	if ($CreateVV)
	{	
		$cmd+=" -createvv "		
	}
	if ($NoWWN)
	{	
		$cmd+=" -nowwn "		
	}
	if ($NoSync)
	{	
		$cmd+=" -nosync "		
	}
	if ($SourceVolumeName)
	{		
		$cmd+=" $SourceVolumeName"	
	}	
	else
	{
		return " FAILURE :  Existing virtual volume is mandatory for to execute  "
	}
	if ($Snapname)
	{		
		$cmd+=":$Snapname "	
	}
	if ($Group_name)
	{		
		$cmd+=" $Group_name "	
	}	
	else
	{
		return " FAILURE :  Group_name is mandatory for to execute  "
	}
	if ($Target_name)
	{		
		$cmd+=" $Target_name"	
	}	
	else
	{
		return " FAILURE :  Target_name is mandatory for to execute  "
	}
	if ($TargetVolumeName)
	{		
		$cmd+=":$TargetVolumeName "	
	}	
	else
	{
		return " FAILURE :  TargetVolumeName is mandatory for to execute  "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Add-3parRcopyVV command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Add-3parRcopyVV
####################################################################################################################
## FUNCTION Test-3parRcopyLink
####################################################################################################################
Function Test-3parRcopyLink
{
<#checkrclink
  .SYNOPSIS
    The Test-3parRcopyLink command performs a connectivity, latency, and throughput test between two connected HPE 3PAR storage systems.

  .DESCRIPTION
    Note : This cmdlet (Test-3parRcopyLink) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Test-RCopyLink) instead.
  
    The Test-3parRcopyLink command performs a connectivity, latency, and throughput
    test between two connected HPE 3PAR storage systems.
	
  .EXAMPLE
	Test-3parRcopyLink -StartClient -NSP 0:5:4 -Dest_IP_Addr 1.1.1.1 -Time 20 -Port 1

  .EXAMPLE
	Test-3parRcopyLink -StartClient -TimeInSeconds 30 -NSP 0:5:4 -Dest_IP_Addr 1.1.1.1 -Time 20 -Port 1 
   
  .EXAMPLE
	Test-3parRcopyLink -StartClient -FCIP -NSP 0:5:4 -Dest_IP_Addr 1.1.1.1 -Time 20 -Port 1
   
  .EXAMPLE
	Test-3parRcopyLink -StopClient -NSP 0:5:4
   
  .EXAMPLE
	Test-3parRcopyLink -StartServer -NSP 0:5:4 
   
  .EXAMPLE
	Test-3parRcopyLink -StartServer -TimeInSeconds 30 -NSP 0:5:4 -Dest_IP_Addr 1.1.1.2 -Port 1
   
  .EXAMPLE
	Test-3parRcopyLink -StartServer -FCIP -NSP 0:5:4 -Dest_IP_Addr 1.1.1.2 -Port 1
     
  .EXAMPLE
	Test-3parRcopyLink -StopServer -NSP 0:5:4
   
  .EXAMPLE
	Test-3parRcopyLink -PortConn -NSP 0:5:4 
  
  .PARAMETER StartClient
   start the link test
  
  .PARAMETER StopClient
   stop the link test
  
  .PARAMETER StartServer
   start the server
  
  .PARAMETER StopServer
  stop the server
  
  .PARAMETER PortConn
    Uses the Cisco Discovery Protocol Reporter to show display information about devices that are connected to network ports.
  
  .PARAMETER NSP
	Specifies the interface from which to check the link, expressed as
	node:slot:port.
		
  .PARAMETER TimeInSeconds
    Specifies the number of seconds for the test to run using an integer
    from 300 to 172800.  If not specified this defaults to 172800
    seconds (48 hours).

  .PARAMETER FCIP
    Specifies if the link is running over fcip.
    Should only be supplied for FC interfaces.
		
  .PARAMETER Dest_IP_Addr
	Specifies the address of the target system (for example, the IP
	address).
  
  .PARAMETER Time
	Specifies the test duration in seconds.
	Specifies the number of seconds for the test to run using an integer
	from 300 to 172800.
  
  .PARAMETER Port
	Specifies the port on which to run the test. If this specifier is not
	used, the test automatically runs on port 3492.
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Test-3parRcopyLink
    LASTEDIT: 03/03/2017
    KEYWORDS: Test-3parRcopyLink
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(		
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$StartClient,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$StopClient,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$StartServer,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$StopServer,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$PortConn,
	
		[Parameter(Position=5, Mandatory=$false)]
		[System.String]
		$TimeInSeconds,	

		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$FCIP,
		
		[Parameter(Position=7, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$NSP,
		
		[Parameter(Position=8, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Dest_IP_Addr,
		
		[Parameter(Position=9, Mandatory=$false)]
		[System.String]
		$Time,
		
		[Parameter(Position=10, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Port,
				
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Test-3parRcopyLink   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Test-3parRcopyLink   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Test-3parRcopyLink   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}
	
	$cmd= "checkrclink "
		
	if($StartClient)
	{
		$cmd += " startclient "
	}
	elseif($StopClient)
	{
		$cmd += " stopclient "
	}
	elseif($StartServer)
	{
		$cmd += " startserver "
	}
	elseif($StopServer)
	{
		$cmd += " stopserver "
	}
	elseif($PortConn)
	{
		$cmd += " portconn "
	}
	else
	{
		return "Please Select One of the subcommand from [ startclient | stopclient | startserver | stopserver | portconn] "
	}
	if($TimeInSeconds)
	{
		$cmd += " -time $TimeInSeconds "
	}
	if($FCIP)
	{
		$cmd += " -fcip "
	}
	if($NSP)
	{
		$cmd += " $NSP "
	}
	else
	{
		return "Specifies the interface from which to check the link, expressed as node:slot:port"
	}
	if($Dest_IP_Addr)
	{
		$cmd += " $Dest_IP_Addr "
	}
	else
	{
		if($StartClient)
		{
			return " Specifies the address of the target system Destination Address(for example, the IP address)"
		}
	}
	if($StartClient)
	{
		if($Time)
		{
			$cmd += " $Time "
		}
		else
		{
			return "Specifies the test duration in seconds Time"
		}
	}
	if($Port)
	{
		$cmd += " $Port "
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Test-3parRcopyLink command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Test-3parRcopyLink
####################################################################################################################
## FUNCTION Sync-Recover3ParDRRcopyGroup
####################################################################################################################
Function Sync-Recover3ParDRRcopyGroup
{
<#
  .SYNOPSIS
    The Sync-Recover3ParDRRcopyGroup command performs the following actions:
    Performs data synchronization from primary remote copy volume groups to secondary remote copy volume groups.
    Performs the complete recovery operation (synchronization and storage failover operation which performs role reversal to make secondary volumes as primary which becomes read-write) for the remote copy volume group in both planned migration and disaster scenarios.


  .DESCRIPTION
    Note : This cmdlet (Sync-Recover3ParDRRcopyGroup) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Sync-RecoverDRRcopyGroup) instead.
  
    The Sync-Recover3ParDRRcopyGroup command performs the following actions:
    Performs data synchronization from primary remote copy volume groups to secondary remote copy volume groups.
    Performs the complete recovery operation (synchronization and storage failover operation which performs role reversal to make secondary volumes as primary which becomes read-write) for the remote copy volume group in both planned migration and disaster scenarios.
	
  .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Target_name test -Group_name Grp1

  .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand recovery -Target_name test -Group_name Grp1
   
   EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Force -Group_name Grp1
   
   .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Nowaitonsync -Group_name Grp1
   
   .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Nosyncbeforerecovery -Group_name Grp1
   
   .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Nofailoveronlinkdown -Group_name Grp1
   
   .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Forceassecondary -Group_name Grp1
   
   .EXAMPLE
   Sync-Recover3ParDRRcopyGroup  -Subcommand sync -Waittime 60 -Group_name Grp1
 
  .PARAMETER Subcommand
	sync
	Performs the data synchronization from primary remote copy volume
	group to secondary remote copy volume group.
	
	recovery
	Performs complete recovery operation for the remote copy volume
	group in both planned migration and disaster scenarios.
		
  .PARAMETER Target_name <target_name>
	Specifies the target for the subcommand. This is optional for
	single target groups but is required for multi-target groups.
	
  .PARAMETER Force
	Does not ask for confirmation for this command.

  .PARAMETER Nowaitonsync
	Specifies that this command should not wait for data synchronization
	from primary remote copy volume groups to secondary remote copy
	volume groups.
	This option is valid only for the sync subcommand.

  .PARAMETER Nosyncbeforerecovery
	Specifies that this command should not perform data synchronization
	before the storage failover operation (performing role reversal to
	make secondary volumes as primary which becomes read-write). This
	option can be used if data synchronization is already done outside
	of this command and it is required to do only storage failover
	operation (performing role reversal to make secondary volumes as
	primary which becomes read-write).
	This option is valid only for the recovery subcommand.

  .PARAMETER Nofailoveronlinkdown
	Specifies that this command should not perform storage failover
	operation (performing role reversal to make secondary volumes as
	primary which becomes read-write) when the remote copy link is down.
	This option is valid only for the recovery subcommand.

  .PARAMETER Forceasprimary
	Specifies that this command does the storage failover operation
	(performing role reversal to make secondary volumes as primary
	which becomes read-write) and forces secondary role as primary
	irrespective of whether the data is current or not.
	This option is valid only for the recovery subcommand.
	The successful execution of this command must be immediately
	followed by the execution of the recovery subcommand with
	forceassecondary option on the other array. The incorrect use
	of this option can lead to the primary secondary volumes not
	being consistent. see the notes section for additional details.

  .PARAMETER Forceassecondary
	This option must be used after successful execution of recovery subcommand with forceasprimary option on the other array.
	Specifies that this changes the primary volume groups to secondary
	volume groups. The incorrect use of this option can lead to the
	primary secondary volumes not being consistent.
	This option is valid only for the recovery subcommand.

  .PARAMETER Nostart
	Specifies that this command does not start the group after storage failover operation is complete.
	This option is valid only for the recovery subcommand.

  .PARAMETER Waittime <timeout_value>
	Specifies the timeout value for this command.
	Specify the time in the format <time>{s|S|m|M}. Value is a positive
	integer with a range of 1 to 720 minutes (12 Hours).
	Default time is 720 minutes. 
		
  .PARAMETER Group_name
	Name of the Group
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Sync-Recover3ParDRRcopyGroup
    LASTEDIT: 03/03/2017
    KEYWORDS: Sync-Recover3ParDRRcopyGroup
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$Subcommand,
	
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$Target_name,
		
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]
		$Nowaitonsync,
		
		[Parameter(Position=3, Mandatory=$false)]
		[Switch]
		$Nosyncbeforerecovery,
		
		[Parameter(Position=4, Mandatory=$false)]
		[Switch]
		$Nofailoveronlinkdown,

		[Parameter(Position=5, Mandatory=$false)]
		[Switch]
		$Forceasprimary,
		
		[Parameter(Position=6, Mandatory=$false)]
		[Switch]
		$Nostart,
		
		[Parameter(Position=7, Mandatory=$false)]
		[System.String]
		$Waittime,
		
		[Parameter(Position=8, Mandatory=$false)]
		[System.String]
		$Group_name,		
				
		[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Sync-Recover3ParDRRcopyGroup   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Sync-Recover3ParDRRcopyGroup   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Sync-Recover3ParDRRcopyGroup   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "controldrrcopygroup "
	
	if ($Subcommand)
	{	
		$a = "sync","recovery"
		$l=$Subcommand
		if($a -eq $l)
		{
			$cmd+=" $Subcommand -f"							
		}
		else
		{ 
			Write-DebugLog "Stop: Exiting  Sync-Recover3ParDRRcopyGroup   since -Subcommand $Subcommand in incorrect "
			Return "FAILURE : -Subcommand :- $Subcommand is an Incorrect Subcommand  [ sync | recovery ]  can be used only . "
		}		
	}	
	else
	{
		return " FAILURE :  Subcommand is mandatory please select any one from sync/recovery "
	}
	if ($Target_name)
	{		
		$cmd+=" -target $Target_name "	
	}	
	if ($Nowaitonsync)
	{		
		$cmd+=" -nowaitonsync "	
	}
	if ($Nosyncbeforerecovery)
	{		
		$cmd+=" -nosyncbeforerecovery "	
	}
	if ($Nofailoveronlinkdown)
	{		
		$cmd+=" -nofailoveronlinkdown "	
	}
	if ($Forceasprimary)
	{		
		$cmd+=" -forceasprimary "	
	}
	if ($Nostart)
	{		
		$cmd+=" -nostart "	
	}
	if ($Waittime)
	{		
		$cmd+=" -waittime $Waittime "	
	}	
	if ($Group_name)
	{		
		$cmd+=" $Group_name "	
	}	
	else
	{
		return " FAILURE :  Group_name is mandatory to execute Sync-Recover3ParDRRcopyGroup command "
	}	
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Sync-Recover3ParDRRcopyGroup command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Sync-Recover3ParDRRcopyGroup
####################################################################################################################
## FUNCTION Disable-3ParRcopylink
####################################################################################################################
Function Disable-3ParRcopylink
{
<#
  .SYNOPSIS
    The Disable-3ParRcopylink command removes one or more links (connections)
    created with the admitrcopylink command to a target system.

  .DESCRIPTION
    Note : This cmdlet (Disable-3ParRcopylink) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Disable-RCopylink) instead.
  
    The Disable-3ParRcopylink command removes one or more links (connections)
    created with the admitrcopylink command to a target system.
	
  .EXAMPLE
   Disable-3ParRcopylink -RCIP -Target_name test -NSP_IP_address 1.1.1.1

  .EXAMPLE
   Disable-3ParRcopylink -RCFC -Target_name test -NSP_WWN 1245
      
  .PARAMETER RCIP  
	Syntax for remote copy over IP (RCIP)
	
  .PARAMETER RCFC
	Syntax for remote copy over FC (RCFC)
		
  .PARAMETER Target_name	
	The target name, as specified with the creatercopytarget command.
	
  .PARAMETER NSP_IP_address		
	Specifies the node, slot, and port of the Ethernet port on the local system and an IP address of the peer port on the target system.

  .PARAMETER NSP_WWN
	Specifies the node, slot, and port of the Fibre Channel port on the local system and World Wide Name (WWN) of the peer port on the target system.
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Disable-3ParRcopylink
    LASTEDIT: 03/03/2017
    KEYWORDS: Disable-3ParRcopylink
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false)]
		[Switch]
		$RCIP,
	
		[Parameter(Position=1, Mandatory=$false)]
		[Switch]
		$RCFC,

		[Parameter(Position=2, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Target_name,
		
		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$NSP_IP_address,
		
		[Parameter(Position=4, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$NSP_WWN,		
				
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Disable-3ParRcopylink   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Disable-3ParRcopylink   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Disable-3ParRcopylink   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "dismissrcopylink "
	if($RCFC -or $RCIP)
	{
		if($RCFC)
		{
			if($RCIP)
			{
				return "Please select only one RCFC -or RCIP"
			}
			else
			{
				if ($Target_name)
				{		
					$cmd+=" $Target_name "	
				}	
				else
				{
					return " FAILURE :  Target_name is mandatory to execute  "
				}
				if ($NSP_IP_address)
				{		
					$cmd+=" $NSP_IP_address "	
				}	
				else
				{
					return " FAILURE :  NSP_IP_address is mandatory to execute  "
				}
			}
		}
		if($RCIP)
		{
			if($RCFC)
			{
				return "Please select only one RCFC -or RCIP"
			}
			else
			{
				if ($Target_name)
				{		
					$cmd+=" $Target_name "	
				}	
				else
				{
					return " FAILURE :  Target_name is mandatory for to execute  "
				}
				if ($NSP_WWN)
				{		
					$cmd+=" $NSP_WWN "	
				}	
				else
				{
					return " FAILURE :  NSP_WWN is mandatory for to execute  "
				}
			}
		}
	}
	else
	{
		return "Please Select at-list any one from RCFC -or RCIP to execute Disable-3ParRcopylink command"
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Disable-3ParRcopylink command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Disable-3ParRcopylink
####################################################################################################################
## FUNCTION Disable-3ParRcopytarget
####################################################################################################################
Function Disable-3ParRcopytarget
{
<#
  .SYNOPSIS
    The Disable-3ParRcopytarget command removes a remote copy target from a
    remote copy volume group.

  .DESCRIPTION
    Note : This cmdlet (Disable-3ParRcopytarget) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Disable-RCopyTarget) instead.
  
    The Disable-3ParRcopytarget command removes a remote copy target from a
    remote copy volume group.
	
  .EXAMPLE
   Disable-3ParRcopytarget -Target_name Test -Group_name Test2
     		
  .PARAMETER Target_name	
	The name of the target to be removed.
	
  .PARAMETER Group_name		
	 The name of the group that currently includes the target.
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Disable-3ParRcopytarget
    LASTEDIT: 03/03/2017
    KEYWORDS: Disable-3ParRcopytarget
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(		

		[Parameter(Position=0, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Target_name,
		
		[Parameter(Position=1, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Group_name,
				
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Disable-3ParRcopytarget   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Disable-3ParRcopytarget   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Disable-3ParRcopytarget   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "dismissrcopytarget -f "
	if ($Target_name)
	{		
		$cmd+=" $Target_name "	
	}	
	else
	{
		return " FAILURE :  Target_name is mandatory for to execute  "
	}
	if ($Group_name)
	{		
		$cmd+=" $Group_name "	
	}	
	else
	{
		return " FAILURE :  Group_name is mandatory for to execute  "
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Disable-3ParRcopytarget command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Disable-3ParRcopytarget
####################################################################################################################
## FUNCTION Disable-3ParRcopyVV
####################################################################################################################
Function Disable-3ParRcopyVV
{
<#
  .SYNOPSIS
    The Disable-3ParRcopyVV command removes a virtual volume from a remote copy volume
    group.

  .DESCRIPTION
    Note : This cmdlet (Disable-3ParRcopyVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Disable-RCopyVv) instead.
  
    The Disable-3ParRcopyVV command removes a virtual volume from a remote copy volume
    group.
	
  .EXAMPLE
   Disable-3ParRcopyVV -VV_name XYZ -Group_name XYZ
   
  .EXAMPLE
   Disable-3ParRcopyVV -Pat -VV_name XYZ -Group_name XYZ
   
  .EXAMPLE
   Disable-3ParRcopyVV -KeepSnap -VV_name XYZ -Group_name XYZ
   
  .EXAMPLE
   Disable-3ParRcopyVV -RemoveVV -VV_name XYZ -Group_name XYZ
  
  .PARAMETER Pat
	Specifies that specified patterns are treated as glob-style patterns
	and all remote copy volumes matching the specified pattern will be
	dismissed from the remote copy group. This option must be used
	if the <pattern> specifier is used.

  .PARAMETER KeepSnap
	Specifies that the local volume's resync snapshot should be retained.
	The retained snapshot will reflect the state of the secondary volume
	and might be used as the starting snapshot if the volume is readmitted
	to a remote copy group. The snapshot name will begin with "sv.rcpy"

  .PARAMETER RemoveVV
	Remove remote sides' volumes.
  
  .PARAMETER VV_name	
	The name of the volume to be removed. Volumes are added to a group with the admitrcopyvv command.
	  	
  .PARAMETER Group_name		
	 The name of the group that currently includes the target.
	 
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Disable-3ParRcopyVV
    LASTEDIT: 03/03/2017
    KEYWORDS: Disable-3ParRcopyVV
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(	
		
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Pat,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$KeepSnap,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$RemoveVV,

		[Parameter(Position=3, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$VV_name,
		
		[Parameter(Position=4, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$Group_name,
				
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Disable-3ParRcopyVV   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Disable-3ParRcopyVV   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Disable-3ParRcopyVV   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "dismissrcopyvv -f "
	
	if($Pat)
	{
		$cmd+=" -pat "
	}
	if($KeepSnap)
	{
		$cmd+=" -keepsnap "
	}
	if($RemoveVV)
	{
		$cmd+=" -removevv "
	}
	if ($VV_name)
	{		
		$cmd+=" $VV_name "	
	}	
	else
	{
		return " FAILURE :  VV_name is mandatory for to execute  "
	}
	if ($Group_name)
	{		
		$cmd+=" $Group_name "	
	}	
	else
	{
		return " FAILURE :  Group_name is mandatory for to execute  "
	}
		
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Disable-3ParRcopyVV command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Disable-3ParRcopyVV
####################################################################################################################
## FUNCTION Show-3ParRcopyTransport
####################################################################################################################
Function Show-3ParRcopyTransport
{
<#
  .SYNOPSIS
    The Show-3ParRcopyTransport command shows status and information about end-to-end transport for Remote Copy in the system.

  .DESCRIPTION
    Note : This cmdlet (Show-3ParRcopyTransport) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-RCopyTransport) instead.
  
    The Show-3ParRcopyTransport command shows status and information about end-to-end
    transport for Remote Copy in the system.
	
  .EXAMPLE
   Show-3ParRcopyTransport -RCIP
 
  .EXAMPLE
   Show-3ParRcopyTransport -RCFC
     
  .PARAMETER RCIP
	Show information about Ethernet end-to-end transport.

  .PARAMETER RCFC
	Show information about Fibre Channel end-to-end transport.
    
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Show-3ParRcopyTransport
    LASTEDIT: 08/04/2015
    KEYWORDS: Show-3ParRcopyTransport
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(	
		
		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$RCIP,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$RCFC,
						
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
		)	
	
	Write-DebugLog "Start: In Show-3ParRcopyTransport   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3ParRcopyTransport   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3ParRcopyTransport   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}	
	
	$cmd= "showrctransport "
	
	if($RCIP)
	{	
		$cmd+=" -rcip "
	}
	if($RCFC)
	{	
		$cmd+=" -rcfc "
	}
			
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	$LastItem = $Result.Count 
	write-host "result Count = $LastItem"
	if($LastItem -lt 2)
	{
		return $Result
	}
	write-debuglog " The Show-3ParRcopyTransport command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	$tempFile = [IO.Path]::GetTempFileName()		
	#Write-Host " Result Count =" $Result.Count
	foreach ($s in  $Result[0..$LastItem] )
	{		
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s," +",",")	
		$s= [regex]::Replace($s,"-","")
		$s= $s.Trim() 	
		Add-Content -Path $tempFile -Value $s
		#Write-Host	" First if statement $s"		
	}
	Import-Csv $tempFile 
	del $tempFile		
	
	if($Result -match "N:S:P")
	{
		return  " Success : Executing Show-3ParRcopyTransport "
	}
	else
	{			
		return  $Result
	}
		
} # End Show-3ParRcopyTransport

####################################################################################################################
## FUNCTION Get-3ParSRAOMoves
####################################################################################################################
Function Get-3ParSRAOMoves
{
<#
  .SYNOPSIS
    The Get-3ParSRAOMoves command shows the space that AO has moved between tiers.
	
  .DESCRIPTION
    Note : This cmdlet (Get-3parSRAOMoves) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRAOMoves) instead.
  
    The Get-3ParSRAOMoves command shows the space that AO has moved between tiers.
	
  .EXAMPLE
   Get-3ParSRAOMoves -btsecs 7200
   
   .EXAMPLE
   Get-3ParSRAOMoves -etsecs 7200
   
   .EXAMPLE
   Get-3ParSRAOMoves -oneline 
   
   .EXAMPLE
   Get-3ParSRAOMoves -withvv 
   
   .EXAMPLE
   Get-3ParSRAOMoves -VV_name XYZ
 
  .PARAMETER btsecs 
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins is 12 ho                                                          urs ago.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER etsecs 
	Select the end time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER oneline
	Show data in simplified format with one line per AOCFG.

  .PARAMETER VV_name
	Limit the analysis to VVs with names that match one or more of
	the specified names or glob-style patterns. VV set names must be
	prefixed by "set:".  Note that snapshot VVs will not be considered
	since only base VVs have region space.

  .PARAMETER withvv
	Show the data for each VV.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3ParSRAOMoves
    LASTEDIT: 03/08/2017
    KEYWORDS: Get-3ParSRAOMoves
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$btsecs,
		
		[Parameter(Position=1, Mandatory=$false)]
		[System.String]
		$etsecs,
		
		[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$oneline,
		
		[Parameter(Position=3, Mandatory=$false)]
		[System.String]
		$VV_name,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
		[switch]
		$withvv,
		
		[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Get-3ParSRAOMoves   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3ParSRAOMoves   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3ParSRAOMoves   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "sraomoves "
	
	if ($btsecs)
	{		
		$cmd+=" -btsecs $btsecs "	
	}	
	if ($etsecs)
	{		
		$cmd+=" -etsecs $etsecs "	
	}
	if ($oneline)
	{		
		$cmd+=" -oneline "	
	}
	if ($VV_name)
	{		
		$cmd+=" -vv $VV_name "	
	}
	if ($withvv)
	{		
		$cmd+=" -withvv "	
	}	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Get-3ParSRAOMoves command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Get-3ParSRAOMoves
####################################################################################################################
## FUNCTION Show-3ParVVolvm
####################################################################################################################
Function Show-3ParVVolvm
{
<#
  .SYNOPSIS
    The Show-3ParVVolvm command displays information about all virtual machines
    (VVol-based) or a specific virtual machine in a system.  This command
    can be used to determine the association between virtual machines and
    their associated virtual volumes. showvvolvm will also show the
    accumulation of space usage information for a virtual machine.

  .DESCRIPTION
    Note : This cmdlet (Show-3ParVVolvm) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-vVolvm) instead.
  
    The Show-3ParVVolvm command displays information about all virtual machines
    (VVol-based) or a specific virtual machine in a system.  This command
    can be used to determine the association between virtual machines and
    their associated virtual volumes. showvvolvm will also show the
    accumulation of space usage information for a virtual machine.

  .EXAMPLE
	Show-3ParVVolvm -container_name XYZ -option listcols 
	
  .EXAMPLE
	Show-3ParVVolvm -container_name XYZ -Detailed 
	
  .EXAMPLE
	Show-3ParVVolvm -container_name XYZ -StorageProfiles
	
  .EXAMPLE
	Show-3ParVVolvm -container_name XYZ -Summary 
	
  .EXAMPLE
	Show-3ParVVolvm -container_name XYZ -Binding
	
  .EXAMPLE
	Show-3ParVVolvm -container_name XYZ -VVAssociatedWithVM	
	
  .PARAMETER container_name
    The name of the virtual volume storage container. May be "sys:all" to display all VMs.
 
  .PARAMETER Listcols
	List the columns available to be shown in the -showcols option
	below (see "clihelp -col showvvolvm" for help on each column).

	By default with mandatory option -sc, (if none of the information selection options
	below are specified) the following columns are shown:
	VM_Name GuestOS VM_State Num_vv Physical Logical
    
  .PARAMETER Detailed
	Displays detailed information about the VMs. The following columns are shown:
	VM_Name UUID Num_vv Num_snap Physical Logical GuestOS VM_State UsrCPG SnpCPG Container CreationTime

  .PARAMETER StorageProfiles
	Shows the storage profiles with constraints associated with the VM.
	Often, all VVols associated with a VM will use the same storage profile.
	However, if vSphere has provisioned different VMDK volumes with different
	storage profiles, only the storage profile for the first virtual disk
	(VMDK) VVol will be displayed. In this case, use the -vv option to display
	storage profiles for individual volumes associated with the VM. Without
	the -vv option, the following columns are shown:
	VM_Name SP_Name SP_Constraint_List

  .PARAMETER Summary
	Shows the summary of virtual machines (VM) in the system, including
	the total number of the following: VMs, VVs, and total physical and
	exported space used. The following columns are shown:
	Num_vm Num_vv Physical Logical

  .PARAMETER Binding
	Shows the detailed binding information for the VMs. The binding could
	be PoweredOn, Bound (exported), or Unbound. When it is bound,
	showvvolvm displays host names to which it is bound. When it is bound
	and -vv option is used, showvvolvm displays the exported LUN templates
	for each volume, and the state for actively bound VVols. PoweredOn
	means the VM is powered on. Bound means the VM is not powered on,
	but either being created, modified, queried or changing powered state
	from on to off or off to on. Unbound means the VM is powered off.
	The following columns are shown:
	VM_Name VM_State Last_Host Last_State_Time Last_Pwr_Time

	With the -vv option, the following columns are shown:
	VM_Name VVol_Name VVol_Type VVol_State VVol_LunId Bind_Host Last_State_Time

  .PARAMETER VVAssociatedWithVM
	Shows all the VVs (Virtual Volumes) associated with the VM.
	The following columns are shown:
	VM_Name VV_ID VVol_Name VVol_Type Prov Physical Logical

	The columns displayed can change when used with other options.
	See the -binding option above.

  .PARAMETER RemoteCopy
	Shows the remote copy group name, sync status, role, and last sync time of the
	volumes associated with a VM. Note that if a VM does not report as synced, the
	last sync time for the VM DOES NOT represent a consistency point. True
	consistency points are only represented by the showrcopy LastSyncTime. This
	option may be combined with the -vv, -binding, -d, and -sp options.

  .PARAMETER AutoDismissed
	Shows only VMs containing automatically dismissed volumes. Shows only
	automatically dismissed volumes when combined with the -vv option.
		
  .PARAMETER VM_name 
	Specifies the VMs with the specified name (up to 80 characters in length).
	This specifier can be repeated to display information about multiple VMs.
	This specifier is not required. If not specified, showvvolvm displays
	information for all VMs in the specified storage container.
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Show-3ParVVolvm
    LASTEDIT: 03/08/2017
    KEYWORDS: Show-3ParVVolvm
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(
	
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$container_name,

		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$ListCols,

		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$ShowCols,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Detailed,
		
		[Parameter(Position=4, Mandatory=$false)]
		[switch]
		$StorageProfiles,
		
		[Parameter(Position=5, Mandatory=$false)]
		[switch]
		$Summary,
		
		[Parameter(Position=6, Mandatory=$false)]
		[switch]
		$Binding,
		
		[Parameter(Position=7, Mandatory=$false)]
		[switch]
		$VVAssociatedWithVM,
		
		[Parameter(Position=8, Mandatory=$false)]
		[switch]
		$RemoteCopy,
		
		[Parameter(Position=9, Mandatory=$false)]
		[switch]
		$AutoDismissed,
		
		[Parameter(Position=10, Mandatory=$false,ValueFromPipeline=$true)]
		[System.String]
		$VM_name,
				
		[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Show-3ParVVolvm   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Show-3ParVVolvm   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Show-3ParVVolvm   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}

	$cmd = "showvvolvm "
	
	if($ListCols)
	{
		$cmd +=" -listcols "
		$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
		write-debuglog " The Show-3ParVVolvm command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
		return 	$Result	
	}
	if ($ShowCols)
	{		
		$cmd +=" -showcols $ShowCols "	
	}
	if ($Detailed)
	{		
		$cmd +=" -d "	
	}
	if ($StorageProfiles)
	{		
		$cmd +=" -sp "	
	}
	if ($Summary)
	{		
		$cmd +=" -summary "	
	}
	if ($Binding)
	{		
		$cmd +=" -binding "	
	}
	if ($VVAssociatedWithVM)
	{		
		$cmd +=" -vv "	
	}
	if ($RemoteCopy)
	{		
		$cmd +=" -rcopy "	
	}
	if ($AutoDismissed)
	{		
		$cmd +=" -autodismissed "	
	}	
	if ($container_name)
	{		
		$cmd+="  -sc $container_name "	
	}	
	else
	{
		return " FAILURE :  container_name is mandatory to execute Show-3ParVVolvm command "
	}	
	if ($VM_name)
	{		
		$cmd+=" $VM_name "	
	}	
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Show-3ParVVolvm command creates and admits physical disk definitions to enable the use of those disks " "INFO:" 
	return 	$Result	
} # End Show-3ParVVolvm

####################################################################################################################
## FUNCTION Set-3ParVVolSC
####################################################################################################################
Function Set-3ParVVolSC
{
<#
  .SYNOPSIS
    Set-3ParVVolSC can be used to create and remove storage containers for VMware Virtual Volumes (VVols).

    VVols are managed by the vSphere environment, and storage containers are
    used to maintain a logical collection of them. No physical space is
    pre-allocated for a storage container. In the HPE 3PAR OS, special
    VV sets (see showvvset) are used to manage VVol storage containers.

  .DESCRIPTION
    Note : This cmdlet (Set-3ParVVolSC) will be deprecated in a later version of PowerShell Toolkit. Consider using the cmdlet  (Set-VVolSC) instead.
  
    Set-3ParVVolSC can be used to create and remove storage containers for
    VMware Virtual Volumes (VVols).

    VVols are managed by the vSphere environment, and storage containers are
    used to maintain a logical collection of them. No physical space is
    pre-allocated for a storage container. In the HPE 3PAR OS, special
    VV sets (see showvvset) are used to manage VVol storage containers.

  .EXAMPLE
	Set-3ParVVolSC -vvset XYZ (Note: set: already include in code please dont add with vvset)
	
  .EXAMPLE
	Set-3ParVVolSC -Create -vvset XYZ

  .PARAMETER Create
	An empty existing <vvset> not already marked as a VVol Storage
	Container will be updated. The VV set should not contain any
	existing volumes (see -keep option below), must not be already
	marked as a storage container, nor may it be in use for other
	services, such as for remote copy groups, QoS, etc.

  .PARAMETER Remove
	If the specified VV set is a VVol storage container, this option will remove the VV set storage container and remove all of the associated volumes. The user will be asked to confirm that the associated volumes
	in this storage container should be removed.

  .PARAMETER Keep
	Used only with the -create option. If specified, allows a VV set with existing volumes to be marked as a VVol storage container.  However,
	this option should only be used if the existing volumes in the VV set
	are VVols.
	
  .PARAMETER vvset
	The Virtual Volume set (VV set) name, which is used, or to be used, as a VVol storage container.

  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Set-3ParVVolSC
    LASTEDIT: 03/08/2017
    KEYWORDS: Set-3ParVVolSC
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(			
		
		[Parameter(Position=0, Mandatory=$false)]
		[System.String]
		$vvset,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Create,
		
		[Parameter(Position=2, Mandatory=$false)]
		[switch]
		$Remove,
		
		[Parameter(Position=3, Mandatory=$false)]
		[switch]
		$Keep,
		
		[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Set-3ParVVolSC   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Set-3ParVVolSC   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Set-3ParVVolSC   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= " setvvolsc -f"
			
	if ($Create)
	{
		$cmd += " -create "
	}
	if ($Remove)
	{
		$cmd += " -remove "
	}
	if($Keep)
	{
		$cmd += " -keep "
	}
	if ($vvset)
	{		
		$cmd +="  set:$vvset "	
	}	
	else
	{
		return " FAILURE :  vvset is mandatory to execute Set-3ParVVolSC command"
	}
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Set-3ParVVolSC command creates and admits physical disk definitions to enable the use of those disks" "INFO:" 
	return 	$Result	
	
} # End Set-3ParVVolSC

####################################################################################################################
## FUNCTION Get-3ParVVolSC
####################################################################################################################
Function Get-3ParVVolSC
{
<#
  .SYNOPSIS
     The Get-3ParVVolSC command displays VVol storage containers, used to contain
    VMware Volumes for Virtual Machines (VVols).

  .DESCRIPTION
     Note : This cmdlet (Get-3ParVVolSC ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-vVolSc) instead.
  
     The Get-3ParVVolSC command displays VVol storage containers, used to contain
    VMware Volumes for Virtual Machines (VVols).

  .EXAMPLE
	Get-3ParVVolSC 
	
  .EXAMPLE
	Get-3ParVVolSC -Detailed -SC_name test

  .PARAMETER Listcols
	List the columns available to be shown in the -showcols option described
	below.

  .PARAMETER Detailed
	Displays detailed information about the storage containers, including any
	VVols that have been auto-dismissed by remote copy DR operations.

		
  .PARAMETER SC_name  
	Storage Container
	
  .PARAMETER SANConnection 
    Specify the SAN Connection object created with new-SANConnection
	
  .Notes
    NAME:  Get-3ParVVolSC
    LASTEDIT: 03/08/2017
    KEYWORDS: Get-3ParVVolSC
   
  .Link
     Http://www.hpe.com
 
 #Requires PS -Version 3.0

 #>
[CmdletBinding()]
	param(			

		[Parameter(Position=0, Mandatory=$false)]
		[switch]
		$Detailed,
		
		[Parameter(Position=1, Mandatory=$false)]
		[switch]
		$Listcols,
		
		[Parameter(Position=2, Mandatory=$false)]
		[System.String]
		$SC_name,
				
		[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
        $SANConnection = $global:SANConnection       
	)	
	
	Write-DebugLog "Start: In Get-3ParVVolSC   - validating input values" $Debug 
	#check if connection object contents are null/empty
	if(!$SANConnection)
	{		
		#check if connection object contents are null/empty
		$Validate1 = Test-ConnectionObject $SANConnection
		if($Validate1 -eq "Failed")
		{
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object username,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" "ERR:"
				Write-DebugLog "Stop: Exiting Get-3ParVVolSC   since SAN connection object values are null/empty" $Debug
				return "FAILURE : Exiting Get-3ParVVolSC   since SAN connection object values are null/empty"
			}
		}
	}
	$plinkresult = Test-PARCli
	if($plinkresult -match "FAILURE :")
	{
		write-debuglog "$plinkresult" "ERR:" 
		return $plinkresult
	}		
	$cmd= "showvvolsc "	
		
	if ($Listcols)
	{	
		$cmd+=" -listcols "	
	}
	if ($Detailed)
	{	
		$cmd+=" -d "	
	}
	if ($SC_name)
	{		
		$cmd+=" $SC_name "	
	}	
	
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd
	write-debuglog " The Get-3ParVVolSC command creates and admits physical disk definitions to enable the use of those disks  " "INFO:" 
	return 	$Result	
} # End Get-3ParVVolSC

#WSAPI CMDLETS
##########################################################################
#########################FUNCTION Remove-3PARWsapiSession#########################
##########################################################################
Function Remove-3PARWsapiSession()
{
<#
  .SYNOPSIS
   Remove-3PARWsapiSession - Remove WSAPI user connections.

  .DESCRIPTION
   Note : This cmdlet (Remove-3PARWsapiSession) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-WsapiSession) instead.
  
   The Remove-3PARWsapiSession command removes the WSAPI user connections from the
   current system.

  .EXAMPLE
	Remove-3PARWsapiSession -Id "1537246327049685" -User_name 3parxyz -IP_address "10.10.10.10"
	
  .PARAMETER Pat
   Specifies that the <id>, <user_name> and <IP_address> specifiers
   are treated as glob-style (shell-style) patterns and all WSAPI user
   connections matching those patterns are removed. By default,
   confirmation is required to proceed with removing each connection
   unless the -f option is specified.

  .PARAMETER Dr
   Specifies that the operation is a dry run and no connections are
   removed.

  .PARAMETER Close_sse
   Specifies that the Server Sent Event (SSE) connection channel will be
   closed. WSAPI session credential for SSE will not be removed.

  .PARAMETER id
   Specifies the Id of the WSAPI session connection to be removed.

  .PARAMETER user_name
   Specifies the name of the WSAPI user to be removed.

  .PARAMETER IP_address
   Specifies the IP address of the WSAPI user to be removed.
   
  .PARAMETER SANConnection 
   Specify the SAN Connection object created with new-SANConnection
   
  .Notes
    NAME: Remove-3PARWsapiSession
    LASTEDIT 18-09-2018 09:30:01
    KEYWORDS: Remove-3PARWsapiSession
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false)]
 [switch]
 $Pat,

 [Parameter(Position=1, Mandatory=$false)]
 [switch]
 $Dr,

 [Parameter(Position=3, Mandatory=$false)]
 [switch]
 $Close_sse,

 [Parameter(Position=4, Mandatory=$true)]
 [System.String]
 $Id,

 [Parameter(Position=5, Mandatory=$true)]
 [System.String]
 $User_name,

 [Parameter(Position=6, Mandatory=$true)]
 [System.String]
 $IP_address,

 [Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3PARWsapiSession - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
  #check if connection object contents are null/empty
  $Validate1 = Test-ConnectionObject $SANConnection
  if($Validate1 -eq "Failed")
  {
    #check if global connection object contents are null/empty
    $Validate2 = Test-ConnectionObject $global:SANConnection
    if($Validate2 -eq "Failed")
    {
        Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
        Write-DebugLog "Stop: Exiting Remove-3PARWsapiSession since SAN connection object values are null/empty" $Debug 
        Return "FAILURE : Exiting Remove-3PARWsapiSession since SAN connection object values are null/empty"
    }
  }
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " removewsapisession -f"

 if($Pat)
 {
  $Cmd += " -pat "
 }

 if($Dr)
 {
  $Cmd += " -dr "
 }
 if($Close_sse)
 {
  $Cmd += " $Close_sse "
 }

 if($Id)
 {
  $Cmd += " $Id "
 }

 if($User_name)
 {
  $Cmd += " $User_name "
 }

 if($IP_address)
 {
  $Cmd += " IP_address "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Remove-3PARWsapiSession Command --> " INFO: 
 Return $Result
} ##  End-of Remove-3PARWsapiSession
##########################################################################
#########################FUNCTION Set-3PARWsapi#########################
##########################################################################
Function Set-3PARWsapi()
{
<#
  .SYNOPSIS
   Set-3PARWsapi - Set the Web Services API server properties.

  .DESCRIPTION
   Note : This cmdlet (Set-3PARWsapi) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Wsapi) instead.
  
   The Set-3PARWsapi command sets properties of the Web Services API server,
   including options to enable or disable the HTTP and HTTPS ports.

  .EXAMPLE
	Set-3PARWsapi -Force -Enable_Http

  .PARAMETER Force
   Forces the operation of the setwsapi command, bypassing the typical
   confirmation message.
   At least one of the following options are required:

  .PARAMETER Pol
   Sets the WSAPI server policy:
   tls_strict       - only TLS connections using TLS 1.2 with
   secure ciphers will be accepted if HTTPS is
   enabled. This is the default policy setting.
   no_tls_strict    - TLS connections using TLS 1.0 - 1.2 will be
   accepted if HTTPS is enabled.

  .PARAMETER Timeout
   Specifies the value that can be set for the idle session timeout for
   a WSAPI session. <value> is a positive integer and in the range
   of 3-1440 minutes or (3 minutes to 24 hours). Changing the session
   timeout takes effect immediately and will affect already opened and
   subsequent WSAPI sessions.
   The default timeout value is 15 minutes.

  .PARAMETER Evtstream
   Enables or disables the event stream feature. This supports Server
   Sent Event (SSE) protocol.
   The default value is enable.
   
  .PARAMETER SANConnection 
   Specify the SAN Connection object created with new-SANConnection
   
  .Notes
    NAME: Set-3PARWsapi
    LASTEDIT 18-09-2018 09:49:09
    KEYWORDS: Set-3PARWsapi
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Force,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Pol,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Timeout,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Evtstream,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3PARWsapi - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3PARWsapi since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3PARWsapi since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setwsapi "

 if($Force)
 {
	$Cmd += " -f "
 }

 if($Pol)
 {
	$Cmd += " -pol $Pol "
 }

 if($Timeout)
 {
	$Cmd += " -timeout $Timeout "
 }

 if($Evtstream)
 {
	$Cmd += " -evtstream $Evtstream "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3PARWsapi Command --> " INFO: 
 
 Return $Result
} ##  End-of Set-3PARWsapi
##########################################################################
#########################FUNCTION Get-3parWsapi#########################
##########################################################################
Function Get-3parWsapi()
{
<#
  .SYNOPSIS
   Get-3parWsapi - Show the Web Services API server information.

  .DESCRIPTION
   Note : This cmdlet (Get-3parWsapi) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Wsapi) instead.
  
   The Get-3parWsapi command displays the WSAPI server service configuration state
   as either Enabled or Disabled. It displays the server current running
   status as Active, Inactive or Error. It also displays the current status
   of the HTTP and HTTPS ports and their port numbers. WSAPI server URL is
   also displayed.

  .EXAMPLE
   Get-3parWsapi -D

  .PARAMETER D
   Shows WSAPI information in table format.

  .PARAMETER SANConnection 
   Specify the SAN Connection object created with new-SANConnection  
   
  .Notes
    NAME: Get-3parWsapi
    LASTEDIT 18-09-2018 10:05:13
    KEYWORDS: Get-3parWsapi
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parWsapi - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parWsapi since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parWsapi since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " showwsapi "

 if($D)
 {
	$Cmd += " -d "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parWsapi Command -->" INFO: 
 
 if($Result -match "-Service-")
	{
		$range = $Result.count
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{			
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			$s= $s.Trim() -replace '-Service-,-State-,-HTTP_State-,HTTP_Port,-HTTPS_State-,HTTPS_Port,-Version-,-------------API_URL--------------','Service,State,HTTP_State,HTTP_Port,HTTPS_State,HTTPS_Port,ersion,API_URL'			
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	}
 
} ##  End-of Get-3parWsapi
##########################################################################
#########################FUNCTION Get-3parWsapiSession#########################
##########################################################################
Function Get-3parWsapiSession()
{
<#
  .SYNOPSIS
   Get-3parWsapiSession - Show the Web Services API server sessions information.

  .DESCRIPTION
   Note : This cmdlet (Get-3parWsapiSession) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-WsapiSession) instead.
  
   The Get-3parWsapiSession command displays the WSAPI server sessions
   connection information, including the id, node, username, role, hostname,
   and IP Address of the connecting client. It also displays the session
   creation time and session type.

  .EXAMPLE
	Get-3parWsapiSession
  
  .PARAMETER SANConnection 
   Specify the SAN Connection object created with new-SANConnection
   
  .Notes
    NAME: Get-3parWsapiSession
    LASTEDIT 18-09-2018 10:18:41
    KEYWORDS: Get-3parWsapiSession
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parWsapiSession - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
  #check if connection object contents are null/empty
  $Validate1 = Test-ConnectionObject $SANConnection
  if($Validate1 -eq "Failed")
  {
    #check if global connection object contents are null/empty
    $Validate2 = Test-ConnectionObject $global:SANConnection
    if($Validate2 -eq "Failed")
    {
        Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
        Write-DebugLog "Stop: Exiting Get-3parWsapiSession since SAN connection object values are null/empty" $Debug 
        Return "FAILURE : Exiting Get-3parWsapiSession since SAN connection object values are null/empty"
    }
  }
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " showwsapisession "

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parWsapiSession Command" INFO: 
	if($Result.Count -gt 2)
	{
		$range = $Result.count - 3
		$tempFile = [IO.Path]::GetTempFileName()
		foreach ($s in  $Result[0..$range] )
		{			
			$s= [regex]::Replace($s,"^ +","")
			$s= [regex]::Replace($s," +"," ")
			$s= [regex]::Replace($s," ",",")
			$s= $s.Trim() -replace 'Id,Node,-Name--,-Role-,-Client_IP_Addr-,----Connected_since----,-State-,-Session_Type-','Id,Node,Name,Role,Client_IP_Addr,Connected_since,State,Session_Type'			
			Add-Content -Path $tempFile -Value $s
		}
		Import-Csv $tempFile
		del $tempFile
	}
	else
	{
		return $Result
	} 
 
} ##  End-of Get-3parWsapiSession

##########################################################################
#########################FUNCTION Start-3parWsapi#########################
##########################################################################
Function Start-3parWsapi()
{
<#
  .SYNOPSIS
   Start-3parWsapi - Start the Web Services API server to service HTTP and HTTPS requests.

  .DESCRIPTION
   Note : This cmdlet (Start-3parWsapi) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-Wsapi) instead.
  
   The Start-3parWsapi command starts the Web Services API server to service
   HTTP and HTTPS requests.
   By default, the Web Services API server is not started until this
   command is issued.

  .EXAMPLE
   Start-3parWsapi

  .Notes
    NAME: Start-3parWsapi
    LASTEDIT 18-09-2018 10:40:10
    KEYWORDS: Start-3parWsapi
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )
 
 Write-DebugLog "Start: In Start-3parWsapi - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Start-3parWsapi since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Start-3parWsapi since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }
 
	$cmd= " startwsapi "
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $cmd 
 
	return $Result	
 
}
#End Of Start-3parWsapi
##########################################################################
#########################FUNCTION Stop-3parWsapi#########################
##########################################################################
Function Stop-3parWsapi()
{
<#
  .SYNOPSIS
   Stop-3parWsapi - Stop the Web Services API server. Future HTTP and HTTPS requests
   will be rejected.

  .DESCRIPTION
   Note : This cmdlet (Stop-3parWsapi) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Stop-Wsapi) instead.
  
   The Stop-3parWsapi command stops the Web Services API server from servicing
   HTTP and HTTPS requests.

  .EXAMPLE
	Stop-3parWsapi

  .Notes
    NAME: Stop-3parWsapi
    LASTEDIT 18-09-2018 10:48:59
    KEYWORDS: Stop-3parWsapi
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Stop-3parWsapi - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Stop-3parWsapi since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Stop-3parWsapi since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " stopwsapi -f "

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Stop-3parWsapi Command -->" INFO: 
 
 Return $Result
} ##  End-of Stop-3parWsapi

##///////////////////////////////////////////////////////////////
##///////////////////////////////////////////////////////////////
##v2.3 CIMF Sprint 11
##///////////////////////////////////////////////////////////////
##///////////////////////////////////////////////////////////////


##########################################################################
######################### FUNCTION Set-3parDomain #########################
##########################################################################
Function Set-3parDomain()
{
<#
  .SYNOPSIS
   Set-3parDomain Change current domain CLI environment parameter.

  .DESCRIPTION
   Note : This cmdlet (Set-3parDomain) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Domain) instead.
  
   The Set-3parDomain command changes the current domain CLI environment parameter.

  .EXAMPLE
   Set-3parDomain
   
  .EXAMPLE
   Set-3parDomain -Domain "XXX"
   
  .PARAMETER Domain
	Name of the domain to be set as the working domain for the current CLI session.  
	If the <domain> parameter is not present or is equal to -unset then the working domain is set to no current domain.
	

  .Notes
    NAME: Set-3parDomain
    LASTEDIT 14-03-2019 14:24:44
    KEYWORDS: Set-3parDomain
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
 [CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Domain,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parDomain - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
  #check if connection object contents are null/empty
  $Validate1 = Test-ConnectionObject $SANConnection
  if($Validate1 -eq "Failed")
  {
    #check if global connection object contents are null/empty
    $Validate2 = Test-ConnectionObject $global:SANConnection
    if($Validate2 -eq "Failed")
    {
        Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
        Write-DebugLog "Stop: Exiting Set-3parDomain since SAN connection object values are null/empty" $Debug 
        Return "FAILURE : Exiting Set-3parDomain since SAN connection object values are null/empty"
    }
  }
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " changedomain "

 if($Domain)
 {
	$Cmd += " $Domain "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3parDomain Command" INFO: 
 
 if([System.String]::IsNullOrEmpty($Domain))
 {
	$Result = "Working domain is unset to current domain."
	Return $Result
 }
 else
 {
	if([System.String]::IsNullOrEmpty($Result))
	 {
		$Result = "Domain : $Domain to be set as the working domain for the current CLI session."
		Return $Result
	 }
	 else
	 {
		Return $Result
	 }	
 }
 
} ##  End-of Set-3parDomain

##########################################################################
######################### FUNCTION Get-3parDomain #########################
##########################################################################
Function Get-3parDomain()
{
<#
  .SYNOPSIS
   Get-3parDomai - Show information about domains in the system.

  .DESCRIPTION
   Note : This cmdlet (Get-3parDomain) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Domain) instead.
  
   The Get-3parDomai command displays a list of domains in a system.

  .EXAMPLE

  .PARAMETER D
   Specifies that detailed information is displayed.

  .Notes
    NAME: Get-3parDomain
    LASTEDIT 19-03-2019 13:34:53
    KEYWORDS: Get-3parDomain
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$D,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parDomain - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parDomain since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parDomain since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " showdomain "

 if($D)
 {
	$Cmd += " -d "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parDomain Command -->" INFO: 
  
 if($Result.count -gt 1)
 {
	$Cnt = $Result.count
		
 	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count -2  
	
	foreach ($s in  $Result[0..$LastItem] )
	{		
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s," +",",")	
		$s= [regex]::Replace($s,"-","")
		$s= $s.Trim() 
		$temp1 = $s -replace 'CreationTime','Date,Time,Zone'
		$s = $temp1		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile 	
 }
 else
 {
	return  $Result
 }
 
 if($Result.count -gt 1)
 {
	return  " Success : Executing Get-3parDomain"
 }
 else
 {			
	return  $Result
 } 
 
} ##  End-of Get-3parDomain

##########################################################################
######################### FUNCTION Get-3parDomainSet #########################
##########################################################################
Function Get-3parDomainSet()
{
<#
  .SYNOPSIS
   Get-3parDomainSet - show domain set information

  .DESCRIPTION
   Note : This cmdlet (Get-3parDomainSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-DomainSet) instead.
  
   The Get-3parDomainSet command lists the domain sets defined on the system and
   their members.

  .EXAMPLE

  .PARAMETER D
   Show a more detailed listing of each set.

  .PARAMETER Domain
   Show domain sets that contain the supplied domains or patterns

  .PARAMETER SetOrDomainName
	specify either Domain Set name or domain name (member of Domain set)
   
  .Notes
    NAME: Get-3parDomainSet
    LASTEDIT 19-03-2019 14:30:19
    KEYWORDS: Get-3parDomainSet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$D,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Domain, 

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$SetOrDomainName,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parDomainSet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parDomainSet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parDomainSet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " showdomainset "

 if($D)
 {
  $Cmd += " -d "
 }

 if($Domain)
 {
  $Cmd += " -domain "
 } 

 if($SetOrDomainName)
 {
  $Cmd += " $SetOrDomainName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parDomainSet Command -->" INFO:
 
 <#
 if($Result.count -gt 1)
 {
	$Cnt = $Result.count
		
 	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count -2  
	
	foreach ($s in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s,"^ ","")				
		$s= [regex]::Replace($s," +",",")				
		$s= [regex]::Replace($s,"-","")	
		$s= $s.Trim()			
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile 	
 }
 #>
 if($Result.count -gt 1)
 {
	#return  " Success : Executing Get-3parDomainSet"
	return  $Result
 }
 else
 {			
	return  $Result
 }
 
} ##  End-of Get-3parDomainSet

##########################################################################
######################### FUNCTION Move-3parDomain #########################
##########################################################################
Function Move-3parDomain()
{
<#
  .SYNOPSIS
   Move-3parDomai - Move objects from one domain to another, or into/out of domains

  .DESCRIPTION
   Note : This cmdlet (Move-3parDomain) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Move-Domain) instead.
  
   The Move-3parDomai command moves objects from one domain to another.

  .EXAMPLE
  
  .PARAMETER ObjName
	Specifies the name of the object to be moved.
  
  .PARAMETER DomainName
	Specifies the domain or domain set to which the specified object is moved. 
	The domain set name must start with "set:". To remove an object from any domain, specify the string "-unset" for the domain name or domain set specifier.
  
  .PARAMETER Vv
   Specifies that the object is a virtual volume.

  .PARAMETER Cpg
   Specifies that the object is a common provisioning group (CPG).

  .PARAMETER Host
   Specifies that the object is a host.

  .PARAMETER F
   Specifies that the command is forced. If this option is not used, the
   command requires confirmation before proceeding with its operation.

  .Notes
    NAME: Move-3parDomain
    LASTEDIT 19-03-2019 10:20:09
    KEYWORDS: Move-3parDomain
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
 [switch]
 $vv,

 [Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
 [switch]
 $Cpg,

 [Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
 [switch]
 $Host,

 [Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
 [switch]
 $F,

 [Parameter(Position=4, Mandatory=$true, ValueFromPipeline=$true)]
 [System.String]
 $ObjName,

 [Parameter(Position=5, Mandatory=$true, ValueFromPipeline=$true)]
 [System.String]
 $DomainName,

 [Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Move-3parDomain - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Move-3parDomain since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Move-3parDomain since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " movetodomain "

 if($Vv)
 {
	$Cmd += " -vv "
 }

 if($Cpg)
 {
	$Cmd += " -cpg "
 }

 if($Host)
 {
	$Cmd += " -host "
 }

 if($F)
 {
	$Cmd += " -f "
 }
	
 if($ObjName)
 {
	$Cmd += " $ObjName "
 }
 
 if($DomainName)
 {
	$Cmd += " $DomainName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Move-3parDomain Command -->" INFO: 
 
 if($Result -match "Id")
 {
	$Cnt = $Result.count
		
 	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count -1  
	
	foreach ($s in  $Result[0..$LastItem] )
	{		
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s," +",",")	
		$s= [regex]::Replace($s,"-","")
		$s= $s.Trim()
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile 	
 }
 
 if($Result -match "Id")
 {
	return  " Success : Executing Move-3parDomain"
 }
 else
 {			
	return "FAILURE : While Executing Move-3parDomain `n $Result"
 }
 
} ##  End-of Move-3parDomain

##########################################################################
######################### FUNCTION New-3parDomain #########################
##########################################################################
Function New-3parDomain()
{
<#
  .SYNOPSIS
   New-3parDomain : Create a domain.

  .DESCRIPTION
   Note : This cmdlet (New-3parDomain) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Domain) instead.
  
   The New-3parDomain command creates system domains.

  .EXAMPLE
	New-3parDomain -Domain_name xxx
  
  .EXAMPLE
	New-3parDomain -Domain_name xxx -Comment "Hello"

  .PARAMETER Domain_name
	Specifies the name of the domain you are creating. The domain name can be no more than 31 characters. The name "all" is reserved.
	
  .PARAMETER Comment
   Specify any comments or additional information for the domain. The comment can be up to 511 characters long. Unprintable characters are not allowed. 
   The comment must be placed inside quotation marks if it contains spaces.

  .PARAMETER Vvretentiontimemax
   Specify the maximum value that can be set for the retention time of a volume in this domain. <time> is a positive integer value and in the range of 0 - 43,800 hours (1825 days).
   Time can be specified in days or hours providing either the 'd' or 'D' for day and 'h' or 'H' for hours following the entered time value.
   To disable setting the volume retention time in the domain, enter 0 for <time>.

  .Notes
    NAME: New-3parDomain
    LASTEDIT 18-03-2019 16:06:26 
    KEYWORDS: New-3parDomain
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false , ValueFromPipeline=$true)]
	[System.String]
	$Comment,

	[Parameter(Position=1, Mandatory=$false , ValueFromPipeline=$true)]
	[System.String]
	$Vvretentiontimemax,

	[Parameter(Position=2, Mandatory=$true , ValueFromPipeline=$true)]
	[System.String]
	$Domain_name,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In New-3parDomain - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
  #check if connection object contents are null/empty
  $Validate1 = Test-ConnectionObject $SANConnection
  if($Validate1 -eq "Failed")
  {
    #check if global connection object contents are null/empty
    $Validate2 = Test-ConnectionObject $global:SANConnection
    if($Validate2 -eq "Failed")
    {
        Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
        Write-DebugLog "Stop: Exiting New-3parDomain since SAN connection object values are null/empty" $Debug 
        Return "FAILURE : Exiting New-3parDomain since SAN connection object values are null/empty"
    }
  }
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " createdomain "


 if($Comment)
 {
	$Cmd += " -comment " + '" ' + $Comment +' "'	
 }
 
 if($Vvretentiontimemax)
 {
	$Cmd += " -vvretentiontimemax $Vvretentiontimemax "
 } 

 if($Domain_name)
 {
	$Cmd += " $Domain_name "
 }
 else
 {
	return "Domain Required.."
 }
  
 #write-host "CMD = $cmd"
  
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : New-3parDomain Command -->" INFO: 
 
 Return $Result

 
 if ([string]::IsNullOrEmpty($Result))
 {
    Return $Result = "Domain : $Domain_name Created Successfully."
 }
 else
 {
	 Return $Result
 }
} ##  End-of New-3parDomain

##########################################################################
######################### FUNCTION New-3parDomainSet #########################
##########################################################################
Function New-3parDomainSet()
{
<#
  .SYNOPSIS
   New-3parDomainSet : create a domain set or add domains to an existing set

  .DESCRIPTION
   Note : This cmdlet (New-3parDomainSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-DomainSet) instead.
  
   The New-3parDomainSet command defines a new set of domains and provides the option of assigning one or more existing domains to that set. 
   The command also allows the addition of domains to an existing set by use of the -add option.

  .EXAMPLE

  .PARAMETER SetName
	Specifies the name of the domain set to create or add to, using up to 27 characters in length.
  
  .PARAMETER Add
   Specifies that the domains listed should be added to an existing set. At least one domain must be specified.

  .PARAMETER Comment
   Specifies any comment or additional information for the set. The comment can be up to 255 characters long. Unprintable characters are not allowed.

  .Notes
    NAME: New-3parDomainSet
    LASTEDIT 19-03-2019 10:00:54
    KEYWORDS: New-3parDomainSet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 
	[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]
	$SetName,
	
	[Parameter(Position=1, Mandatory=$false , ValueFromPipeline=$true)]
	[switch]
	$Add,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Comment,	
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In New-3parDomainSet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting New-3parDomainSet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting New-3parDomainSet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " createdomainset " 
 
 if($Add)
 {
	$Cmd += " -add "
 }

 if($Comment)
 {
	$Cmd += " -comment " + '" ' + $Comment +' "'
 }
 
 if($SetName)
 {
	$Cmd += " $SetName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : New-3parDomainSet Command -->" INFO: 
 
 Return $Result
} ##  End-of New-3parDomainSet

##########################################################################
######################### FUNCTION Remove-3parDomain #########################
##########################################################################
Function Remove-3parDomain()
{
<#
  .SYNOPSIS
   Remove-3parDomain - Remove a domain

  .DESCRIPTION
   Note : This cmdlet (Remove-3parDomain) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Domain) instead.
  
   The Remove-3parDomain command removes an existing domain from the system.

  .EXAMPLE

  .PARAMETER DomainName
	Specifies the domain that is removed. If the -pat option is specified the DomainName will be treated as a glob-style pattern, and multiple domains will be considered.

  .PARAMETER Pat
   Specifies that names will be treated as glob-style patterns and that all domains matching the specified pattern are removed.

  .Notes
    NAME: Remove-3parDomain
    LASTEDIT 19-03-2019 10:48:09
    KEYWORDS: Remove-3parDomain
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Pat,

	[Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]
	$DomainName,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parDomain - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parDomain since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parDomain since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " removedomain -f "

 if($Pat)
 {
	$Cmd += " -pat "
 }

 if($DomainName)
 {
	$Cmd += " $DomainName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Remove-3parDomain Command -->" INFO: 
 Return $Result
 
} ##  End-of Remove-3parDomain

##########################################################################
######################### FUNCTION Remove-3parDomainSet #########################
##########################################################################
Function Remove-3parDomainSet()
{
<#
  .SYNOPSIS
   Remove-3parDomainSet : remove a domain set or remove domains from an existing set

  .DESCRIPTION
   Note : This cmdlet (Remove-3parDomainSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-DomainSet) instead.
  
   The Remove-3parDomainSet command removes a domain set or removes domains from an existing set.

  .EXAMPLE

  .PARAMETER SetName
	Specifies the name of the domain set. If the -pat option is specified the setname will be treated as a glob-style pattern, and multiple domain sets will be considered.

  .PARAMETER Domain
	Optional list of domain names that are members of the set.
	If no <Domain>s are specified, the domain set is removed, otherwise the specified <Domain>s are removed from the domain set. 
	If the -pat option is specified the domain will be treated as a glob-style pattern, and multiple domains will be considered.
  
  .PARAMETER F
   Specifies that the command is forced. If this option is not used, the command requires confirmation before proceeding with its operation.

  .PARAMETER Pat
   Specifies that both the set name and domains will be treated as glob-style patterns.

  .Notes
    NAME: Remove-3parDomainSet
    LASTEDIT 19-03-2019 11:53:59
    KEYWORDS: Remove-3parDomainSet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
 [switch]
 $F,

 [Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
 [switch]
 $Pat,

 [Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
 [System.String]
 $SetName,

 [Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
 [System.String]
 $Domain,

 [Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parDomainSet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parDomainSet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parDomainSet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " removedomainset "

 if($F)
 {
  $Cmd += " -f "
 }

 if($Pat)
 {
  $Cmd += " -pat "
 }

 if($SetName)
 {
  $Cmd += " $SetName "
 }

 if($Domain)
 {
  $Cmd += " $Domain "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Remove-3parDomainSet Command -->" INFO: 
 
 Return $Result
} ##  End-of Remove-3parDomainSet

##########################################################################
######################### FUNCTION Update-3parDomain #########################
##########################################################################
Function Update-3parDomain()
{
<#
  .SYNOPSIS
   Update-3parDomain : Set parameters for a domain.

  .DESCRIPTION
   Note : This cmdlet (Update-3parDomain) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-Domain) instead.
  
   The Update-3parDomain command sets the parameters and modifies the properties of a
   domain.

  .EXAMPLE
 
  .PARAMETER DomainName
	Indicates the name of the domain.(Existing Domain Name)

  .PARAMETER NewName
   Changes the name of the domain.

  .PARAMETER Comment
   Specifies comments or additional information for the domain. The comment can be up to 511 characters long and must be enclosed in quotation
   marks. Unprintable characters are not allowed within the <comment> specifier.

  .PARAMETER Vvretentiontimemax
   Specifies the maximum value that can be set for the retention time of
   a volume in this domain. <time> is a positive integer value and in the
   range of 0 - 43,800 hours (1825 days). Time can be specified in days or
   hours providing either the 'd' or 'D' for day and 'h' or 'H' for hours
   following the entered time value.
   To remove the maximum volume retention time for the domain, enter
   '-vvretentiontimemax ""'. As a result, the maximum volume retention
   time for the system is used instead.
   To disable setting the volume retention time in the domain, enter 0
   for <time>.

  .Notes
    NAME: Update-3parDomain
    LASTEDIT 19-03-2019 12:02:31
    KEYWORDS: Update-3parDomain
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$NewName,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Comment,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Vvretentiontimemax,

	[Parameter(Position=3, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]
	$DomainName,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parDomain - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parDomain since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parDomain since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " setdomain "

 if($NewName)
 {
	$Cmd += " -name $NewName "
 }

 if($Comment)
 {
	$Cmd += " -comment " + '" ' + $Comment +' "'
 }

 if($Vvretentiontimemax)
 {
	$Cmd += " -vvretentiontimemax $Vvretentiontimemax "
 }

 if($DomainName)
 {
	$Cmd += " $DomainName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Update-3parDomain Command -->" INFO: 
 
 Return $Result
} ##  End-of Update-3parDomain

##########################################################################
######################### FUNCTION Update-3parDomainSet #########################
##########################################################################
Function Update-3parDomainSet()
{
<#
  .SYNOPSIS
   Update-3parDomainSet : set parameters for a domain set

  .DESCRIPTION
   Note : This cmdlet (Update-3parDomainSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-DomainSet) instead.
   
   The Update-3parDomainSet command sets the parameters and modifies the properties of
   a domain set.

  .EXAMPLE
  
  .PARAMETER DomainSetName
	Specifies the name of the domain set to modify.
	
  .PARAMETER Comment
   Specifies any comment or additional information for the set. The
   comment can be up to 255 characters long. Unprintable characters are
   not allowed.

  .PARAMETER NewName
   Specifies a new name for the domain set, using up to 27 characters in length.

  .Notes
    NAME: Update-3parDomainSet
    LASTEDIT 19-03-2019 12:10:23
    KEYWORDS: Update-3parDomainSet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
 [System.String]
 $Comment,

 [Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
 [System.String]
 $NewName,

 [Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
 [System.String]
 $DomainSetName,

 [Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parDomainSet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parDomainSet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parDomainSet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " setdomainset "

 if($Comment)
 {
	$Cmd += " -comment " + '" ' + $Comment +' "'
 }

 if($NewName)
 {
  $Cmd += " -name $NewName "
 }

 if($DomainSetName)
 {
  $Cmd += " $DomainSetName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Update-3parDomainSet Command -->" INFO: 
 
 Return $Result
 
} ##  End-of Update-3parDomainSet

##########################################################################
######################### FUNCTION New-3parFlashCache ####################
##########################################################################
Function New-3parFlashCache()
{
<#
  .SYNOPSIS
   New-3parFlashCache - Creates flash cache for the cluster.

  .DESCRIPTION
   Note : This cmdlet (New-3parFlashCache) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-FlashCache) instead.
  
   The New-3parFlashCache command creates flash cache of <size> for each node pair. The flash cache will be created from SSD drives.

  .EXAMPLE

  .PARAMETER Sim
   Specifies that the Adaptive Flash Cache will be run in simulator mode. The simulator mode does not require the use of SSD drives.

  .PARAMETER RAIDType
   Specifies the RAID type of the logical disks for Flash Cache; r0 for RAID-0 or r1 for RAID-1. If no RAID type is specified, the default is chosen by the storage system.

  .PARAMETER Size
	Specifies the size for the flash cache in MiB for each node pair. The flashcache size should be a multiple of 16384 (16GiB), and be an integer. 
	The minimum size of the flash cache is 64GiB. The maximum size of the flash cache is based on the node types, ranging from 768GiB up to 12288GiB (12TiB).
    An optional suffix (with no whitespace before the suffix) will modify the units to GiB (g or G suffix) or TiB (t or T suffix).
   
  .Notes
    NAME: New-3parFlashCache
    LASTEDIT 20-03-2019 10:32:55
    KEYWORDS: New-3parFlashCache
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false , ValueFromPipeline=$true)]
	 [switch]
	 $Sim,

	 [Parameter(Position=1, Mandatory=$false , ValueFromPipeline=$true)]
	 [System.String]
	 $RAIDType,

	 [Parameter(Position=2, Mandatory=$true , ValueFromPipeline=$true)]
	 [System.String]
	 $Size,

	 [Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In New-3parFlashCache - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting New-3parFlashCache since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting New-3parFlashCache since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " createflashcache "

 if($Sim)
 {
	$Cmd += " -sim "
 }

 if($RAIDType)
 {
	$Cmd += " -t $RAIDType "
 }

 if($Size)
 {
	$Cmd += " $Size "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : New-3parFlashCache Command -->" INFO: 
 
 Return $Result
} ##  End-of New-3parFlashCache


##########################################################################
######################### FUNCTION Set-3parFlashCache ####################
##########################################################################
Function Set-3parFlashCache()
{
<#
  .SYNOPSIS
   Set-3parFlashCache - Sets the flash cache policy for virtual volumes

  .DESCRIPTION
   Note : This cmdlet (Set-3parFlashCache) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-FlashCache) instead.
  
   The Set-3parFlashCache command allows you to set the policy of the flash cache for virtual volumes. The policy is set by using virtual volume sets(vvset). 
	The sys:all is used to enable the policy on all virtual volumes in the system.

  .EXAMPLE
   None.
  .PARAMETER Enable
	Will turn on the flash cache policy for the target object.
  
  .PARAMETER Disable
	Will turn off flash cache policy for the target object.
  
  .PARAMETER Clear
	Will turn off policy and can only be issued against the sys:all target.
  
  .PARAMETER vvSet
	vvSet refers to the target object name as listed in the showvvset command. Pattern is glob-style (shell-style) patterns (see help on sub,globpat).
	Note(set Name Should de is the same formate Ex:  vvset:vvset1 )
	
  .PARAMETER All
	The policy is applied to all virtual volumes.
  
  .Notes
    NAME: Set-3parFlashCache
    LASTEDIT 20-03-2019 11:03:08
    KEYWORDS: 3parVersion
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	 [switch]
	 $Enable,

	 [Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	 [switch]
	 $Disable,
	 
	 [Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	 [switch]
	 $Clear,

	 [Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	 [System.String]
	 $vvSet,
	 
	 [Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	 [switch]
	 $All,

	 [Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parFlashCache - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parFlashCache since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parFlashCache since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " setflashcache "

 if($Enable)
 {
	$Cmd += " enable "
 }
 elseif($Disable)
 {
	$Cmd += " disable "
 }

 elseif($Clear)
 {
	$Cmd += " clear "
 }
 else
 {
	return "Select at least one from [ Enable | Disable | Clear] "
 }
  
 if($vvSet)
 {
	$Cmd += " $vvSet "
 }
 
  if($All)
 {
	$Cmd += " sys:all "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3parFlashCache Command -->" INFO: 
 
 Return $Result
} ##  End-of Set-3parFlashCache

##########################################################################
######################### FUNCTION Remove-3parFlashCache #################
##########################################################################
Function Remove-3parFlashCache()
{
<#
  .SYNOPSIS
   Remove-3parFlashCach - Removes flash cache from the cluster.

  .DESCRIPTION
   Note : This cmdlet (Remove-3parFlashCache) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-FlashCache) instead.
  
   The Remove-3parFlashCach command removes the flash cache from the cluster and will stop use of the extended cache.

  .EXAMPLE

  .PARAMETER F
   Specifies that the command is forced. If this option is not used, the command requires confirmation before proceeding with its operation.

  .Notes
    NAME: Remove-3parFlashCache
    LASTEDIT 20-03-2019 10:54:42
    KEYWORDS: Remove-3parFlashCache
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false)]
	 [switch]
	 $F,

	 [Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parFlashCache - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parFlashCache since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parFlashCache since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " removeflashcache "

 if($F)
 {
	$Cmd += " -f "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Remove-3parFlashCache Command -->" INFO: 
 
 Return $Result
} ##  End-of Remove-3parFlashCache

##########################################################################
######################### FUNCTION Get-3parHealth ########################
##########################################################################
Function Get-3parHealth()
{
<#
  .SYNOPSIS
   Get-3parHealth - Check the current health of the system.

  .DESCRIPTION
   Note : This cmdlet (Get-3parHealth) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Health) instead.
  
   The Get-3parHealth command checks the status of system hardware and software components, and reports any issues

  .EXAMPLE
  
  .PARAMETER Component
	Indicates the component to check. Use -list option to get the list of components.
	
  .PARAMETER Lite
   Perform a minimal health check.

  .PARAMETER Svc
   Perform a thorough health check. This is the default option.

  .PARAMETER Full
   Perform the maximum health check. This option cannot be used with the -lite option.

  .PARAMETER List
   List all components that will be checked.

  .PARAMETER Quiet
   Do not display which component is currently being checked. Do not display the footnote with the -list option.

  .PARAMETER D
   Display detailed information regarding the status of the system.

  .Notes
    NAME: Get-3parHealth
    LASTEDIT 20-03-2019 13:33:19
    KEYWORDS: Get-3parHealth
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Lite,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Svc,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Full,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$List,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Quiet,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$D,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Component,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parHealth - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parHealth since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parHealth since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " checkhealth "

 if($Lite)
 {
	$Cmd += " -lite "
 }

 if($Svc)
 {
	$Cmd += " -svc "
 }

 if($Full)
 {
	$Cmd += " -full "
 }

 if($List)
 {
	$Cmd += " -list "
 }

 if($Quiet)
 {
	$Cmd += " -quiet "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Component)
 {
	$Cmd += " $Component "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parHealth Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parHealth

##########################################################################
######################### FUNCTION Remove-3parAlerts #########################
##########################################################################
Function Remove-3parAlerts()
{
<#
  .SYNOPSIS
   Remove-3parAlerts - Remove one or more alerts.

  .DESCRIPTION
   Note : This cmdlet (Remove-3parAlerts) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Alerts) instead.
  
   The Remove-3parAlerts command removes one or more alerts from the system.

  .EXAMPLE

  .PARAMETER  Alert_ID
	Indicates a specific alert to be removed from the system. This specifier can be repeated to remove multiple alerts. If this specifier is not used, the -a option must be used.
  
  .PARAMETER All
   Specifies all alerts from the system and prompts removal for each alert.
   If this option is not used, then the <alert_ID> specifier must be used.

  .PARAMETER F
   Specifies that the command is forced. If this option is not used and
   there are alerts in the "new" state, the command requires confirmation
   before proceeding with the operation.

  .Notes
    NAME: Remove-3parAlerts
    LASTEDIT 27-03-2019 11:58:25
    KEYWORDS: Remove-3parAlerts
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$All,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$F,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Alert_ID,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parAlerts - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parAlerts since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parAlerts since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " removealert "

 if($F)
 {
	$Cmd += " -f "
 }
 
 if($All)
 {
	$Cmd += " -a "
 }
 elseif($Alert_ID)
 {
	$Cmd += " $Alert_ID "
 }
 else
 {
	Return "Please Select At-least One from [ All | Alert_ID ]..."
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Remove-3parAlerts Command -->" INFO: 
 
 Return $Result
 
} ##  End-of Remove-3parAlerts

##########################################################################
######################### FUNCTION Set-3parAlert #########################
##########################################################################
Function Set-3parAlert()
{
<#
  .SYNOPSIS
   Set-3parAlert - Set the status of system alerts.

  .DESCRIPTION
   Note : This cmdlet (Set-3parAlert) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Alert) instead.
  
   The Set-3parAlert command sets the status of system alerts.

  .EXAMPLE

  .PARAMETER Alert_ID
	Specifies that the status of a specific alert be set. This specifier
	can be repeated to indicate multiple specific alerts. Up to 99 alerts
	can be specified in one command. If not specified, the -a option must
	be specified on the command line.
  
  .PARAMETER All
   Specifies that the status of all alerts be set. If not specified, the Alert_ID specifier must be specified.

  .PARAMETER New
	Specifies that the alert(s), as indicated with the <alert_ID> specifier
	or with option -a, be set as "New"(new), "Acknowledged"(ack), or
	"Fixed"(fixed).

  .PARAMETER Ack
	Specifies that the alert(s), as indicated with the <alert_ID> specifier
	or with option -a, be set as "New"(new), "Acknowledged"(ack), or
	"Fixed"(fixed).

  .PARAMETER Fixed
	Specifies that the alert(s), as indicated with the <alert_ID> specifier
	or with option -a, be set as "New"(new), "Acknowledged"(ack), or
	"Fixed"(fixed).

   
  .Notes
    NAME: Set-3parAlert
    LASTEDIT 27-03-2019 12:11:31
    KEYWORDS: Set-3parAlert
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$New,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Ack,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Fixed,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$All,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Alert_ID,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parAlert - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parAlert since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parAlert since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " setalert "

 if($New)
 {
	$Cmd += " new "
 }
 elseif($Ack)
 {
	$Cmd += " ack "
 }
 elseif($Fixed)
 {
	$Cmd += " fixed "
 }
 else
 {
	Return "Please Select At-least One from [ New | Ack | Fixed ]..." 
 }

 if($All)
 {
	$Cmd += " -a "
 }
 elseif($Alert_ID)
 {
	$Cmd += " $Alert_ID "
 }
 else
 {
	Return "Please Select At-least One from [ All | Alert_ID ]..." 
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3parAlert Command -->" INFO: 
 
 Return $Result
} ##  End-of Set-3parAlert

##########################################################################
######################### FUNCTION Get-3parAlert #########################
##########################################################################
Function Get-3parAlert()
{
<#
  .SYNOPSIS
   Get-3parAlert - Display system alerts.

  .DESCRIPTION
   Note : This cmdlet (Get-3parAlert) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Alert) instead.
  
   The Get-3parAlert command displays the status of system alerts. When issued
   without options, all new customer alerts are displayed.

  .EXAMPLE
   
  .PARAMETER N
   Specifies that only new customer alerts are displayed.
   This is the default.

  .PARAMETER A
   Specifies that only acknowledged alerts are displayed.

  .PARAMETER F
   Specifies that only fixed alerts are displayed.

  .PARAMETER All
   Specifies that all customer alerts are displayed.
   
   
   The format of the alert display is controlled by the following options:

  .PARAMETER D
   Specifies that detailed information is displayed. Cannot be specified
   with the -oneline option.

  .PARAMETER Oneline
   Specifies that summary information is displayed in a tabular form with
   one line per alert. For customer alerts, the message text will be
   truncated if it is too long unless the -wide option is also specified.

  .PARAMETER Svc
   Specifies that only service alerts are displayed. This option can only be
   used with the -d or -oneline formatting options.

  .PARAMETER Wide
   Do not truncate the message text. Only valid for customer alerts and if the -oneline option is also specified.

  .Notes
    NAME: Get-3parAlert
    LASTEDIT 27-03-2019 14:23:00
    KEYWORDS: Get-3parAlert
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$N,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$A,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$F,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$All,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$D,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Oneline,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Svc,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Wide,

	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parAlert - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parAlert since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parAlert since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " showalert "

 if($N)
 {
	$Cmd += " -n "
 }

 if($A)
 {
	$Cmd += " -a "
 }

 if($F)
 {
	$Cmd += " -f "
 }

 if($All)
 {
	$Cmd += " -all "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Svc)
 {
	$Cmd += " -svc "
 }

 if($Wide)
 {
	$Cmd += " -wide "
 }

 if($Oneline)
 {
	$Cmd += " -oneline "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parAlert Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parAlert

##########################################################################
######################### FUNCTION Get-3parEventLog ######################
##########################################################################
Function Get-3parEventLog()
{
<#
  .SYNOPSIS
   Get-3parEventLog - Show the system event log.

  .DESCRIPTION
   Note : This cmdlet (Get-3parEventLog) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-EventLog) instead.
  
   The Get-3parEventLog command displays the current system event log.

  .EXAMPLE

  .PARAMETER Min
   Specifies that only events occurring within the specified number of
   minutes are shown. The <number> is an integer from 1 through 2147483647.

  .PARAMETER More
   Specifies that you can page through several events at a time.

  .PARAMETER Oneline
   Specifies that each event is formatted as one line.

  .PARAMETER D
   Specifies that detailed information is displayed.

  .PARAMETER Startt
   Specifies that only events after a specified time are to be shown. The
   time argument can be specified as either <timespec>, <datespec>, or
   both. If you would like to specify both a <timespec> and <datespec>, you must
   place quotation marks around them; for example, -startt "2012-10-29 00:00".
	   <timespec>
	   Specified as the hour (hh), as interpreted on a 24 hour clock, where
	   minutes (mm) and seconds (ss) can be optionally specified.
	   Acceptable formats are hh:mm:ss or hhmm.
	   <datespec>
	   Specified as the month (mm or month_name) and day (dd), where the
	   year (yy) can be optionally specified. Acceptable formats are
	   mm/dd/yy, month_name dd, dd month_name yy, or yy-mm-dd. If the
	   syntax yy-mm-dd is used, the year must be specified.

  .PARAMETER Endt
   Specifies that only events before a specified time are to be shown. The
   time argument can be specified as either <timespec>, <datespec>, or both.
   See -startt for descriptions of <timespec> and <datespec>.
   
   
   The <pattern> argument in the following options is a regular expression pattern that is used
   to match against the events each option produces.
   (See help on sub,regexpat.)
   
   For each option, the pattern argument can be specified multiple times by repeating the option
   and <pattern>. For example:
   
   showeventlog -type Disk.* -type <tpdtcl client> -sev Major
   The "-sev Major" displays all events of severity Major and with a type that matches either
   the regular expression Disk.* or <tpdtcl client>.

  .PARAMETER Sev
   Specifies that only events with severities that match the specified
   pattern(s) are displayed. The supported severities include Fatal,
   Critical, Major, Minor, Degraded, Informational and Debug

  .PARAMETER Nsev
   Specifies that only events with severities that do not match the
   specified pattern(s) are displayed. The supported severities
   include Fatal, Critical, Major, Minor, Degraded, Informational and
   Debug.

  .PARAMETER Class
   Specifies that only events with classes that match the specified
   pattern(s) are displayed.

  .PARAMETER Nclass
   Specifies that only events with classes that do not match the specified
   pattern(s) are displayed.

  .PARAMETER Node
   Specifies that only events from nodes that match the specified
   pattern(s) are displayed.

  .PARAMETER Nnode
   Specifies that only events from nodes that do not match the specified
   pattern(s) are displayed.

  .PARAMETER Type
   Specifies that only events with types that match the specified
   pattern(s) are displayed.

  .PARAMETER Ntype
   Specifies that only events with types that do not match the specified
   pattern(s) are displayed.

  .PARAMETER Msg
   Specifies that only events, whose messages match the specified
   pattern(s), are displayed.

  .PARAMETER Nmsg
   Specifies that only events, whose messages do not match the specified
   pattern(s), are displayed.

  .PARAMETER Comp
   Specifies that only events, whose components match the specified
   pattern(s), are displayed.

  .PARAMETER Ncomp
   Specifies that only events, whose components do not match the specified
   pattern(s), are displayed.

  .Notes
    NAME: Get-3parEventLog
    LASTEDIT 27-03-2019 15:15:36
    KEYWORDS: Get-3parEventLog
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Min,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$More,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Oneline,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$D,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Startt,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Endt,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sev,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Nsev,

	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Class,

	[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Nclass,

	[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Node,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Nnode,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Type,

	[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Ntype,

	[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Msg,

	[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Nmsg,

	[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Comp,

	[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Ncomp,

	[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parEventLog - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parEventLog since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parEventLog since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " showeventlog "

 if($Min)
 {
	$Cmd += " -min $Min "
 }

 if($More)
 {
	$Cmd += " -more "
 }

 if($Oneline)
 {
	$Cmd += " -oneline "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Startt)
 {
	$Cmd += " -startt $Startt "
 }

 if($Endt)
 {
	$Cmd += " -endt $Endt "
 }

 if($Sev)
 {
	$Cmd += " -sev $Sev "
 }

 if($Nsev)
 {
	$Cmd += " -nsev $Nsev "
 }

 if($Class)
 {
	$Cmd += " -class $Class "
 }

 if($Nclass)
 {
	$Cmd += " -nclass $Nclass "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Nnode)
 {
	$Cmd += " -nnode $Nnode "
 }

 if($Type)
 {
	$Cmd += " -type $Type "
 }

 if($Ntype)
 {
	$Cmd += " -ntype $Ntype "
 }

 if($Msg)
 {
	$Cmd += " -msg $Msg "
 }

 if($Nmsg)
 {
	$Cmd += " -nmsg $Nmsg "
 }

 if($Comp)
 {
	$Cmd += " -comp $Comp "
 }

 if($Ncomp)
 {
	$Cmd += " -ncomp $Ncomp "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parEventLog Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parEventLog

##########################################################################
######################### FUNCTION Update-3parHostSet ####################
##########################################################################
Function Update-3parHostSet()
{
<#
  .SYNOPSIS
   Update-3parHostSet - set parameters for a host set

  .DESCRIPTION
   Note : This cmdlet (Update-3parHostSet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-HostSet) instead.
  
   The Update-3parHostSet command sets the parameters and modifies the properties of a host set.

  .EXAMPLE

  .PARAMETER Setname
	Specifies the name of the host set to modify.
  
  .PARAMETER Comment
   Specifies any comment or additional information for the set. The comment can be up to 255 characters long. Unprintable characters are not allowed.

  .PARAMETER NewName
   Specifies a new name for the host set, using up to 27 characters in length.

  .Notes
    NAME: Update-3parHostSet
    LASTEDIT 28-03-2019 15:58:01
    KEYWORDS: Update-3parHostSet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Comment,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$NewName,

	[Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]                         
	$Setname,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parHostSet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parHostSet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parHostSet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " sethostset "
	
 if($Comment)
 {
	$Cmd += " -comment $Comment "
 }

 if($NewName)
 {
	$Cmd += " -name $NewName "
 } 

 if($Setname)
 {
	$Cmd += " $Setname "
 } 
 else
 {
	return "Setname is mandatory Please enter..."
 } 

 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Update-3parHostSet Command -->" INFO: 
 
 if ([string]::IsNullOrEmpty($Result))
 {
    Get-3parHostSet -hostSetName $NewName
 }
 else
 { 
	Return $Result
 }
} ##  End-of Update-3parHostSet

##///////////////////////////////////////////////////////////////
##///////////////////////////////////////////////////////////////
##v2.3 CIMF Sprint 12
##///////////////////////////////////////////////////////////////
##///////////////////////////////////////////////////////////////

##########################################################################
######################### FUNCTION Update-Compact3parCPG #################
##########################################################################
Function Update-Compact3parCPG()
{
<#
  .SYNOPSIS
   Update-Compact3parCPG - Consolidate space in common provisioning groups.

  .DESCRIPTION
   Note : This cmdlet (Update-Compact3parCPG) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Compress-CPG) instead.
  
   The Update-Compact3parCPG command consolidates logical disk space in Common
   Provisioning Groups (CPGs) into as few logical disks as possible, allowing
   unused logical disks to be removed and their space reclaimed.

  .EXAMPLE
	Update-Compact3parCPG -CPG_name xxx 
	
  .EXAMPLE
	Update-Compact3parCPG -CPG_name tstCPG

  .PARAMETER Pat
   Compacts CPGs that match any of the specified patterns. This option
   must be used if the pattern specifier is used.

  .PARAMETER Waittask
   Waits for any created tasks to complete.

  .PARAMETER Trimonly
   Removes unused logical disks after consolidating the space. This option
   will not perform any region moves.

  .PARAMETER Nomatch
   Removes only unused logical disks whose characteristics do not match
   the growth characteristics of the CPG. Must be used with the -trimonly
   option. If all logical disks match the CPG growth characteristics,
   this option has no effect.

  .PARAMETER Dr
   Specifies that the operation is a dry run, and the tasks are not
   actually performed.

  .Notes
    NAME: Update-Compact3parCPG
    LASTEDIT 05-04-2019 15:01:51
    KEYWORDS: Update-Compact3parCPG
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Pat,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Waittask,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Trimonly,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Nomatch,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Dr,

	[Parameter(Position=5, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]
	$CPG_name,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-Compact3parCPG - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-Compact3parCPG since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-Compact3parCPG since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " compactcpg -f "

 if($Pat)
 {
	$Cmd += " -pat "
 }

 if($Waittask)
 {
	$Cmd += " -waittask "
 }

 if($Trimonly)
 {
	$Cmd += " -trimonly "
 }

 if($Nomatch)
 {
	$Cmd += " -nomatch "
 }

 if($Dr)
 {
	$Cmd += " -dr "
 }

 if($CPG_name)
 {
	$Cmd += " $CPG_name "
 }
 else
 {
	Return "CPG Name is mandatory please enter...."
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Update-Compact3parCPG Command -->" INFO: 
 
 Return $Result
} ##  End-of Update-Compact3parCPG

##########################################################################
#########################  FUNCTION Set-3parCPG  #########################
##########################################################################
Function Set-3parCPG()
{
<#
  .SYNOPSIS
   Set-3parCPG - Update a Common Provisioning Group (CPG)

  .DESCRIPTION
   Note : This cmdlet (Set-3parCPG) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-CPG) instead.
  
   The Set-3parCPG command modifies existing Common Provisioning Groups (CPG).

  .EXAMPLE

  .PARAMETER Sa
   Specifies that existing logical disks are added to the CPG and are used
   for snapshot admin (SA) space allocation. The <LD_name> argument can be
   repeated to specify multiple logical disks.
   This option is deprecated and will be removed in a subsequent release.

  .PARAMETER Sd
   Specifies that existing logical disks are added to the CPG and are used
   for snapshot data (SD) space allocation. The <LD_name> argument can be
   repeated to specify multiple logical disks.
   This option is deprecated and will be removed in a subsequent release.
	
  .PARAMETER Aw
   Specifies the percentage of used snapshot administration or snapshot
   data space that results in a warning alert. A percent value of 0
   disables the warning alert generation. The default is 0.
   This option is deprecated and will be removed in a subsequent release.

  .PARAMETER Sdgs
   Specifies the growth increment, the amount of logical disk storage
   created on each auto-grow operation. The default growth increment may
   vary according to the number of controller nodes in the system. If <size>
   is non-zero it must be 8G or bigger. The size can be specified in MB (default)
   or GB (using g or G) or TB (using t or T). A size of 0 disables the auto-grow
   feature. The following table displays the default and minimum growth
   increments per number of nodes:
   Number of Nodes       Default     Minimum
   1-2               32G          8G
   3-4               64G         16G
   5-6               96G         24G
   7-8              128G         32G

  .PARAMETER Sdgl
   Specifies that the auto-grow operation is limited to the specified
   storage amount. The storage amount can be specified in MB (default) or
   GB (using g or G) or TB (using t or T). A size of 0 (default) means no
   limit is enforced.  To disable auto-grow, set the limit to 1.

  .PARAMETER Sdgw
   Specifies that the threshold of used logical disk space, when exceeded,
   results in a warning alert. The size can be specified in MB (default) or
   GB (using g or G) or TB (using t or T). A size of 0 (default) means no
   warning limit is enforced. To set the warning for any used space,
   set the limit to 1.

  .PARAMETER T
   Specifies the RAID type of the logical disk: r1 for RAID-1, or r6 for
   RAID-6. If no RAID type is specified, then the default is r6.

  .PARAMETER Ssz
   Specifies the set size in terms of chunklets. The default depends on
   the RAID type specified: 3 for RAID-1, and 8 for RAID-6.

  .PARAMETER Rs
   Specifies the number of sets in a row. The <size> is a positive integer.
   If not specified, no row limit is imposed.

  .PARAMETER Ss
   Specifies the step size from 32 KiB to 512 KiB. The step size should be a
   power of 2 and a multiple of 32. The default value depends on raid type and
   device type used. If no value is entered and FC or NL drives are used, the
   step size defaults to 256 KiB for RAID-1.
   If SSD drives are used, the step size defaults to 32 KiB for RAID-1.
   For RAID-6, the default is a function of the set size.

  .PARAMETER Ha
   Specifies that the layout must support the failure of one port pair,
   one cage, or one drive magazine (mag). The default is cage availability.

  .PARAMETER Ch
   Specifies the chunklet location characteristics: either first (attempt
   to use the lowest numbered available chunklets) or last(attempt to use
   the highest numbered available chunklets). If no argument is specified,
   the default characteristic is first.

  .PARAMETER P
   Specifies a pattern for candidate disks. Patterns are used to select
   disks that are used for creating logical disks. If no pattern is
   specified, the option defaults to Fast Class (FC) disks. If specified
   multiple times, each instance of the specified pattern adds additional
   candidate disks that match the pattern. The -devtype pattern cannot be
   used to mix Nearline (NL), FC, and Solid State Drive (SSD) drives. An
   item is specified as an integer, a comma-separated list of integers, or
   a range of integers specified from low to high.
   The following arguments can be specified as patterns for this option:
   An item is specified as an integer, a comma-separated list of integers,
   or a range of integers specified from low to high.

  .PARAMETER Nd
   Specifies one or more nodes. Nodes are identified by one or more
   integers (item). Multiple nodes are separated with a single comma
   (e.g. 1,2,3). A range of nodes is separated with a hyphen (e.g. 0-
   7). The primary path of the disks must be on the specified node(s).

  .PARAMETER St
   Specifies one or more PCI slots. Slots are identified by one or more
   integers (item). Multiple slots are separated with a single comma
   (e.g. 1,2,3). A range of slots is separated with a hyphen (e.g. 0-
   7). The primary path of the disks must be on the specified PCI
   slot(s).

  .PARAMETER Pt
   Specifies one or more ports. Ports are identified by one or more
   integers (item). Multiple ports are separated with a single comma
   (e.g. 1,2,3). A range of ports is separated with a hyphen (e.g. 0-
   4). The primary path of the disks must be on the specified port(s).

  .PARAMETER Cg
   Specifies one or more drive cages. Drive cages are identified by one
   or more integers (item). Multiple drive cages are separated with a
   single comma (e.g. 1,2,3). A range of drive cages is separated with
   a hyphen (e.g. 0-3). The specified drive cage(s) must contain disks.

  .PARAMETER Mg
   Specifies one or more drive magazines. The "1." or "0." displayed
   in the CagePos column of showpd output indicating the side of the
   cage is omitted when using the -mg option. Drive magazines are
   identified by one or more integers (item). Multiple drive magazines
   are separated with a single comma (e.g. 1,2,3). A range of drive
   magazines is separated with a hyphen(e.g. 0-7). The specified drive
   magazine(s) must contain disks.

  .PARAMETER Pn
   Specifies one or more disk positions within a drive magazine. Disk
   positions are identified by one or more integers (item). Multiple
   disk positions are separated with a single comma(e.g. 1,2,3). A
   range of disk positions is separated with a hyphen(e.g. 0-3). The
   specified position(s) must contain disks.

  .PARAMETER Dk
   Specifies one or more physical disks. Disks are identified by one or
   more integers(item). Multiple disks are separated with a single
   comma (e.g. 1,2,3). A range of disks is separated with a hyphen(e.g.
   0-3).  Disks must match the specified ID(s).

  .PARAMETER Tc_gt
   Specifies that physical disks with total chunklets greater than the
   number specified be selected.

  .PARAMETER Tc_lt
   Specifies that physical disks with total chunklets less than the
   number specified be selected.

  .PARAMETER Fc_gt
   Specifies that physical disks with free chunklets greater than the
   number specified be selected.

  .PARAMETER Fc_lt
   Specifies that physical disks with free chunklets less than the
   number specified be selected.

  .PARAMETER Devid
   Specifies that physical disks identified by their models be
   selected. Models can be specified in a comma-separated list.
   Models can be displayed by issuing the "showpd -i" command.

  .PARAMETER Devtype
   Specifies that physical disks must have the specified device type
   (FC for Fast Class, NL for Nearline, SSD for Solid State Drive) to
   be used. Device types can be displayed by issuing the "showpd"
   command. If it is not specified, the default device type is FC.

  .PARAMETER Rpm
   Disks must be of the specified speed. Device speeds are shown in the
   RPM column of the showpd command. The number does not represent a
   rotational speed for the drives without spinning media (SSD). It is
   meant as a rough estimation of the performance difference between
   the drive and the other drives in the system. For FC and NL drives,
   the number corresponds to both a performance measure and actual
   rotational speed. For SSD drive, the number is to be treated as
   relative performance benchmark that takes into account in I/O per
   second, bandwidth and the access time.
   Disks that satisfy all of the specified characteristics are used.
   For example -p -fc_gt 60 -fc_lt 230 -nd 2 specifies all the disks that
   have greater than 60 and less than 230 free chunklets and that are
   connected to node 2 through their primary path.

  .PARAMETER Sax
   Specifies that the logical disk, as identified with the <LD_name>
   argument, used for snapshot administration space allocation be removed.
   The <LD_name> argument can be repeated to specify multiple logical disks

  .PARAMETER Sdx
   Specifies that the logical disk, as identified with the <LD_name>
   argument, used for snapshot data space allocation be removed. The
   <LD_name> argument can be repeated to specify multiple logical disks.

  .PARAMETER NewName
   Specifies the name of the Common Provisioning Group (CPG) to be modified to.
   <newname> can be up to 31 characters in length.

  .Notes
    NAME: Set-3parCPG
    LASTEDIT 05-04-2019 15:00:36
    KEYWORDS: Set-3parCPG
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sa,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sd,
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Aw,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sdgs,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sdgl,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sdgw,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$T,

	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Ssz,

	[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Rs,

	[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Ss,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Ha,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Ch,

	[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$P,

	[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Nd,

	[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$St,

	[Parameter(Position=16, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Pt,

	[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Cg,

	[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Mg,

	[Parameter(Position=19, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Pn,

	[Parameter(Position=20, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Dk,

	[Parameter(Position=21, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Tc_gt,

	[Parameter(Position=22, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Tc_lt,

	[Parameter(Position=23, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Fc_gt,

	[Parameter(Position=24, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Fc_lt,

	[Parameter(Position=25, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Devid,

	[Parameter(Position=26, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Devtype,

	[Parameter(Position=27, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Rpm,

	[Parameter(Position=28, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sax,

	[Parameter(Position=29, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Sdx,

	[Parameter(Position=30, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$NewName,

	[Parameter(Position=31, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]
	$CPG_name,

	[Parameter(Position=32, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parCPG - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parCPG since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parCPG since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " setcpg -f"

 if($Sa)
 {
	$Cmd += " -sa $Sa "
 }

 if($Sd)
 {
	$Cmd += " -sd $Sd "
 }

 if($Aw)
 {
	$Cmd += " -aw $Aw "
 }

 if($Sdgs)
 {
	$Cmd += " -sdgs $Sdgs "
 }

 if($Sdgl)
 {
	$Cmd += " -sdgl $Sdgl "
 }

 if($Sdgw)
 {
	$Cmd += " -sdgw $Sdgw "
 }

 if($T)
 {
	$Cmd += " -t $T "
 }

 if($Ssz)
 {
	$Cmd += " -ssz $Ssz "
 }

 if($Rs)
 {
	$Cmd += " -rs $Rs "
 }

 if($Ss)
 {
	$Cmd += " -ss $Ss "
 }

 if($Ha)
 {
	$Cmd += " -ha $Ha "
 }

 if($Ch)
 {
	$Cmd += " -ch $Ch "
 }

 if($P)
 {
	$Cmd += " -p "
 }

 if($Nd)
 {
	$Cmd += " -nd $Nd "
 }

 if($St)
 {
	$Cmd += " -st $St "
 }

 if($Pt)
 {
	$Cmd += " -pt $Pt "
 }

 if($Cg)
 {
	$Cmd += " -cg $Cg "
 }

 if($Mg)
 {
	$Cmd += " -mg $Mg "
 }

 if($Pn)
 {
	$Cmd += " -pn $Pn "
 }

 if($Dk)
 {
	$Cmd += " -dk $Dk "
 }

 if($Tc_gt)
 {
	$Cmd += " -tc_gt $Tc_gt "
 }

 if($Tc_lt)
 {
	$Cmd += " -tc_lt $Tc_lt "
 }

 if($Fc_gt)
 {
	$Cmd += " -fc_gt $Fc_gt "
 }

 if($Fc_lt)
 {
	$Cmd += " -fc_lt $Fc_lt "
 }

 if($Devid)
 {
	$Cmd += " -devid $Devid "
 }

 if($Devtype)
 {
	$Cmd += " -devtype $Devtype "
 }

 if($Rpm)
 {
	$Cmd += " -rpm $Rpm "
 }

 if($Sax)
 {
	$Cmd += " -sax $Sax "
 }

 if($Sdx)
 {
	$Cmd += " -sdx $Sdx "
 }

 if($NewName)
 {
	$Cmd += " -name $NewName "
 }

 if($CPG_name)
 {
	$Cmd += " $CPG_name "
 }
 else
 {
	Return "CPG Name is mandatory please enter..."
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3parCPG Command -->" INFO: 
 
 if ([string]::IsNullOrEmpty($Result))
 {
    Get-3parCPG -Detailed -cpgName $CPG_name
 }
 else
 { 
	Return $Result
 }
} ##  End-of Set-3parCPG

##########################################################################
######################### FUNCTION Optimize-3parPD #######################
##########################################################################
Function Optimize-3parPD()
{
<#
  .SYNOPSIS
   Optimize-3parPD - show physical disks with high service times and optionally perform
   load balancing.

  .DESCRIPTION
   Note : This cmdlet (Optimize-3parPD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Optimize-PD) instead.
  
   The Optimize-3parPD command identifies physical disks with high service times and
   optionally executes load balancing.

  .EXAMPLE
  
  .PARAMETER MaxSvct
	Specifies that either the maximum service time threshold (<msecs>) that
	is used to discover over-utilized physical disks, or the physical disks
	that have the highest maximum service times (highest). If a threshold is
	specified, then any disk whose maximum service time exceeds the
	specified threshold is considered a candidate for load balancing.
 
  .PARAMETER AvgSvct
	Specifies that either the average service time threshold (<msecs>) that
	is used to discover over-utilized physical disks, or the physical disks
	that have the highest average service time (highest). If a threshold is
	specified, any disk whose average service time exceeds the specified
	threshold is considered a candidate for load balancing.

  .PARAMETER Nodes
   Specifies that the display is limited to specified nodes and physical
   disks connected to those nodes. The node list is specified as a series
   of integers separated by commas (e.g. 1,2,3). The list can also consist
   of a single integer. If the node list is not specified, all disks on all
   nodes are displayed.

  .PARAMETER Slots
   Specifies that the display is limited to specified PCI slots and
   physical disks connected to those PCI slots. The slot list is specified
   as a series of integers separated by commas (e.g. 1,2,3). The list can
   also consist of a single integer. If the slot list is not specified, all
   disks on all slots are displayed.

  .PARAMETER Ports
   Specifies that the display is limited to specified ports and
   physical disks connected to those ports. The port list is specified
   as a series of integers separated by commas (e.g. 1,2,3). The list can
   also consist of a single integer. If the port list is not specified, all
   disks on all ports are displayed.

  .PARAMETER VV_Name
   Specifies that the physical disks used by the indicated virtual volume
   name are included for statistic sampling.

  .PARAMETER D
   Specifies the interval, in seconds, that statistics are sampled using an
   integer from 1 through 2147483. If no interval is specified, the option
   defaults to 30 seconds.

  .PARAMETER Iter
   Specifies that I/O statistics are sampled a specified number of times as
   indicated by the number argument using an integer greater than 0. If 0
   is specified, I/O statistics are looped indefinitely. If this option is
   not specified, the command defaults to 1 iteration.

  .PARAMETER Freq
   Specifies the interval, in minutes, that the command enters standby mode
   between iterations using an integer greater than 0. If this option is
   not specified, the number of iterations is looped indefinitely.

  .PARAMETER Vvlayout
   Specifies that the layout of the virtual volume is displayed. If this
   option is not specified, the layout of the virtual volume is not
   displayed.

  .PARAMETER Portstat
   Specifies that statistics for all disk ports in the system are
   displayed. If this option is not specified, statistics for ports are not
   displayed.

  .PARAMETER Pdstat
   Specifies that statistics for all physical disk, rather than only those
   with high service times, are displayed. If this option is not specified,
   statistics for all disks are not displayed.

  .PARAMETER Chstat
   Specifies that chunklet statistics are displayed. If not specified,
   chunklet statistics are not displayed. If this option is used with the

  .PARAMETER Maxpd
   Specifies that only the indicated number of physical disks with high
   service times are displayed. If this option is not specified, 10
   physical disks are displayed.

  .PARAMETER Movech_Auto
   Specifies that if any disks with unbalanced loads are detected that
   chunklets are moved from those disks for load balancing.
   auto
   Specifies that the system chooses source and destination chunklets.
   If not specified, you are prompted for selecting the source and
   destination chunklets.   
   
  .PARAMETER Movech_Manual
   Specifies that if any disks with unbalanced loads are detected that
   chunklets are moved from those disks for load balancing.
   manual
   Specifies that the source and destination chunklets are manually
   entered.

  .Notes
    NAME: Optimize-3parPD
    LASTEDIT 09-04-2019 13:13:44
    KEYWORDS: Optimize-3parPD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Nodes,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Slots,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Ports,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$VV_Name,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$D,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Iter,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Freq,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Vvlayout,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$Portstat,

	[Parameter(Position=9, Mandatory=$false)]
	[switch]
	$Pdstat,

	[Parameter(Position=10, Mandatory=$false)]
	[switch]
	$Chstat,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$Maxpd,

	[Parameter(Position=13, Mandatory=$false)]
	[switch]
	$Movech_Auto,

	[Parameter(Position=14, Mandatory=$false)]
	[switch]
	$Movech_Manual,

	[Parameter(Position=15, Mandatory=$false)]
	[System.String]
	$MaxSvct,

	[Parameter(Position=16, Mandatory=$false)]
	[System.String]
	$AvgSvct,

	[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Optimize-3parPD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Optimize-3parPD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Optimize-3parPD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " tunepd "
 
 if($Nodes)
 {
	$Cmd += " -nodes $Nodes "
 }
 
 if($Slots)
 {
	$Cmd += " -slots $Slots "
 }
 
 if($Ports)
 {
	$Cmd += " -ports $Ports "
 }
 
 if($VV_Name)
 {
	$Cmd += " -vv $VV_Name "
 }
 
 if($D)
 {
	$Cmd += " -d $D "
 }
 
 if($Iter)
 {
	$Cmd += " -iter $Iter "
 }
 
 if($Freq)
 {
	$Cmd += " -freq $Freq "
 }
 
 if($Vvlayout)
 {
	$Cmd += " -vvlayout "
 }
 
 if($Portstat)
 {
	$Cmd += " -portstat"
 }
 
 if($Pdstat)
 {
	$Cmd += " -pdstat"
 }
 
 if($Chstat)
 {
	$Cmd += " -chstat"
 }
 
 if($Maxpd)
 {
	$Cmd += " -maxpd $Maxpd "
 }
 
 if($Movech_Auto)
 {
	$Cmd += " -movech auto "
 }
 
 if($Movech_Manual)
 {
	$Cmd += " -movech manual "
 } 
 
 if($MaxSvct)
 {
	$Cmd += " maxSvct $MaxSvct "
 } 
 elseif($AvgSvct)
 {
	$Cmd += " avgsvct $AvgSvct "
 }
 else
 {
	return	"Please select at list one from [ MaxSvct or AvgSvct]."
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Optimize-3parPD Command -->" INFO: 
 
 Return $Result
} ##  End-of Optimize-3parPD

##########################################################################
#########################  FUNCTION Measure-3parSYS #########################
##########################################################################
Function Measure-3parSYS()
{
<#
  .SYNOPSIS
   Measure-3parSYS - Change the layout of a storage system.

  .DESCRIPTION
   Note : This cmdlet (Measure-3parSYS ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Measure-SYS) instead.
  
   The Measure-3parSYS command is used to analyze and detect poor layout
   and disk utilization across an entire storage system. The
   command runs a series of low level operations to re-balance
   resources on the system.

  .EXAMPLE
   Inter-node tuning options:

  .PARAMETER Cpg
   Limits the scope of a Measure-3parSYS operation to the named CPG(s).
   The specified CPGs must all be in the same domain as the user.
   If this option is specified the intra-node (tunenodech) phase is
   not run. -chunkpct and -tunenodech cannot be used with this
   option.

  .PARAMETER Nodepct
   Controls the detection of utilization imbalances between nodes.
   If any node has a PD devtype where the average utilization is
   more than <percentage> less than the average for that devtype,
   then detailed VV level analysis is performed. VVs which are
   poorly balanced between nodes will have a tune generated to
   correct the imbalance. <percentage> must be between 1 and 100.
   The default value is 3.

  .PARAMETER Spindlepct
   Specifies the percentage difference between node pairs that can
   exist before Measure-3parSYS warns that an imbalance exists. The percentage
   difference calculated between node pairs must be less than
   spindlepct. <percentage> must be between 1 and 200. 200 is the
   least restrictive and would allow the Measure-3parSYS to not warn with
   any difference in the number of PDs, while 1 is the most
   restrictive. 0 cannot be specified as this would always generate
   a warning. The default for <percentage> is 50 (allow for a 50%
   difference).

  .PARAMETER Force
   Bypass top-level inter-node balance checks and force detailed
   analysis of every VV. This option can be used to complete the
   re-balance of a relatively well balanced system where only a few
   volumes are unbalanced.

  .PARAMETER Slth
   Slice threshold. Volumes above this size will be tuned in slices.
   <threshold> must be in multiples of 128GiB. Minimum is 128GiB.
   Default is 2TiB. Maximum is 16TiB.

  .PARAMETER Slsz
   Slice size. Size of slice to use when volume size is greater than
   <threshold>. <size> must be in multiples of 128GiB. Minimum is 128GiB.
   Default is 2TiB. Maximum is 16TiB.
   
   Intra-node tuning options:

  .PARAMETER Chunkpct
   Controls the detection of any imbalance in PD chunklet
   allocation between PDs owned by individual nodes. If a PD has
   utilization of more than <percentage> less than the average for
   that device type, then that disk can potentially be tuned.
   <percentage> must be between 1 and 100. The default value is 10.
   This option cannot be used with the -cpg option.

  .PARAMETER Devtype
   Only tune the specified device type. Applies to the intra-node tune
   phase only and must be used with the -tunenodech option. Multiple
   devtypes can be specified. If -devtype is not used, all devtypes
   will be tuned when -tunenodech is specified.

  .PARAMETER Fulldiskpct
   This option is used in the intra-node tuning phase.
   If a PD has more than <percentage> of its capacity utilized, chunklet
   movement is used to reduce its usage to <percentage> before LD tuning
   is used to complete the rebalance. For example, if a PD is 98% utilized
   and <percentage> is 90, chunklets will be redistributed to other PDs until
   the utilization is less than 90%. If <percentage> is less than the
   devtype average then the calculated average will be used instead.
   <percentage> must be between 1 and 100. The default value is 90.

  .PARAMETER Maxchunk
   Specifies the maximum number of chunklets which can be moved
   from any PD in a single operation. <number> must be between
   1 and 8. The default value is 8.

  .PARAMETER Tunenodech
   Specifies that only intra-node rebalancing should be performed.
   
   LD tuning options:

  .PARAMETER Ss
   Trigger LD re-tuning for any LD where the stepsize value
   does not match the parent CPG.
   
   Cleaning and compacting options:

  .PARAMETER Cleanwait
   Maximum number of minutes to wait for chunklet cleaning after each tune.
   <value> must be between 0 (tunes will be started immediately) and
   720 (12 hours). The default value is 120 (2 hours).

  .PARAMETER Compactmb
   Used in the inter-node and LD tuning phases. Once tunes have moved an
   amount of space greater than <value> the source CPG will be compacted.
   <value> can be between 0 (compact after every tune) and 2TiB. The default
   is 512GiB.
   
   General tuning options:

  .PARAMETER Dr
   Specifies that the command is a dry run and that the system will
   not be tuned. The result of the analysis will be displayed.

  .PARAMETER Maxtasks
   Specifies the maximum number of individual inter-node tune tasks
   which the Measure-3parSYS command can run simultaneously. <number> must
   be between 1 and 8. The default value is 2.

  .PARAMETER Maxnodetasks
   Specifies the maximum number of tunenodech tasks which the Measure-3parSYS
   command can run simultaneously. <number> must be between 1 and 8.
   The default value is 1.

  .PARAMETER Waittask
   Wait for all tasks created by this command to complete before
   returning.

  .Notes
    NAME: Measure-3parSYS
    LASTEDIT 10-04-2019 09:56:54
    KEYWORDS: Measure-3parSYS
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Cpg,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Nodepct,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Spindlepct,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Force,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Slth,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Slsz,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Chunkpct,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Devtype,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Fulldiskpct,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Maxchunk,

	[Parameter(Position=10, Mandatory=$false)]
	[switch]
	$Tunenodech,

	[Parameter(Position=11, Mandatory=$false)]
	[switch]
	$Ss,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$Cleanwait,

	[Parameter(Position=13, Mandatory=$false)]
	[System.String]
	$Compactmb,

	[Parameter(Position=14, Mandatory=$false)]
	[switch]
	$Dr,

	[Parameter(Position=15, Mandatory=$false)]
	[System.String]
	$Maxtasks,

	[Parameter(Position=16, Mandatory=$false)]
	[System.String]
	$Maxnodetasks,

	[Parameter(Position=17, Mandatory=$false)]
	[switch]
	$Waittask,

	[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Measure-3parSYS - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Measure-3parSYS since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Measure-3parSYS since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " tunesys -f "

 if($Cpg)
 {
	$Cmd += " -cpg $Cpg "
 }

 if($Nodepct)
 {
	$Cmd += " -nodepct $Nodepct "
 }

 if($Spindlepct)
 {
	$Cmd += " -spindlepct $Spindlepct "
 }

 if($Force)
 {
	$Cmd += " -force "
 }

 if($Slth)
 {
	$Cmd += " -slth $Slth "
 }

 if($Slsz)
 {
	$Cmd += " -slsz $Slsz "
 }

 if($Chunkpct)
 {
	$Cmd += " -chunkpct $Chunkpct "
 }

 if($Devtype)
 {
	$Cmd += " -devtype $Devtype "
 }

 if($Fulldiskpct)
 {
	$Cmd += " -fulldiskpct $Fulldiskpct "
 }

 if($Maxchunk)
 {
	$Cmd += " -maxchunk $Maxchunk "
 }

 if($Tunenodech)
 {
	$Cmd += " -tunenodech "
 }

 if($Ss)
 {
	$Cmd += " -ss "
 }

 if($Cleanwait)
 {
	$Cmd += " -cleanwait $Cleanwait "
 }

 if($Compactmb)
 {
	$Cmd += " -compactmb $Compactmb "
 }

 if($Dr)
 {
	$Cmd += " -dr "
 }

 if($Maxtasks)
 {
	$Cmd += " -maxtasks $Maxtasks "
 }

 if($Maxnodetasks)
 {
	$Cmd += " -maxnodetasks $Maxnodetasks "
 }

 if($Waittask)
 {
	$Cmd += " -waittask "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Measure-3parSYS Command -->" INFO: 
 
 Return $Result
} ##  End-of Measure-3parSYS

##########################################################################
######################### FUNCTION Measure-3parUpgrade #####################
##########################################################################
Function Measure-3parUpgrade()
{
<#
  .SYNOPSIS
   Measure-3parUpgrade - Determine if a system can do an online upgrade. (HIDDEN)

  .DESCRIPTION   
   This cmdlet (Measure-3parUpgrade) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Measure-Upgrade) instead.
   
   Determine if a system can do an online upgrade.
  
  .PARAMETER Allow_singlepathhost
	Overrides the default behavior of preventing an online upgrade if a host
	is at risk of losing connectivity to the array due to only having a
	single access path to the StoreServ. Use of this option will result in a
	loss of connectivity for the host when the path to the array disconnects
	as the node reboots to the new version. This option should be used with
	extreme caution.

  .PARAMETER Debug
	Display debug level information from check scripts.

  .PARAMETER Extraverbose
	Display test output, even for passing or not applicable scripts.

  .PARAMETER Getpostabortresults
	Displays results of the latest set of postabort scripts.

  .PARAMETER Getresults
	Displays results of the latest set of scripts that have been run (except
	postabort scripts).

  .PARAMETER Getworkarounds
	Displays information about workarounds that apply to an upgrade.

  .PARAMETER Nopatch
	Do not check for any checkupgrade update packages.

  .PARAMETER Offline
	Checks that apply only to online upgrades will be skipped.

  .PARAMETER Phase <phasename>
	Set of scripts to run. phasename can be any one of the following:
	postabort, postcheck, postchecklist, postunpack, preboot, precheck,
	prechecklist, preswitch, preupgrade, preupgradelist

  .PARAMETER Revertnode
	Used to check when reverting nodes as part of aborting an upgrade.

  .PARAMETER Verbose
	Display output from the checkupgrade update package check.

  .Notes
    NAME: Measure-3parUpgrade
    LASTEDIT 15-04-2019 13:25:21
    KEYWORDS: Measure-3parUpgrade
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(

	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Allow_singlepathhost,
	
	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Extraverbose,
	
	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Getpostabortresults,
	
	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Getresults,
	
	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Getworkarounds,
	
	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Nopatch,
	
	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Offline,
	
	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Phase,
	
	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$Revertnode,
	
	[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Measure-3parUpgrade - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
	#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Measure-3parUpgrade since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Measure-3parUpgrade since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }
 
	$Cmd = " checkupgrade "

 if($Allow_singlepathhost)
 {
	$Cmd += " -allow_singlepathhost "
 }
 
 if($Debug)
 {
	$Cmd += " -debug "
 }
 
 if($Extraverbose)
 {
	$Cmd += " -extraverbose "
 }
 
 if($Getpostabortresults)
 {
	$Cmd += " -getpostabortresults "
 }
 
 if($Getresults)
 {
	$Cmd += " -getresults "
 }
 
 if($Getworkarounds)
 {
	$Cmd += " -getworkarounds "
 }
 
 if($Nopatch)
 {
	$Cmd += " -nopatch "
 }
 
 if($Offline)
 {
	$Cmd += " -offline "
 }
 
 if($Phase)
 {
	$Cmd += " -phase $Phase "
 }
 
 if($Revertnode)
 {
	$Cmd += " -revertnode "
 }
 
 if($Verbose)
 {
	$Cmd += " -verbose "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Measure-3parUpgrade Command -->" INFO: 
 
 Return $Result
} ##  End-of Measure-3parUpgrade

##########################################################################
######################### FUNCTION New-3parCert #######################
##########################################################################
Function New-3parCert()
{
<#
  .SYNOPSIS
   New-3parCert - Create self-signed SSL certificate or a certificate signing request (CSR) for the HPE 3PAR Storage System SSL services.

  .DESCRIPTION
   Note : This cmdlet (New-3parCert) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Cert) instead.
  
   The New-3parCert command creates a self-signed certificate or a certificate signing request for a specified service.

  .EXAMPLE
	New-3parCert -SSL_service unified-server -Selfsigned -Keysize 2048 -Days 365
	
  .EXAMPLE
	New-3parCert -SSL_service wsapi -Selfsigned -Keysize 2048 -Days 365
  
  .PARAMETER SSL_service
	Valid service names are cim, cli, ekm-client, ekm-server, ldap,
	syslog-gen-client, syslog-gen-server, syslog-sec-client,
	syslog-sec-server, wsapi, vasa, and unified-server.
  
  .PARAMETER Csr
   Creates a certificate signing request for the service. No certificates
   are modified and no services are restarted.

  .PARAMETER Selfsigned
   Creates a self-signed certificate for the service. The previous
   certificate is removed and the service restarted. The intermediate
   and/or root certificate authorities for a service are not removed.

  .PARAMETER Keysize
   Specifies the encryption key size in bits of the self-signed
   certificate. Valid values are 1024 and 2048. The default value
   is 2048.

  .PARAMETER Days
   Specifies the valid days of the self-signed certificate. Valid
   values are between 1 and 3650 days (10 years). The default
   value is 1095 days (3 years).

  .PARAMETER C
   Specifies the value of country (C) attribute of the subject of
   the certificate.

  .PARAMETER ST
   Specifies the value of state (ST) attribute of the subject of
   the certificate.

  .PARAMETER L
   Specifies the value of locality (L) attribute of the subject of
   the certificate.

  .PARAMETER O
   Specifies the value of organization (O) attribute of the subject
   of the certificate.

  .PARAMETER OU
   Specifies the value of organizational unit (OU) attribute of the
   subject of the certificate.

  .PARAMETER CN
   Specifies the value of common name (CN) attribute of the subject
   of the certificate. Over ssh, -CN must be specified.

  .PARAMETER SAN
   Subject alternative name is a X509 extension that allows other
   pieces of information to be associated with the certificate. Multiple
   SANs may delimited with a comma.

  .Notes
    NAME: New-3parCert
    LASTEDIT 15-04-2019 14:06:43
    KEYWORDS: New-3parCert
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(

	[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
	[System.String]
	$SSL_service,
	
	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Csr,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Selfsigned,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Keysize,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Days,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$C,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$ST,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$L,

	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$O,

	[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$OU,

	[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$CN,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$SAN,
	
	[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In New-3parCert - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting New-3parCert since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting New-3parCert since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " createcert "

 if($SSL_service)
 {
	$Cmd += " $SSL_service "
 }	
	
 if($Csr)
 {
	$Cmd += " -csr -f"
 } 
 Elseif($Selfsigned)
 {
	$Cmd += " -selfsigned -f"
 }
 else
 {
	Return "Select at least one from [Csr | Selfsigned]..."
 }
 
 if($Keysize)
 {
	$Cmd += " -keysize $Keysize "
 } 
 
 if($Days)
 {
	$Cmd += " -days $Days "
 }
 
 if($C)
 {
	$Cmd += " -C $C "
 }
 
 if($ST)
 {
	$Cmd += " -ST $ST "
 }
 
 if($L)
 {
	$Cmd += " -L $L "
 }
 
 if($O)
 {
	$Cmd += " -O $O "
 }
 
 if($OU)
 {
	$Cmd += " -OU $OU "
 }
 
 if($CN)
 {
	$Cmd += " -CN $CN "
 }
 
 if($SAN)
 {
	$Cmd += " -SAN $SAN "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : New-3parCert Command -->" INFO: 
 
 Return $Result
} ##  End-of New-3parCert

##########################################################################
######################### FUNCTION Import-3parCert #######################
##########################################################################
Function Import-3parCert()
{
<#
  .SYNOPSIS
   Import-3parCert - imports a signed certificate and supporting certificate authorities
   (CAs) for the HPE 3PAR Storage System SSL services.

  .DESCRIPTION
   Note : This cmdlet (Import-3parCert) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Import-Cert) instead.
  
   The Import-3parCert command allows a user to import certificates for a given
   service. The user can import a CA bundle containing the intermediate and/or
   root CAs prior to importing the service certificate. The CA bundle can also
   be imported alongside the service certificate.

  .EXAMPLE
	Import-3parCert -SSL_service wsapi -Service_cert  wsapi-service.pem
  
  .PARAMETER SSL_service
	Valid service names are cim, cli, ekm-client, ekm-server, ldap,
	syslog-gen-client, syslog-gen-server, syslog-sec-client,
	syslog-sec-server, wsapi, vasa, and unified-server.

  .PARAMETER CA_bundle
   Allows the import of a CA bundle without importing a service
   certificate. Note the filename "stdin" can be used to paste the
   CA bundle into the CLI.
   
  .PARAMETER Ca
   Allows the import of a CA bundle without importing a service
   certificate. Note the filename "stdin" can be used to paste the
   CA bundle into the CLI.

  .Notes
    NAME: Import-3parCert
    LASTEDIT 15-04-2019 14:31:22
    KEYWORDS: Import-3parCert
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(

	[Parameter(Position=0, Mandatory=$true)]
	[System.String]
	$SSL_service,
	
	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Service_cert, 
	
	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$CA_bundle,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Ca,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Import-3parCert - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Import-3parCert since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Import-3parCert since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " importcert "

 if($SSL_service)
 {
	$Cmd += " $SSL_service -f "
 }
 
 if($Service_cert)
 {
	$Cmd += " $Service_cert "
 }
 
 if($CA_bundle)
 {
	$Cmd += " $CA_bundle "
 }
 
 if($Ca)
 {
	$Cmd += " -ca $Ca "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Import-3parCert Command -->" INFO: 
 Return $Result
} ##  End-of Import-3parCert

##########################################################################
######################### FUNCTION Remove-3parCert #######################
##########################################################################
Function Remove-3parCert()
{
<#
  .SYNOPSIS
   Remove-3parCert - Removes SSL certificates from the HPE 3PAR Storage System.

  .DESCRIPTION
   Note : This cmdlet (Remove-3parCert) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Cert) instead.
  
   The Remove-3parCert command is used to remove certificates that are no longer
   trusted. In most cases it is better to overwrite the offending certificate
   with importcert. The user specifies which service to have its certificates
   removed. The removal can be limited to a specific type.

  .EXAMPLE
	Remove-3parCert -SSL_Service_Name "xyz" -Type "xyz"
	
  .EXAMPLE
	Remove-3parCert -SSL_Service_Name "all" -Type "xyz"

  .PARAMETER SSL_Service_Name
	Valid service names are cim, cli, ekm-client, ekm-server, ldap,
	syslog-gen-client, syslog-gen-server, syslog-sec-client,
	syslog-sec-server, wsapi, vasa, and unified-server.
	The user may also specify all, which will remove certificates for all
	services.
	
  .PARAMETER F
	Skips the prompt warning the user of which certificates will be removed and which services will be restarted.  

  .PARAMETER Type
   Allows the user to limit the removal to a specific type. Note that types
   are cascading. For example, intca will cause the service certificate to
   also be removed.
   Valid types are csr, cert, intca, and rootca.

  .Notes
    NAME: Remove-3parCert
    LASTEDIT 15-04-2019 14:47:23
    KEYWORDS: Remove-3parCert
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$true)]
	[System.String]
	$SSL_Service_Name,
	
	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$F,
	
	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Type,
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parCert - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parCert since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parCert since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " removecert "

 if($SSL_Service_Name)
 {
	$Cmd += " $SSL_Service_Name "
 }

 if($F)
 {
	$Cmd += " -f "
 }
 
 if($Type)
 {
	$Cmd += " -type $Type "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Remove-3parCert Command -->" INFO: 
 
 Return $Result
} ##  End-of Remove-3parCert

##########################################################################
######################### FUNCTION Get-3parCert ##########################
##########################################################################
Function Get-3parCert()
{
<#
  .SYNOPSIS
   Get-3parCert - Show information about SSL certificates of the HPE 3PAR Storage System.

  .DESCRIPTION
   Note : This cmdlet (Get-3parCert) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Cert) instead.
  
   The Get-3parCert command has two forms. The first is a table with a high level
   overview of the certificates used by the SSL Services. This table is
   customizable with the -showcols option. The second form provides detailed
   certificate information in either human readable format or in PEM (Privacy
   Enhanced Mail) format. It can also save the certificates in a specified
   file.

  .EXAMPLE
	Get-3parCert -Service unified-server -Pem
	
  .EXAMPLE
	Get-3parCert -Service unified-server -Text

  .PARAMETER Listcols
   Displays the valid table columns.

  .PARAMETER Showcols
   Changes the columns displayed in the table.

  .PARAMETER Service
   Displays only the certificates used by the service(s).
   Multiple services must be delimited by a comma.
   Valid service names are cim, cli, ekm-client, ekm-server, ldap,
   syslog-gen-client, syslog-gen-server, syslog-sec-client,
   syslog-sec-server, wsapi, vasa, and unified-server.

  .PARAMETER Type
   Displays only certificates of the specified type, e.g.,
   only root CA. Multiple types must be delimited by a comma.
   Valid types are csr, cert, intca, and rootca.

  .PARAMETER Pem
   Displays the certificates in PEM format. When a filename is specified
   the certificates are exported to the file.

  .PARAMETER Text
   Displays the certificates in human readable format. When a filename
   is specified the certificates are exported to the file.

  .PARAMETER File
   Specifies the export file of the -pem or -text option.

  .Notes
    NAME: Get-3parCert
    LASTEDIT 16-04-2019 14:16:46
    KEYWORDS: Get-3parCert
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Listcols,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Showcols,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Service,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Type,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Pem,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Text,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$File,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parCert - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parCert since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parCert since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " showcert "

 if($Listcols)
 {
	$Cmd += " -listcols "
 }
 
 if($Showcols)
 {
	$Cmd += " -showcols $Showcols "
 }
 
 if($Service)
 {
	$Cmd += " -service $Service "
 }
 
 if($Type)
 {
	$Cmd += " -type $Type "
 }
 
 if($Pem)
 {
	$Cmd += " -pem "
 }
 
 if($Text)
 {
	$Cmd += " -text "
 }
 
 if($File)
 {
	$Cmd += " -file $File "
 }
 
 if($Listcols -Or $Pem -Or $Text)
 {
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	Write-DebugLog "Executing Function : Get-3parCert Command -->" INFO: 

	Return $Result
 }
 else
 {
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	Write-DebugLog "Executing Function : Get-3parCert Command -->" INFO: 
	if($Result.count -gt 1)
	{	
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count 

		foreach ($s in  $Result[0..$LastItem] )
		{		
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")	
			$s= [regex]::Replace($s,"-","")
			$s= $s.Trim()			
			$temp1 = $s -replace 'Enddate','Month,Date,Time,Year,Zone'
			$s = $temp1
			
			## added code to replace blanc Enddate 			
			$sTemp1=$s				
			$sTemp = $sTemp1.Split(',')	
			if ([string]::IsNullOrEmpty($sTemp[3]))
			{
				$sTemp[3] = "--,--,--,--,---"
			}				
			$newTemp= [regex]::Replace($sTemp,"^ ","")			
			$newTemp= [regex]::Replace($sTemp," ",",")				
			$newTemp= $newTemp.Trim()
			$s=$newTemp
			
			Add-Content -Path $tempfile -Value $s				
		}
		Import-Csv $tempFile 
		del $tempFile 	
	}
	else
	{
		return  $Result
	}

	if($Result.count -gt 1)
	{
		return  " Success : Executing Get-3parCert"
	}
	else
	{			
		return  $Result
	} 
 }
 
} ##  End-of Get-3parCert

##########################################################################
######################### FUNCTION Get-3parEncryption ####################
##########################################################################
Function Get-3parEncryption()
{
<#
  .SYNOPSIS
   Get-3parEncryption - Show Data Encryption information.

  .DESCRIPTION
   Note : This cmdlet (Get-3parEncryption) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Encryption) instead.
  
   The Get-3parEncryption command shows Data Encryption information.

  .EXAMPLE

  .PARAMETER D
   Provides details on the encryption status.

  .Notes
    NAME: Get-3parEncryption
    LASTEDIT 16-04-2019 14:30:52
    KEYWORDS: Get-3parEncryption
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parEncryption - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parEncryption since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parEncryption since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " showencryption "

 if($D)
 {
	$Cmd += " -d "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parEncryption Command -->" INFO: 

if($Result.count -gt 1)
 {
	$LastItem = 0
	$Fcnt = 0
	
	if($D)
	{
		$Fcnt = 4
		$LastItem = $Result.Count -2
	}
	else
	{
		$LastItem = $Result.Count -0
	}
		
	$tempFile = [IO.Path]::GetTempFileName	
	foreach ($s in  $Result[$Fcnt..$LastItem] )
	{		
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s," +",",")	
		$s= [regex]::Replace($s,"-","")
		$s= $s.Trim() 
		$temp1 = $s -replace 'AdmissionTime','Date,Time,Zone'
		$s = $temp1		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile 	
 }
 
 if($Result.count -gt 1)
 {
	return  " Success : Executing Get-3parEncryption"
 }
 else
 {			
	return  $Result
 } 
 
} ##  End-of Get-3parEncryption

##########################################################################
######################### FUNCTION Optimize-3parLD #######################
##########################################################################
Function Optimize-3parLD()
{
<#
  .SYNOPSIS
   Optimize-3parLD - Change the layout of a logical disk. (HIDDEN)
   
  .DESCRIPTION 
    Note : This cmdlet (Optimize-3parLD) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Optimize-LD) instead.
  
    The Optimize-3parLD command is used to make changes to
    a logical disk (LD) by creating a new LD and moving
    regions from the original LD to the new LD.

    The new LD will always have the same space type (SA, SD,
    USR) as the original LD.

    If the original LD belongs to a CPG, the new LD inherits
    the characteristics of that CPG. SA and SD space LDs have
    growth and allocations blocked so the original LD can be
    completely emptied during the tune.

    If the original LD does not belong to a CPG, a new LD
    will be created, inheriting the characteristics of the
    original LD.

    When a new LD is created it will spread to whatever PDs are
    available as determined by availability and pattern rules.

    The options detailed below can be used to control some
    aspects of the new LD.
	
	
  .EXAMPLE
  
  .PARAMETER LD_name
	Name of the LD to tune.
  
  .PARAMETER Waittask
	Wait for the command to complete before returning.
		  
  .PARAMETER DR
	Specifies that the command is a dry run and that the
	logical disk will not be tuned. The command will return
	any error messages that would be displayed or a
	summary of the actions that would be performed.

  .PARAMETER Shared
	Where possible, share the destination LDs and do not
	create new LDs.

  .PARAMETER Regions 
	Number of regions to move at a time. Range is
	1-1024, default is 1024.

  .PARAMETER Tunesys
	Only to be used when called from tunesys. When present,
	tuneld will update task information in the calling tunesys
	task with progress information. Also, when present tuneld
	will exit the CLI if certain errors occur, otherwise only an
	error will be displayed.

  .PARAMETER Tunenodech
	Only to be used when called from tunenodech. When present
	tuneld will exit the CLI if certain errors occur, otherwise
	only an error will be displayed.

  .PARAMETER Preserved
	Only to be used when source LD is in a preserved state. This option
	will move all good regions from the source LD to a new LD.

  .Notes
    NAME: Optimize-3parLD
    LASTEDIT 17-04-2019 15:01:46
    KEYWORDS: Optimize-3parLD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Waittask,
	
	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$DR,
	
	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Shared,
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Regions,
	
	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Tunesys,
	
	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Tunenodech,
	
	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$Preserved,
	
	[Parameter(Position=7, Mandatory=$true)]
	[System.String]
	$LD_name,
 
	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Optimize-3parLD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Optimize-3parLD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Optimize-3parLD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }
 
	$Cmd = " tuneld -f "

 if($Waittask)
 {
	$Cmd += " -waittask "
 }
 
 if($DR)
 {
	$Cmd += " -dr "
 }
 
 if($Shared)
 {
	$Cmd += " -shared "
 }
 
 if($Regions)
 {
	$Cmd += " -regions $Regions "
 }
 if($Tunesys)
 {
	$Cmd += " -tunesys "
 }
 
 if($Tunenodech)
 {
	$Cmd += " -tunenodech "
 }
 
 if($Preserved)
 {
	$Cmd += " -preserved "
 }
 
 if($LD_name)
 {
	$Cmd += " $LD_name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Optimize-3parLD Command -->" INFO: 
 
 Return $Result
} ##  End-of Optimize-3parLD

##########################################################################
######################### FUNCTION Optimize-3parNodech #######################
##########################################################################
Function Optimize-3parNodech()
{
<#
  .SYNOPSIS
   Tune-3parNodec - Rebalance PD utilization on a node after upgrades. (HIDDEN)
   
  .DESCRIPTION 
    Note : This cmdlet (Optimize-3parNodech) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Optimize-Nodech) instead.
  
    The tunenodech command is used to analyze and detect poor layout
    and disk utilization across PDs with a specified node owner.
    Rebalancing is achieved using a combination of chunklet movement and
    re-laying out LDs associated with the node.

  .EXAMPLE
  
  .PARAMETER Node
	The ID of the node to be tuned. <number> must be in the range 0-7. This parameter must be supplied.
	
  .PARAMETER Chunkpct 
	Controls the detection of underutilized PDs associated with a node.
	The average utilization of all PDs of a devtype is calculated and
	any PD with a utilization of (average - <percentage>) will trigger
	node tuning for that devtype. For example, if the average is 70%
	and <percentage> is 10%, then the threshold will be 60%.
	<percentage> must be between 1 and 100. The default value is 10.
	
  .PARAMETER Maxchunk 
	Controls how many chunklets are moved from each PD per move
	operation. <number> must be between 1 and 8. The default value
	is 8.
		
  .PARAMETER Fulldiskpct 
	If a PD has more than <percentage> of its capacity utilized, chunklet
	movement is used to reduce its usage to <percentage> before LD tuning
	is used to complete the rebalance. e.g. if a PD is 98% utilized and
	<percentage> is 90, chunklets will be redistributed to other PDs until the
	utilization is less than 90%. If <percentage> is less than the devtype
	average then the calculated average will be used instead.
	<percentage> must be between 1 and 100. The default value is 90.
	
  .PARAMETER Devtype 
	Specifies a comma separated list of one or more devtypes to be tuned.
	<devtype> can be one of SSD, FC or NL. Default is all devtypes.
	All named devtypes must be present on the node being tuned.
	
  .PARAMETER DR
	Perform a dry-run analysis of the system and report details on what
	tuning would be performed with the supplied settings.  

  .Notes
    NAME: Optimize-3parNodech
    LASTEDIT 17-04-2019 15:43:54
    KEYWORDS: Optimize-3parNodech
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Node,
	
	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Chunkpct,
	
	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Maxchunk,
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Fulldiskpct,
	
	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	[System.String]
	$Devtype,
	
	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	[switch]
	$DR,
 
	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection	
 )

 Write-DebugLog "Start: In Optimize-3parNodech - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Optimize-3parNodech since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Optimize-3parNodech since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " tunenodech -f "
	
 if($Node)
 {
	$Cmd += " -node $Node "
 }
 
 if($Chunkpct)
 {
	$Cmd += " -chunkpct $Chunkpct "
 }
 
 if($Maxchunk)
 {
	$Cmd += " -maxchunk $Maxchunk "
 }
 
 if($Fulldiskpct)
 {
	$Cmd += " -fulldiskpct $Fulldiskpct "
 }
 
 if($Devtype)
 {
	$Cmd += " -devtype $Devtype "
 }
 
 if($DR)
 {
	$Cmd += " -dr "
 }
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Optimize-3parNodech Command -->" INFO: 
 
 Return $Result
} ##  End-of Optimize-3parNodech

##########################################################################
#########################FUNCTION Get-3parSRrgiodensity#########################
##########################################################################
Function Get-3parSRrgiodensity()
{
<#
  .SYNOPSIS
   Get-3parSRrgiodensit - System reporter region IO density reports.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRrgiodensity) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Srrgiodensity) instead.
  
   The Get-3parSRrgiodensit command shows the distribution of IOP/s intensity
   for Logical Disk (LD) regions for a common provisioning group (CPG) or
   Adaptive Optimization (AO) configuration. For a single CPG, this can be
   used to see whether AO can be effectively used.  For an AO configuration
   the command shows how AO has moved regions between tiers.

  .EXAMPLE

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins is 12 hours ago.
	If -btsecs 0 is specified then the report begins at the earliest sample.
   
   
  .PARAMETER Etsecs
	Select the end time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Cmult
   Select the step between histogram columns of the report.  By default
   each column's IO density is 4 times the previous column, but a step
   of 2 or 8 can also be specified.

  .PARAMETER Cpg
   Treat the specifiers as CPG names or glob-style patterns.

  .PARAMETER Vv
   Limit the analysis to VVs with names that match one or more of
   the specified names or glob-style patterns. VV set names must be
   prefixed by "set:".  Note that snapshot VVs will not be considered
   since only base VVs have region space.

  .PARAMETER Cumul
   Show data as cumulative including all the columns to the right.

  .PARAMETER Pct
   Show data as a percentage per row.

  .PARAMETER Totpct
   Show data as a totaled percentage across an AOCFG.

  .PARAMETER Withvv
   Show the data for each VV.

  .PARAMETER Rw
   Specifies that the display includes separate read and write data. If not
   specified, the total is displayed.

  .Notes
    NAME: Get-3parSRrgiodensity
    LASTEDIT 19-04-2019 11:31:26
    KEYWORDS: Get-3parSRrgiodensity
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false)]
 [System.String]
 $Btsecs,

 [Parameter(Position=1, Mandatory=$false)]
 [System.String]
 $Etsecs,

 [Parameter(Position=2, Mandatory=$false)]
 [System.String]
 $Cmult,

 [Parameter(Position=3, Mandatory=$false)]
 [System.String]
 $Cpg,

 [Parameter(Position=4, Mandatory=$false)]
 [System.String]
 $Vv,

 [Parameter(Position=5, Mandatory=$false)]
 [switch]
 $Cumul,

 [Parameter(Position=6, Mandatory=$false)]
 [switch]
 $Pct,

 [Parameter(Position=7, Mandatory=$false)]
 [switch]
 $Totpct,

 [Parameter(Position=8, Mandatory=$false)]
 [switch]
 $Withvv,

 [Parameter(Position=9, Mandatory=$false)]
 [switch]
 $Rw,

 [Parameter(Position=10, Mandatory=$false)]
 [System.String]
 $Aocfg_name,
 
 [Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRrgiodensity - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRrgiodensity since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRrgiodensity since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srrgiodensity "

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Cmult)
 {
	$Cmd += " -cmult $Cmult "
 }

 if($Cpg)
 {
	$Cmd += " -cpg $Cpg"
 }

 if($Vv)
 {
	$Cmd += " -vv $Vv "
 }

 if($Cumul)
 {
	$Cmd += " -cumul "
 }

 if($Pct)
 {
	$Cmd += " -pct "
 }

 if($Totpct)
 {
	$Cmd += " -totpct "
 }

 if($Withvv)
 {
	$Cmd += " -withvv "
 }

 if($Rw)
 {
	$Cmd += " -rw "
 }
 
 if($Aocfg_name)
 {
	$Cmd += " $Aocfg_name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRrgiodensity Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRrgiodensity

##########################################################################
#########################FUNCTION Get-3parSRStatfsav#########################
##########################################################################
Function Get-3parSRStatfsav()
{
<#
  .SYNOPSIS
   Get-3parSRStatfsav - System reporter performance reports for File Persona anti-virus.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfsav) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfsav) instead.
  
   The Get-3parSRStatfsav command displays historical performance data reports for
   File Persona anti-virus activity.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
		- The absolute epoch time (for example 1351263600).
		- The absolute time as a text string in one of the following formats:
			- Full time string including time zone: "2012-10-26 11:00:00 PDT"
			- Full time string excluding time zone: "2012-10-26 11:00:00"
			- Date string: "2012-10-26" or 2012-10-26
			- Time string: "11:00:00" or 11:00:00
		- A negative number indicating the number of seconds before the
		  current time. Instead of a number representing seconds, <secs> can
		  be specified with a suffix of m, h or d to represent time in minutes
		  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.


  .PARAMETER Etsecs
   Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
		- The absolute epoch time (for example 1351263600).
		- The absolute time as a text string in one of the following formats:
			- Full time string including time zone: "2012-10-26 11:00:00 PDT"
			- Full time string excluding time zone: "2012-10-26 11:00:00"
			- Date string: "2012-10-26" or 2012-10-26
			- Time string: "11:00:00" or 11:00:00
		- A negative number indicating the number of seconds before the
		  current time. Instead of a number representing seconds, <secs> can
		  be specified with a suffix of m, h or d to represent time in minutes
		  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
		from 0 to 100. Multiple percentiles may be specified.
		
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items.  Each <groupby> must be different and
   one of the following:
   NODE      The controller node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   scanengine, maxscanengine, totalscanned, totalinfected,
   totalquarantined

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
   inc
   Sort in increasing order (default).
   dec
   Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Get-3parSRStatfsav
    LASTEDIT 22-04-2019 14:26:59
    KEYWORDS: Get-3parSRStatfsav
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Node,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Sortcol,
	
	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$FPGname,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfsav - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfsav since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfsav since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfsav "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
  $Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }
 
 if($FPGname)
 {
	$Cmd += " $FPGname "
 } 

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfsav Command -->" INFO: 
 Return $Result
} ##  End-of Get-3parSRStatfsav

##########################################################################
#########################FUNCTION Get-3parSRStatfsblock#########################
##########################################################################
Function Get-3parSRStatfsblock()
{
<#
  .SYNOPSIS
   Get-3parSRStatfsblock - System reporter performance reports for File Persona block devices.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfsblock) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfsblock) instead.
  
   The Get-3parSRStatfsblock command displays historical performance data reports for
   File Persona block devices.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
   Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
   Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.
   
  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items.  Each <groupby> must be different and
   one of the following:
   NODE            The controller node
   BLOCKDEV_NAME   The block device name

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   reads, reads_merged, read_sectors, read_time_ms, writes, writes_merged,
   write_sectors, write_time_ms, ios_current, io_time_ms,
   io_time_weighted_ms

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.
   
  .PARAMETER BlockdevName  
	Block Devices matching either the specified name or glob-style pattern
	are included. This specifier can be repeated to display information
	for multiple devices. If not specified, all block devices are included.

  .Notes
    NAME: Get-3parSRStatfsblock
    LASTEDIT 22-04-2019 15:18:25
    KEYWORDS: Get-3parSRStatfsblock
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Node,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$BlockdevName,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfsblock - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfsblock since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfsblock since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfsblock "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($BlockdevName)
 {
	$Cmd += " $Blockdev_name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfsblock Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfsblock

##########################################################################
######################### FUNCTION Get-3parSRStatfscpu ###################
##########################################################################
Function Get-3parSRStatfscpu()
{
<#
  .SYNOPSIS
   Get-3parSRStatfscpu - System reporter performance reports for File Persona CPU usage.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfscpu) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfscpu) instead.
  
   The Get-3parSRStatfscpu command displays historical performance data reports for
   File Persona CPU utilization.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
   Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER Etsecs
   Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
		- The absolute epoch time (for example 1351263600).
		- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
		- A negative number indicating the number of seconds before the
	current time. Instead of a number representing seconds, <secs> can
	be specified with a suffix of m, h or d to represent time in minutes
	(e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
        sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items. Each <groupby> must be different and one of the
   following:
   NODE   The controller node
   CPU    The CPU within the controller node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   usage_pct, iowait_pct, idle_pct

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.
   
  .PARAMETER CpuId
	Only the specified CPU ID numbers are included. This specifier can be
	repeated to display information for multiple CPUs. If not specified, all
	CPUs are included.

  .Notes
    NAME: Get-3parSRStatfscpu
    LASTEDIT 22-04-2019 16:01:55
    KEYWORDS: Get-3parSRStatfscpu
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Node,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$CpuId,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfscpu - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfscpu since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfscpu since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfscpu "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($CpuId)
 {
	$Cmd += " $CpuId "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfscpu Command -->" INFO:
 
 Return $Result
} ##  End-of Get-3parSRStatfscpu

##########################################################################
#########################FUNCTION Get-3parSRStatfsfpg#########################
##########################################################################
Function Get-3parSRStatfsfpg()
{
<#
  .SYNOPSIS
   Get-3parSRStatfsfpg - System reporter performance reports for File Persona FPGs.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfsfpg) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfsfpg) instead.
  
   The Get-3parSRStatfsfpg command displays historical performance data reports for
   File Persona file provisioning groups.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
   Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER Etsecs
   Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
	   
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items. Each <groupby> must be different and one of the
   following:
   FPG_NAME  File Provisioning Group name
   FPG_ID    File Provisioning Group ID
   NODE      The controller node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   Totalblocks, Freeblocks, Numreads, Numbytesread, Numwrites,
   NumBytesWritten, Creates, Removes, Errors, ReadLatency,
   WriteLatency

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.
   
  .PARAMETER FpgName
	File provisioning groups matching either the specified name or
	glob-style pattern are included. This specifier can be repeated to
	display information for multiple FPGs. If not specified, all FPGs
	are included.


  .Notes
    NAME: Get-3parSRStatfsfpg
    LASTEDIT 22-04-2019 16:09:52
    KEYWORDS: Get-3parSRStatfsfpg
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Node,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$FpgName,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfsfpg - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfsfpg since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfsfpg since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfsfpg "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($FpgName)
 {
	$Cmd += " $FpgName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfsfpg Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfsfpg

##########################################################################
#########################FUNCTION Get-3parSRStatfsmem#########################
##########################################################################
Function Get-3parSRStatfsmem()
{
<#
  .SYNOPSIS
   srstatfsmem - System reporter performance reports for File Persona memory usage

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfsmem) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfsmem) instead.
  
   The srstatfsmem command displays historical performance data reports for
   File Persona memory utilization.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
		- The absolute epoch time (for example 1351263600).
		- The absolute time as a text string in one of the following formats:
			- Full time string including time zone: "2012-10-26 11:00:00 PDT"
			- Full time string excluding time zone: "2012-10-26 11:00:00"
			- Date string: "2012-10-26" or 2012-10-26
			- Time string: "11:00:00" or 11:00:00
		- A negative number indicating the number of seconds before the
	current time. Instead of a number representing seconds, <secs> can
	be specified with a suffix of m, h or d to represent time in minutes
	(e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.
		
  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
	   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of <groupby> items. Each
   <groupby> must be different and one of the following:
   NODE   The controller node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   usage_pct, swap_pct, free_pct

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Get-3parSRStatfsmem
    LASTEDIT 23-04-2019 10:37:44
    KEYWORDS: Get-3parSRStatfsmem
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false)]
 [switch]
 $Attime,

 [Parameter(Position=1, Mandatory=$false)]
 [System.String]
 $Btsecs,

 [Parameter(Position=2, Mandatory=$false)]
 [System.String]
 $Etsecs,

 [Parameter(Position=3, Mandatory=$false)]
 [switch]
 $Hires,

 [Parameter(Position=4, Mandatory=$false)]
 [switch]
 $Hourly,

 [Parameter(Position=5, Mandatory=$false)]
 [switch]
 $Daily,

 [Parameter(Position=6, Mandatory=$false)]
 [System.String]
 $Summary,

 [Parameter(Position=7, Mandatory=$false)]
 [System.String]
 $Groupby,

 [Parameter(Position=8, Mandatory=$false)]
 [System.String]
 $Compareby,

 [Parameter(Position=9, Mandatory=$false)]
 [System.String]
 $Node,

 [Parameter(Position=10, Mandatory=$false)]
 [System.String]
 $Sortcol,

 [Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfsmem - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfsmem since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfsmem since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfsmem "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfsmem Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfsmem

##########################################################################
#########################FUNCTION Get-3parSRStatfsnet#########################
##########################################################################
Function Get-3parSRStatfsnet()
{
<#
  .SYNOPSIS
   Get-3parSRStatfsnet - System reporter performance reports for File Persona networking.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfsnet) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfsnet) instead.
  
   The Get-3parSRStatfsnet command displays historical performance data reports for
   File Persona networking devices.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
		
  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
	   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of <groupby> items. Each
   <groupby> must be different and one of the following:
   NODE      The controller node
   DEV_NAME  Ethernet interface name

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   rx_bytes, rx_packets, tx_bytes, tx_packets

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .PARAMETER EthdevName
	Ethernet interface devices matching either the specified name or
	glob-style pattern are included. This specifier can be repeated to
	display information for multiple devices. If not specified, all devices
	are included.

  .Notes
    NAME: Get-3parSRStatfsnet
    LASTEDIT 23-04-2019 10:44:14
    KEYWORDS: Get-3parSRStatfsnet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false)]
 [switch]
 $Attime,

 [Parameter(Position=1, Mandatory=$false)]
 [System.String]
 $Btsecs,

 [Parameter(Position=2, Mandatory=$false)]
 [System.String]
 $Etsecs,

 [Parameter(Position=3, Mandatory=$false)]
 [switch]
 $Hires,

 [Parameter(Position=4, Mandatory=$false)]
 [switch]
 $Hourly,

 [Parameter(Position=5, Mandatory=$false)]
 [switch]
 $Daily,

 [Parameter(Position=6, Mandatory=$false)]
 [System.String]
 $Summary,

 [Parameter(Position=7, Mandatory=$false)]
 [System.String]
 $Groupby,

 [Parameter(Position=8, Mandatory=$false)]
 [System.String]
 $Compareby,

 [Parameter(Position=9, Mandatory=$false)]
 [System.String]
 $Node,

 [Parameter(Position=10, Mandatory=$false)]
 [System.String]
 $Sortcol,

 [Parameter(Position=11, Mandatory=$false)]
 [System.String]
 $EthdevName,

 [Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfsnet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfsnet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfsnet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfsnet "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($EthdevName)
 {
	$Cmd += " $EthdevName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfsnet Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfsnet

##########################################################################
######################### FUNCTION Get-3parSRStatfsnfs ###################
##########################################################################
Function Get-3parSRStatfsnfs()
{
<#
  .SYNOPSIS
   Get-3parSRStatfsnfs - System reporter performance reports for File Persona NFS shares.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfsnfs) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfsnfs) instead.
  
   The Get-3parSRStatfsnfs command displays historical performance data reports for
   File Persona NFS shares.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
   
  .PARAMETER Etsecs
   Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
	   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
	   
   Other keywords which modify the summary display or computation:
   
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of <groupby> items. Each
   <groupby> must be different and one of the following:
   NODE   The controller node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   Client_RPC_calls, Client_RPC_retrans, Server_RPC_calls, Server_RPC_badcalls,
   V3_Null, V3_GetAttr, V3_SetAttr, V3_lookup, V3_access, V3_ReadLink, V3_Read,
   V3_Write, V3_Create, V3_MkDir, V3_Symlink, V3_Mknod, V3_Remove, V3_RmDir,
   V3_Rename, V3_Link, V3_ReadDir, V3_ReadDirPlus, V3_FsStat, V3_FsInfo,
   V3_PathConf, V3_Commit, V4_op0_unused, V4_op1_unused, V4_op2_future,
   V4_access, V4_close, V4_commit, V4_create, V4_delegpurge, V4_delegreturn,
   V4_getattr, V4_getfh, V4_link, V4_lock, V4_lockt, V4_locku, V4_lookup,
   V4_lookup_root, V4_nverify, V4_open, V4_openattr, V4_open_conf, V4_open_dgrd,
   V4_putfh, V4_putpubfh, V4_putrootfh, V4_Read, V4_reddir, V4_readlink, V4_remove,
   V4_rename, V4_renew, V4_restorefh, V4_savefh, V4_secinfo, V4_setattr, V4_setcltid,
   V4_setcltidconf, V4_verify, V4_Write, V4_rellockowner, V4_bc_ctl, V4_bind_conn,
   V4_exchange_id, V4_create_ses, V4_destroy_ses, V4_free_stateid, V4_getdirdeleg,
   V4_getdevinfo, V4_getdevlist, V4_layoutcommit, V4_layoutget, V4_layoutreturn,
   V4_secinfononam, V4_sequence, V4_set_ssv, V4_test_stateid, V4_want_deleg,
   V4_destroy_clid, V4_reclaim_comp

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
		
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Get-3parSRStatfsnfs
    LASTEDIT 23-04-2019 12:04:34
    KEYWORDS: Get-3parSRStatfsnfs
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false)]
 [switch]
 $Attime,

 [Parameter(Position=1, Mandatory=$false)]
 [System.String]
 $Btsecs,

 [Parameter(Position=2, Mandatory=$false)]
 [System.String]
 $Etsecs,

 [Parameter(Position=3, Mandatory=$false)]
 [switch]
 $Hires,

 [Parameter(Position=4, Mandatory=$false)]
 [switch]
 $Hourly,

 [Parameter(Position=5, Mandatory=$false)]
 [switch]
 $Daily,

 [Parameter(Position=6, Mandatory=$false)]
 [System.String]
 $Summary,

 [Parameter(Position=7, Mandatory=$false)]
 [System.String]
 $Groupby,

 [Parameter(Position=8, Mandatory=$false)]
 [System.String]
 $Compareby,

 [Parameter(Position=9, Mandatory=$false)]
 [System.String]
 $Node,

 [Parameter(Position=10, Mandatory=$false)]
 [System.String]
 $Sortcol,

 [Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfsnfs - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfsnfs since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfsnfs since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfsnfs "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfsnfs Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfsnfs

##########################################################################
#########################FUNCTION Get-3parSRStatfssmb#########################
##########################################################################
Function Get-3parSRStatfssmb()
{
<#
  .SYNOPSIS
   Get-3parSRStatfssmb - System reporter performance reports for File Persona SMB shares.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfssmb) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfssmb) instead.
  
   The Get-3parSRStatfssmb command displays historical performance data reports for
   File Persona SMB shares.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of <groupby> items. Each
   <groupby> must be different and one of the following:
   NODE   Statistics per node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   connections, maxConnections, sessions, maxSessions, treeConnects,
   maxTreeConnects, openFiles, maxOpenFiles, ReadSumRecorded,
   ReadSampleRecorded, WriteSumRecorded, WriteSampleRecorded

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
		
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Get-3parSRStatfssmb
    LASTEDIT 23-04-2019 12:08:57
    KEYWORDS: Get-3parSRStatfssmb
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 [Parameter(Position=0, Mandatory=$false)]
 [switch]
 $Attime,

 [Parameter(Position=1, Mandatory=$false)]
 [System.String]
 $Btsecs,

 [Parameter(Position=2, Mandatory=$false)]
 [System.String]
 $Etsecs,

 [Parameter(Position=3, Mandatory=$false)]
 [switch]
 $Hires,

 [Parameter(Position=4, Mandatory=$false)]
 [switch]
 $Hourly,

 [Parameter(Position=5, Mandatory=$false)]
 [switch]
 $Daily,

 [Parameter(Position=6, Mandatory=$false)]
 [System.String]
 $Summary,

 [Parameter(Position=7, Mandatory=$false)]
 [System.String]
 $Groupby,

 [Parameter(Position=8, Mandatory=$false)]
 [System.String]
 $Compareby,

 [Parameter(Position=9, Mandatory=$false)]
 [System.String]
 $Sortcol,

 [Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfssmb - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfssmb since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfssmb since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfssmb "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfssmb Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfssmb

##########################################################################
######################### FUNCTION Get-3parSRStatfssnapshot ##############
##########################################################################
Function Get-3parSRStatfssnapshot()
{
<#
  .SYNOPSIS
   Get-3parSRStatfssnapshot - System reporter performance reports for File Persona snapshots

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatfssnapshot) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatfssnapshot) instead.
  
   The Get-3parSRStatfssnapshot command displays historical performance data reports
   for File Persona snapshots.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
	   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of <groupby> items. Each
   <groupby> must be different and one of the following:
   NODE   The controller node

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   numredirectonwrite

  .PARAMETER Node
   Limit the data to that corresponding to one of the specified nodes.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
		
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Get-3parSRStatfssnapshot
    LASTEDIT 23-04-2019 12:14:35
    KEYWORDS: Get-3parSRStatfssnapshot
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Node,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatfssnapshot - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatfssnapshot since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatfssnapshot since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatfssnapshot "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatfssnapshot Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatfssnapshot

##########################################################################
######################### FUNCTION Get-3parSRStatlink ####################
##########################################################################
Function Get-3parSRStatlink()
{
<#
  .SYNOPSIS
   Get-3parSRStatlink - System reporter performance reports for links.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatlink) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatlink) instead.
  
   The Get-3parSRStatlink command displays historical performance data reports for
   links (internode, PCI and cache memory).

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
	
  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items.  Each <groupby> must be different and
   one of the following:
   NODE      The source controller node for the link
   QUEUE     The XCB queue
   NODE_TO   The destination controller node for the link
   ASIC_FROM The source ASIC for the link
   ASIC_TO   The destination ASIC for the link

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   xfers_ps, kbps, szkb

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
		
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .PARAMETER Node
	Only the specified node numbers are included, where each node is a
	number from 0 through 7. This specifier can be repeated to display
	information for multiple nodes. If not specified, all nodes are
	included.
   
  .Notes
    NAME: Get-3parSRStatlink
    LASTEDIT 23-04-2019 12:19:53
    KEYWORDS: Get-3parSRStatlink
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Node,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatlink - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatlink since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatlink since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatlink "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($Node)
 {
	$Cmd += " $Node "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatlink Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatlink

##########################################################################
######################### FUNCTION Get-3parSRStatqos #####################
##########################################################################
Function Get-3parSRStatqos()
{
<#
  .SYNOPSIS
   Get-3parSRStatqos - System reporter performance reports for QoS rules.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatqos) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatqos) instead.
  
   The Get-3parSRStatqos command displays historical performance data reports for
   QoS rules.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.
   
  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Vvset
   Limit the data to VVSets with names that match one or more of the
   specified names or glob-style patterns.
   This option is deprecated and will be removed in a subsequent release.

  .PARAMETER AllOthers
   Display statistics for all other I/O not regulated by a QoS rule.
   This option is deprecated and will be removed in a subsequent release.

  .PARAMETER Target
   Limit the data to the specified QoS target rule(s).
   Include a target type either {vvset|domain}, and a name or
   glob-style pattern.
   The sys:all_others rule can be selected to display
   statistics for all other host I/O not regulated by any "on" QoS rule.
   Multiple targets types can be specified as a comma separated list.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items.  Each <groupby> must be different and
   one of the following:
   DOM_NAME        Domain name
   TARGET_TYPE     Type of QoS rule target, i.e. vvset
   TARGET_NAME     Name of QoS rule target
   IOPS_LIMIT      The I/O per second limit
   BW_LIMIT_KBPS   The KB per second bandwidth limit

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   read_iops, write_iops, total_iops, read_kbps, write_kbps,
   total_kbps, read_svctms, write_svctms, total_svctms,
   read_ioszkb, write_ioszkb, total_ioszkb, total_qlen, busy_pct
   read_wait_ms, write_wait_ms, total_wait_ms, total_wqlen,
   total_io_rej, io_limit, bw_limit, priority, io_guarantee,
   bw_guarantee, latency_target_ms, latency_ms

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
		
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Get-3parSRStatqos
    LASTEDIT 23-04-2019 12:25:35
    KEYWORDS: Get-3parSRStatqos
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Vvset,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$AllOthers,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Target,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=13, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatqos - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatqos since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatqos since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatqos "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Vvset)
 {
	$Cmd += " -vvset $Vvset "
 }

 if($AllOthers)
 {
	$Cmd += " -all_others "
 }

 if($Target)
 {
	$Cmd += " -target $Target "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatqos Command -->" INFO:
 
 Return $Result
} ##  End-of Get-3parSRStatqos

##########################################################################
######################### FUNCTION Get-3parSRStatrcvv ####################
##########################################################################
Function Get-3parSRStatrcvv()
{
<#
  .SYNOPSIS
    Get-3parSRStatrcvv - System reporter performance reports for Remote Copy volumes.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSRStatrcvv) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SRStatrcvv) instead.
  
   The  Get-3parSRStatrcvv command displays historical performance data reports for
   Remote Copy volumes.

  .EXAMPLE

  .PARAMETER Attime
   Performance is shown at a particular time interval, specified by the
   etsecs option, with one row per object group described by the
   groupby option. Without this option performance is shown versus time,
   with a row per time interval.

  .PARAMETER Btsecs
	Select the begin time in seconds for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the time at which the report begins depends
	on the sample category (-hires, -hourly, -daily):
		- For hires, the default begin time is 12 hours ago (-btsecs -12h).
		- For hourly, the default begin time is 7 days ago (-btsecs -7d).
		- For daily, the default begin time is 90 days ago (-btsecs -90d).
	If begin time and sample category are not specified then the time
	the report begins is 12 hours ago and the default sample category is hires.
	If -btsecs 0 is specified then the report begins at the earliest sample.

  .PARAMETER Etsecs
	Select the end time in seconds for the report.  If -attime is specified, select the time for the report.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the report ends with the most recent
	sample.

  .PARAMETER Hires
   Select high resolution samples (5 minute intervals) for the report.
   This is the default.

  .PARAMETER Hourly
   Select hourly samples for the report.

  .PARAMETER Daily
   Select daily samples for the report.

  .PARAMETER Summary
   Summarize performance across requested objects and time range.
   One of these 4 summary keywords must be included:
	   min   Display the minimum for each metric
	   avg   Display the average for each metric
	   max   Display the maximum for each metric
	   <N>%  Display percentile for each metric. <N> may be any number
	   from 0 to 100. Multiple percentiles may be specified.
   Other keywords which modify the summary display or computation:
   detail
	   Display individual performance records in addition to one
	   or more summaries. By default, -summary output excludes
	   individual records and only displays the summary.
   per_time
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   time. By default, one summary is computed across all records.
   per_group
	   When requesting data across multiple points in time (vstime)
	   and multiple object groupings (-groupby) compute summaries per
	   object grouping. By default, one summary is computed across all
	   records.
   only_compareby
	   When requesting data limited to certain object groupings with
	   the -compareby option, use this keyword to compute summaries
	   using only that reduced set of object groupings. By default,
	   summaries are computed from all records and ignore the
	   limitation of the -compareby option, though the "detail"
	   output does conform to the -compareby object limitation.

  .PARAMETER Groupby
   For -attime reports, generate a separate row for each combination of
   <groupby> items.  Each <groupby> must be different and
   one of the following:
   VV_NAME      The name of a volume admitted to a Remote Copy volume group with admitrcopyvv
   DOM_NAME     The domain name for a Remote Copy group when group was created with creatercopygroup
   TARGET_NAME  The target name of the Remote Copy target created with creatercopytarget
   TARGET_MODE  The target mode - Per: Periodic, Sync: Synchronous or Async: Asynchronous
   GROUP_NAME   The name of the Remote Copy group created with creatercopygroup
   GROUP_ROLE   The role (primary=1 or secondary=0) of the Remote Copy group
   PORT_TYPE    The port type (IP or FC) of the Remote Copy link(s) created with creatercopytarget
   PORT_N       The node number for the port used by a Remote Copy link
   PORT_S       The PCI slot number for the port used by a Remote Copy link
   PORT_P       The port number for the port used by a Remote Copy link
   VVSET_NAME   The virtual volume set name

  .PARAMETER Compareby
   The compareby option limits output records to only certain objects,
   compared by a specified field.  Either the top or bottom X objects
   can be displayed, up to 32 objects for vstime reports or 128 objects
   for attime reports.  The field used for comparison can be any of the
   groupby fields or one of the following:
   lcl_read_iops, lcl_write_iops, lcl_total_iops, lcl_read_kbps, lcl_write_kbps, lcl_total_kbps,
   lcl_read_svctms, lcl_write_svctms, lcl_total_svctms, lcl_read_ioszkb, lcl_write_ioszkb,
   lcl_total_ioszkb, lcl_busy_pct, lcl_total_qlen, rmt_read_iops, rmt_write_iops, rmt_total_iops,
   rmt_read_kbps, rmt_write_kbps, rmt_total_kbps, rmt_read_ioszkb, rmt_write_ioszkb,
   rmt_total_ioszkb, rmt_busy_pct, rmt_total_qlen, rpo_timeInt

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
		
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .PARAMETER Vv
   Limit the data to VVs with names that match one or more of the
   specified names or glob-style patterns. VV set name must be prefixed
   by "set:" and can also include patterns.

  .PARAMETER Target
   Limit the data to TARGET_NAMEs that match one or more of the specified
   TARGET_NAMEs or glob-style patterns.

  .PARAMETER Mode
   Limit the data to TARGET_MODEs of the specified mode. Allowed modes are:
	   Per      - Periodic
	   Sync     - Synchronous
	   Async    - Asynchronous

  .PARAMETER Group
   Limit the data to GROUP_NAMEs that match one or more of the specified
   GROUP_NAMEs or glob-style patterns.

  .Notes
    NAME: Get-3parSRStatrcvv
    LASTEDIT 23-04-2019 12:32:42
    KEYWORDS: Get-3parSRStatrcvv
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Attime,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hires,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Hourly,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Daily,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Summary,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Groupby,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Compareby,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Vv,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$Target,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$Mode,

	[Parameter(Position=13, Mandatory=$false)]
	[System.String]
	$Group,

	[Parameter(Position=14, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSRStatrcvv - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSRStatrcvv since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSRStatrcvv since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " srstatrcvv "

 if($Attime)
 {
	$Cmd += " -attime "
 }

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Hires)
 {
	$Cmd += " -hires "
 }

 if($Hourly)
 {
	$Cmd += " -hourly "
 }

 if($Daily)
 {
	$Cmd += " -daily "
 }

 if($Summary)
 {
	$Cmd += " -summary $Summary "
 }

 if($Groupby)
 {
	$Cmd += " -groupby $Groupby "
 }

 if($Compareby)
 {
	$Cmd += " -compareby $Compareby "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($Vv)
 {
	$Cmd += " -vv $Vv "
 }

 if($Target)
 {
	$Cmd += " -target $Target "
 }

 if($Mode)
 {
	$Cmd += " -mode $Mode "
 }

 if($Group)
 {
	$Cmd += " -group $Group "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parSRStatrcvv Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSRStatrcvv

##########################################################################
######################### FUNCTION Resize-3parVV ########################
##########################################################################
Function Resize-3parVV()
{
<#
  .SYNOPSIS
   Resize-3parVV - Consolidate space in virtual volumes (VVs). (HIDDEN)

   .DESCRIPTION      
    This cmdlet (Resize-3parVV) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Resize-Vv) instead.
    Consolidate space in virtual volumes (VVs).
   
  .EXAMPLE
	Resize-3parVV -VVName testv
	
  .PARAMETER VVName
	Specifies the name of the VV.
  
  .PARAMETER PAT
	Compacts VVs that match any of the specified patterns. This option must be used if the pattern specifier is used.

  .Notes
    NAME: Resize-3parVV
    LASTEDIT 09-05-2019 09:48:37
    KEYWORDS: Resize-3parVV
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
	param(
	[Parameter(Position=0, Mandatory=$true)]
	[System.String]
	$VVName,
	
	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$PAT,
	
	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Resize-3parVV - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Resize-3parVV since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Resize-3parVV since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }
 
	$Cmd = " compactvv -f "

 if($PAT)
 {
	$Cmd += " -pat "
 }
 
 if($VVName)
 {
	$Cmd += " $VVName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Resize-3parVV Command -->" INFO: 
 
 Return $Result
 
} ##  End-of Resize-3parVV

##########################################################################
######################### FUNCTION New-3parMaint #########################
##########################################################################
Function New-3parMaint()
{
<#
  .SYNOPSIS
   New-3parMaint - Create a maintenance window record.

  .DESCRIPTION
   Note : This cmdlet (New-3parMaint) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-Maint) instead.
  
   The New-3parMaint command creates a maintenance window record with the
   specified options and maintenance type.

  .EXAMPLE
	New-3parMaint -Duration 1m -MaintType Node

  .PARAMETER Comment
   Specifies any comment or additional information for the maintenance
   window record. The comment can be up to 255 characters long. Unprintable
   characters are not allowed.

  .PARAMETER Duration
   Sets the duration of the maintenance window record. May be specified in
   minutes (e.g. 20m) or hours (e.g. 6h). Value is not to exceed
   24 hours. The default is 4 hours.
   
  .PARAMETER MaintType
	Specify the maintenance type.
	Maintenance type can be Other, Node, Restart, Disk, Cage, Cabling, Upgrade, DiskFirmware, or CageFirmware.

  .Notes
    NAME: New-3parMaint
    LASTEDIT 10-05-2019 11:09:08
    KEYWORDS: New-3parMaint
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Comment,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Duration,

	[Parameter(Position=2, Mandatory=$true)]
	[System.String]
	$MaintType,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In New-3parMaint - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting New-3parMaint since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting New-3parMaint since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " createmaint -f "

 if($Comment)
 {
	$Cmd += " -comment $Comment "
 }

 if($Duration)
 {
	$Cmd += " -duration $Duration "
 }

 if($MaintType)
 {
  $Cmd += " $MaintType "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : New-3parMaint command -->" INFO: 
 
 Return $Result
} ##  End-of New-3parMaint

##########################################################################
######################### FUNCTION Set-3parServiceCage ###################
##########################################################################
Function Set-3parServiceCage()
{
<#
  .SYNOPSIS
   Set-3parServiceCage - Service a cage.

  .DESCRIPTION
   Note : This cmdlet (Set-3parServiceCage) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-ServiceCage) instead.
  
   The Set-3parServiceCage command is necessary when executing removal and replacement
   actions for a drive cage interface card or power cooling module. The
   start subcommand is used to initiate service on a cage, and the end
   subcommand is used to indicate that service is completed.

  .EXAMPLE

  .PARAMETER Start
	Specifies the start of service on a cage.
		
  .PARAMETER End
	Specifies the end of service on a cage.
		
  .PARAMETER Reset
	Initiates a soft reset of the interface card for DCN5, DCS11, and DCS12 drive cages.
		
  .PARAMETER Hreset
	Initiates a hard reset of the interface card for DCN5, DCS11, and DCS12 drive cages.
		
  .PARAMETER Remove
	Removes the indicated drive cage (indicated with the <cagename>
	specifier) from the system. This subcommand fails when the cage has
	active ports or is in use.
  
  .PARAMETER Pcm
	For DCS11 and DCS12, this specifies that the Power Cooling Module (PCM)
	will be serviced. For DCN5, this specifies the Power Cooling Battery
	Module (PCBM) will be serviced.

  .PARAMETER Iom
	Specifies that the I/O module will be serviced. This option is not
	valid for DCN5 cage.
	
  .PARAMETER Zero
	For subcommands reset and hreset, this specifies the interface card
	number of the cage to be reset. For subcommands start and end, this
	specifies the number of the module indicated by -pcm or -iom to be
	serviced.
		
  .PARAMETER One
	For subcommands reset and hreset, this specifies the interface card
	number of the cage to be reset. For subcommands start and end, this
	specifies the number of the module indicated by -pcm or -iom to be
	serviced.

	
  .PARAMETER CageName
	Specifies the name of the cage to be serviced.

  .Notes
    NAME: Set-3parServiceCage
    LASTEDIT 10-05-2019 16:05:21
    KEYWORDS: Set-3parServiceCage
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
 
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Start,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$End,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Reset,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Hreset,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Remove,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Pcm,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Iom,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Zero,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$One,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$CageName,

	[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parServiceCage - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parServiceCage since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parServiceCage since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " servicecage "

 if($Start)
 {
	$Cmd += " start "
	
	if($Iom)
	{
		$Cmd += " -iom "
	}
	elseif($Pcm)
	{
		$Cmd += " -pcm "
	}
	else
	{
		Return "Select at least one from [ Iom | Pcm]..."
	}
	
	if($Zero)
	{
		$Cmd += " 0 "
	}
	elseif($One)
	{
		$Cmd += " 1 "
	}
	else
	{
		Return "Select at least one from [ Zero | One]..."
	}
 }
 elseif($End)
 {
	$Cmd += " end "
	
	if($Iom)
	{
		$Cmd += " -iom "
	}
	elseif($Pcm)
	{
		$Cmd += " -pcm "
	}
	else
	{
		Return "Select at least one from [ Iom | Pcm]..."
	}
	
	if($Zero)
	{
		$Cmd += " 0 "
	}
	elseif($One)
	{
		$Cmd += " 1 "
	}
	else
	{
		Return "Select at least one from [ Zero | One]..."
	}
 }
 elseif($Reset)
 {
	$Cmd += " reset -f "
	if($Zero)
	{
		$Cmd += " 0 "
	}
	elseif($One)
	{
		$Cmd += " 1 "
	}
	else
	{
		Return "Select at least one from [ Zero | One]..."
	}
 }
 elseif($Hreset)
 {
	$Cmd += " hreset -f "
	if($Zero)
	{
		$Cmd += " 0 "
	}
	elseif($One)
	{
		$Cmd += " 1 "
	}
	else
	{
		Return "Select at least one from [ Zero | One]..."
	}
 }
 elseif($Remove)
 {
	$Cmd += " remove -f "	
 }
 else
 {
	Return "Select at least one from [ Start | End | Reset | Hreset | Remove]..."
 }
  
 if($CageName)
 {
	$Cmd += " $CageName "
 }
 else
 {
	Return "Cage Name is Mandatory..."
 }
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3parServiceCage Command -->" INFO: 
 Return $Result
} ##  End-of Set-3parServiceCage

##########################################################################
######################### FUNCTION Search-3parServiceNode ################
##########################################################################
Function Search-3parServiceNode()
{
<#
  .SYNOPSIS
   Search-3parServiceNode - Prepare a node for service.

  .DESCRIPTION
   Note : This cmdlet (Search-3parServiceNode ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Search-ServiceNode) instead.
  
   The Search-3parServiceNode command informs the system that a certain component will
   be replaced, and will cause the system to indicate the physical location
   of that component.

  .EXAMPLE

  .PARAMETER Start
	Specifies the start of service on a node. If shutting down the node
	is required to start the service, the command will prompt for
	confirmation before proceeding further.

  .PARAMETER Status
	Displays the state of any active servicenode operations.
	
  .PARAMETER End
	Specifies the end of service on a node. If the node was previously
	halted for the service, this command will boot the node.
  
  .PARAMETER Ps
   Specifies which power supply will be placed into servicing-mode.
   Accepted values for <psid> are 0 and 1. For HPE 3PAR 600 series
   systems, this option is not supported, use servicecage for servicing
   the Power Cooling Battery Module (PCBM).

  .PARAMETER Pci
   Only the service LED corresponding to the PCI card in the specified
   slot will be illuminated. Accepted values for <slot> are 3 through 5
   for HPE 3PAR 600 series systems.

  .PARAMETER Fan
   Specifies which node fan will be placed into servicing-mode.
   For HPE 3PAR 600 series systems, this option is not supported,
   use servicecage for servicing the Power Cooling Battery Module (PCBM).

  .PARAMETER Bat
   Specifies that the node's battery backup unit will be placed into
   servicing-mode. For HPE 3PAR 600 series systems, this option is not
   supported, use servicecage for servicing the Power Cooling Battery
   Module (PCBM).
   
  .PARAMETER NodeId  
	Indicates which node the servicenode operation will act on. Accepted
	values are 0 through 3 for HPE 3PAR 600 series systems.

  .Notes
    NAME: Search-3parServiceNode
    LASTEDIT 13-05-2019 11:28:12
    KEYWORDS: Search-3parServiceNode
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Start,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Status,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$End,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Ps,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Pci,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Fan,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Bat,

	[Parameter(Position=7, Mandatory=$true)]
	[System.String]
	$NodeId,

	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Search-3parServiceNode - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Search-3parServiceNode since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Search-3parServiceNode since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " servicenode "

 if($Start)
 {
	$Cmd += " start "
 }
 elseif($Status)
 {
	$Cmd += " status "
 }
 elseif($End)
 {
	$Cmd += " end "
 }
 else
 {
	Return "Select at least one from [Start | Status | End]..."
 } 
 
 if($Ps)
 {
	$Cmd += " -ps $Ps "
 }

 if($Pci)
 {
	$Cmd += " -pci $Pci "
 }

 if($Fan)
 {
	$Cmd += " -fan $Fan "
 }

 if($Bat)
 {
	$Cmd += " -bat "
 }

 if($NodeId)
 {
	$Cmd += " $NodeId "
 }
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Search-3parServiceNode Command -->" INFO: 
 
 Return $Result
} ##  End-of Search-3parServiceNode

##########################################################################
######################### FUNCTION Set-3parMaint #########################
##########################################################################
Function Set-3parMaint()
{
<#
  .SYNOPSIS
   Set-3parMaint - Modify a maintenance window record with the specified options for
   the maintenance type.

  .DESCRIPTION
   Note : This cmdlet (Set-3parMaint) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Maint) instead.
  
   Allows modification of the Maintenance window record with the specified
   options for the maintenance type.

  .EXAMPLE

  .PARAMETER Comment
   Specifies any comment or additional information for the maintenance
   window record. The comment can be up to 255 characters long. Unprintable
   characters are not allowed.

  .PARAMETER Duration
   Extends the duration of the maintenance window record by the specified
   time. May be specified in minutes (e.g. 20m) or hours (e.g. 6h). If
   unspecified, the window duration is unchanged. This option cannot be
   specified with the -end option.

  .PARAMETER End
   Ends the window record for the specified maintenance type. If the
   maintenance window record has been created more than once with
   "createmaint", this option reduces its reference count by 1 without
   ending the window record. This option cannot be specified with the
   Duration Option.
   
  .PARAMETER MaintType
	The maintenance type for the maintenance window record to be modified.
	Maintenance type can be Other, Node, Restart, Disk, Cage, Cabling,
	Upgrade, DiskFirmware, CageFirmware, or all. "all" can only be
	specified with option -end, which ends all maintenance window records,
	regardless of their reference counts.

  .Notes
    NAME: Set-3parMaint
    LASTEDIT 13-05-2019 11:52:45
    KEYWORDS: Set-3parMaint
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Comment,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Duration,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$End,

	[Parameter(Position=3, Mandatory=$true)]
	[System.String]
	$MaintType,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parMaint - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parMaint since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parMaint since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setmaint "

 if($Comment)
 {
	$Cmd += " -comment $Comment "
 }

 if($Duration)
 {
	$Cmd += " -duration $Duration "
 }

 if($End)
 {
	$Cmd += " -end "
 }

 if($MaintType)
 {
	$Cmd += " $MaintType "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Set-3parMaint Command -->" INFO:
 
 Return $Result
} ##  End-of Set-3parMaint

##########################################################################
######################### FUNCTION Get-3parInventory #####################
##########################################################################
Function Get-3parInventory()
{
<#
  .SYNOPSIS
   Get-3parInventory - show hardware inventory

  .DESCRIPTION
   Note : This cmdlet (Get-3parInventory ) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Inventory) instead.
  
   Shows information about all the hardware components in the system.

  .EXAMPLE

  .PARAMETER Svc
   Displays inventory information with HPE serial number, spare part number,
   and so on. It is not supported on HPE 3PAR 10000 systems.

  .Notes
    NAME: Get-3parInventory
    LASTEDIT 13-05-2019 14:11:12
    KEYWORDS: Get-3parInventory
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Svc,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parInventory - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parInventory since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parInventory since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showinventory "

 if($Svc)
 {
	$Cmd += " -svc "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parInventory Command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parInventory

##########################################################################
######################### FUNCTION Get-3parMaint #########################
##########################################################################
Function Get-3parMaint()
{
<#
  .SYNOPSIS
   Get-3parMaint - Show maintenance window records.

  .DESCRIPTION
   Note : This cmdlet (Get-3parMaint) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Maint) instead.
  
   The Get-3parMaint command displays maintenance window records.

  .EXAMPLE
	Get-3parMaint
	
  .EXAMPLE
	Get-3parMaint -All 

  .PARAMETER All
   Display all maintenance window records, including active and expired
   ones. If this option is not specified, only active window records will
   be displayed.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
	   Sort in increasing order (default).
	   dec
	   Sort in decreasing order.

  .Notes
    NAME: Get-3parMaint
    LASTEDIT 14-05-2019 13:35:08
    KEYWORDS: Get-3parMaint
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false)]
	 [switch]
	 $All,

	 [Parameter(Position=1, Mandatory=$false)]
	 [System.String]
	 $Sortcol,

	 [Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parMaint - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parMaint since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parMaint since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showmaint "

 if($All)
 {
	$Cmd += " -all "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parMaint Command -->" INFO: 

 if($Result.count -gt 1)
 {	
	$Cnt = $Result.count
		
 	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count -2  
	
	foreach ($s in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")		
		$s= [regex]::Replace($s,"-","")		
		$s= $s.Trim()	
		
		$temp1 = $s -replace 'StartTime','S-Date,S-Time,S-Zone'
		$temp2 = $temp1 -replace 'EndTime','E-Date,E-Time,E-Zone'
		$s = $temp2
				
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 
 if($Result.count -gt 1)
 {
	return  " Success : Executing Get-3parMaint"
 }
 else
 {			
	return  $Result
 }
 
} ##  End-of Get-3parMaint

##########################################################################
######################### FUNCTION Get-3parNode ##########################
##########################################################################
Function Get-3parNode()
{
<#
  .SYNOPSIS
	Get-3parNode - Show node and its component information.

  .DESCRIPTION
    Note : This cmdlet (Get-3parNode) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Node) instead.
  
	The Get-3parNode command displays an overview of the node-specific properties
	and its component information. Various command options can be used to
	display the properties of PCI cards, CPUs, Physical Memory, IDE drives,
	and Power Supplies.

  .EXAMPLE
   The following options are for node summary and inventory information:

  .PARAMETER Listcols
	List the columns available to be shown with the -showcols option
	described below (see 'clihelp -col Get-3parNode' for help on each column).
	By default (if none of the information selection options below are
	specified) the following columns are shown:
	Node Name State Master InCluster LED Control_Mem Data_Mem Available_Cache
	To display columns pertaining to a specific node component use
	the -Listcols option in conjunction with one of the following
	options: -pci, -cpu, -mem, -drive, -fan, -ps, -mcu, -uptime.

  .PARAMETER Showcols
	Explicitly select the columns to be shown using a comma-separated list
	of column names.  For this option, the full column names are shown in
	the header.
	Run 'shownode -listcols' to list Node component columns.
	Run 'shownode -listcols <node_component>' to list columns associated
	with a specific <node_component>.

	<node_component> can be one of the following options: -pci, -cpu, -mem,
	-drive, -fan, -ps, -mcu, -uptime.

	If a specific node component option is not provided, then -showcols expects
	Node columns as input.

	If a column (Node or specific node component) does not match either the Node
	columns list or a specific node component columns list, then
	'shownode -showcols <cols>' request is denied.

	If an invalid column is provided with -showcols, the request is denied.

	The -showcols option can also be used in conjunction with a list of node IDs.

	Run 'clihelp -col shownode' for a description of each column.

  .PARAMETER I
	Shows node inventory information in table format.

  .PARAMETER D
	Shows node and its component information in table format.

	The following options are for node component information. These options
	cannot be used together with options, -i and -d:

  .PARAMETER Verbose_D
	Displays detailed information in verbose format. It can be used together
	with the following component options.

  .PARAMETER Fan
	Displays the node fan information.

  .PARAMETER Pci
	Displays PCI card information

  .PARAMETER Cpu
	Displays CPU information

  .PARAMETER Mem
	Displays physical memory information.

  .PARAMETER Drive
	Displays the disk drive information.

  .PARAMETER Ps
	Displays power supply information.

  .PARAMETER Mcu
	Displays MicroController Unit information.

  .PARAMETER State
	Displays the detailed state information for node or power supply (-ps).
	This is the same as -s.

  .PARAMETER S_State
	Displays the detailed state information for node or power supply (-ps).
	This option is deprecated and will be removed in a subsequent release.

  .PARAMETER Uptime
	Show the amount of time each node has been running since the last shutdown.

  .PARAMETER Svc
	Displays inventory information with HPE serial number, spare part etc.
	This option must be used with -i option and it is not supported on
	HPE 3PAR 10000 systems
   
  .PARAMETER NodeID
	Displays the node information for the specified node ID(s). This
	specifier is not required. Node_ID is an integer from 0 through 7.

  .Notes
    NAME: Get-3parNode
    LASTEDIT 16-05-2019 09:47:37
    KEYWORDS: Get-3parNode
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Listcols,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Showcols,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$I,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Verbose_D,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Fan,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Pci,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Cpu,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$Mem,

	[Parameter(Position=9, Mandatory=$false)]
	[switch]
	$Drive,

	[Parameter(Position=10, Mandatory=$false)]
	[switch]
	$Ps,

	[Parameter(Position=11, Mandatory=$false)]
	[switch]
	$Mcu,

	[Parameter(Position=12, Mandatory=$false)]
	[switch]
	$State,

	[Parameter(Position=13, Mandatory=$false)]
	[switch]
	$S_State,

	[Parameter(Position=14, Mandatory=$false)]
	[switch]
	$Uptime,

	[Parameter(Position=15, Mandatory=$false)]
	[switch]
	$Svc,	

	[Parameter(Position=16, Mandatory=$false)]
	[System.String]
	$NodeID,

	[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parNode - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parNode since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parNode since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " shownode "

 if($Listcols)
 {
	$Cmd += " -listcols "
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	return $Result
 }

 if($Showcols)
 {
	$Cmd += " -showcols $Showcols "
 }

 if($I)
 {
	$Cmd += " -i "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Verbose_D)
 {
	$Cmd += " -verbose "
 }

 if($Fan)
 {
	$Cmd += " -fan "
 }

 if($Pci)
 {
	$Cmd += " -pci "
 }

 if($Cpu)
 {
	$Cmd += " -cpu "
 }

 if($Mem)
 {
	$Cmd += " -mem "
 }

 if($Drive)
 {
	$Cmd += " -drive "
 }

 if($Ps)
 {
	$Cmd += " -ps "
 }

 if($Mcu)
 {
	$Cmd += " -mcu "
 }

 if($State)
 {
	$Cmd += " -state "
 }

 if($S_State)
 {
	$Cmd += " -s "
 }

 if($Uptime)
 {
	$Cmd += " -uptime "
 }

 if($Svc)
 {
	$Cmd += " -svc "
 }

 if($NodeID)
 {
  $Cmd += " $NodeID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing Function : Get-3parNode Command -->" INFO: 
 
 if($Result.count -gt 1)
 {	
	$Cnt = $Result.count
		
 	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count -1  
	$incre = "True"
	foreach ($s in  $Result[1..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")		
		$s= [regex]::Replace($s,"-","")		
		$s= $s.Trim()		
		
		## Replace Mem(MB) with Control and data Mem(MB) 			
		if($incre -eq "True")
		{			
			$sTemp1=$s				
			$sTemp = $sTemp1.Split(',')							
			$sTemp[6] = "Control-Mem(MB)"
			$sTemp[7] = "Data-Mem(MB)"
			$newTemp= [regex]::Replace($sTemp,"^ ","")			
			$newTemp= [regex]::Replace($sTemp," ",",")				
			$newTemp= $newTemp.Trim()
			$s=$newTemp
		}
				
		Add-Content -Path $tempfile -Value $s
		$incre = "False"		
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 
 if($Result.count -gt 1)
 {
	return  " Success : Executing Get-3parNode"
 }
 else
 {			
	return  $Result
 }
} ##  End-of Get-3parNode

##########################################################################
######################### FUNCTION Get-3parTarget ########################
##########################################################################
Function Get-3parTarget()
{
<#
  .SYNOPSIS
   Get-3parTarget - Show information about unrecognized targets.

  .DESCRIPTION
   Note : This cmdlet (Get-3parTarget) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-Target) instead.
  
   The Get-3parTarget command displays information about unrecognized targets.
   
  .EXAMPLE
	Get-3parTarget  
	
  .EXAMPLE 
	Get-3parTarget -Lun -Node_WWN 2FF70002AC00001F
	
  .EXAMPLE 
	Get-3parTarget -Lun -All
	
  .EXAMPLE 	
	Get-3parTarget -Inq -Page 0 -LUN_WWN  50002AC00001001F
	
  .EXAMPLE 
	Get-3parTarget -Inq -Page 0 -D -LUN_WWN  50002AC00001001F
	
  .EXAMPLE 	
	Get-3parTarget -Mode -Page 0x3 -D -LUN_WWN  50002AC00001001F 

  .PARAMETER Lun
   Displays the exported Logical Unit Numbers (LUNs) from the unknown
   targets. Use the "all" specifier to display the exported LUNs from all
   of the unknown targets.

  .PARAMETER Inq
   Display SCSI inquiry page information.

  .PARAMETER Mode
   Display SCSI mode page information.

  .PARAMETER Page
   Specify the SCSI page number for the inquiry and mode information.
   <num> is a hex number. For SCSI inquiry information, the valid <num>
   is 0, 80, 83, and c0. For SCSI mode information, the valid <num> is 3
   and 4. This option needs to be used together with -inq or -mode. If
   this option is not specified, the default <num> is 0.

  .PARAMETER D
   Display the detail information of SCSI inquiry or mode page information.

  .PARAMETER Force
   Specifies that the rescan is forced. If this option is not used,
   the rescan will be suppressed if the peer ports have already
   been rescanned within the last 10 seconds.

  .PARAMETER Rescan
   Rescan the peer ports to find the unknown targets.

  .Notes
    NAME: Get-3parTarget
    LASTEDIT 21-05-2019 10:42:31
    KEYWORDS: Get-3parTarget
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false)]
	 [switch]
	 $Lun,

	 [Parameter(Position=1, Mandatory=$false)]
	 [switch]
	 $Inq,

	 [Parameter(Position=2, Mandatory=$false)]
	 [switch]
	 $Mode,

	 [Parameter(Position=3, Mandatory=$false)]
	 [System.String]
	 $Page,

	 [Parameter(Position=4, Mandatory=$false)]
	 [switch]
	 $D,

	 [Parameter(Position=5, Mandatory=$false)]
	 [switch]
	 $Force,

	 [Parameter(Position=6, Mandatory=$false)]
	 [switch]
	 $Rescan,

	 [Parameter(Position=7, Mandatory=$false)]
	 [System.String]
	 $Node_WWN,

	 [Parameter(Position=8, Mandatory=$false)]
	 [System.String]
	 $LUN_WWN,
	 
	 [Parameter(Position=9, Mandatory=$false)]
	 [switch]
	 $All,

	 [Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parTarget - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parTarget since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parTarget since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showtarget "
	
 if($Lun)
 {
	$Cmd += " -lun "
 } 
 if($All)
 {
	$Cmd += " all "
 }
 if($Inq)
 {
	$Cmd += " -inq "
 }
 if($Mode)
 {
	$Cmd += " -mode "
 } 
 if($Page)
 {
	$Cmd += " -page $Page "
 } 
 if($D)
 {
	$Cmd += " -d "
 }
 if($Force)
 {
	$Cmd += " -force "
 }
 if($Rescan)
 {
	$Cmd += " -rescan "
 }
 
 if($Node_WWN)
 {
	$Cmd += " $Node_WWN "
 }

 if($LUN_WWN)
 {
	$Cmd += " $LUN_WWN "
 }

 write-host "$Cmd"
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Get-3parTarget command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parTarget

##########################################################################
######################### FUNCTION Start-3parNodeRescue ##################
##########################################################################
Function Start-3parNodeRescue()
{
<#
  .SYNOPSIS
   Start-3parNodeRescue - Starts a node rescue.

  .DESCRIPTION
   Note : This cmdlet (Start-3parNodeRescue) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-NodeRescue) instead.
  
   Initiates a node rescue, which initializes the internal node disk of the
   specified node to match the contents of the other node disks. Progress is
   reported as a task.

  .EXAMPLE
	Start-3parNodeRescue -Node 0
  
  .PARAMETER Node
	Specifies the node to be rescued.  This node must be physically present in the system and powered on, but not part of the cluster.

  .Notes
    NAME: Start-3parNodeRescue
    LASTEDIT 21-05-2019 14:17:15
    KEYWORDS: Start-3parNodeRescue
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$True)]
	 [System.String]
	 $Node,

	 [Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Start-3parNodeRescue - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Start-3parNodeRescue since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Start-3parNodeRescue since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " startnoderescue "

 if($Node)
 {
	$Cmd += " -node $Node "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Start-3parNodeRescue command -->" INFO:
 
 Return $Result
} ##  End-of Start-3parNodeRescue

##########################################################################
######################### FUNCTION Reset-3parCage ######################
##########################################################################
Function Reset-3parCage()
{
<#
  .SYNOPSIS
   Reset-3parCage - Upgrade firmware for the specified cage.

  .DESCRIPTION
   Note : This cmdlet (Reset-3parCage) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-Cage) instead.
  
   The Reset-3parCage command downloads new firmware into the specified cage.

  .EXAMPLE

  .PARAMETER A
   All drive cages are upgraded one at a time.

  .PARAMETER Parallel
   All drive cages are upgraded in parallel by interface card domain.
   If -wait is specified, the command will not return until the upgrades
   are completed. Otherwise, the command returns immediately and completion
   of the upgrade can be monitored with the -status option.

  .PARAMETER Status
   Print status of the current Reset-3parCage operation in progress or the last
   executed Reset-3parCage operation. If any cagenames are specified, result
   is filtered to only display those cages.

  .Notes
    NAME: Reset-3parCage
    LASTEDIT 21-05-2019 14:42:03
    KEYWORDS: Reset-3parCage
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false)]
	 [switch]
	 $A,

	 [Parameter(Position=1, Mandatory=$false)]
	 [switch]
	 $Parallel,
	 
	 [Parameter(Position=2, Mandatory=$false)]
	 [switch]
	 $Wait,
	 
	 [Parameter(Position=3, Mandatory=$false)]
	 [switch]
	 $Status,

	 [Parameter(Position=4, Mandatory=$false)]
	 [System.String]
	 $Cagename,

	 [Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Reset-3parCage - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Reset-3parCage since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Reset-3parCage since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " upgradecage "
 
 if($A)
 {
	$Cmd += " -a "
 }
 
 if($Parallel)
 {
	$Cmd += " -parallel "
	 if($Wait)
	 {
		$Cmd += " -wait "
	 }
 }
 if($Status)
 {
	$Cmd += " -status "
 }
 if($Cagename)
 {
	$Cmd += " $Cagename "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Reset-3parCage command -->" INFO:
 if($Status)
 {
	 if($Result.count -gt 1)
	 {			
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count   
		
		foreach ($s in  $Result[1..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s," +",",")			
			#$s= [regex]::Replace($s,"-","")			
			$s= $s.Trim()			
			
			$temp1 = $s -replace 'StartTime','S-Date,S-Time,S-Zone'
			$temp2 = $temp1 -replace 'StopTime','E-Date,E-Time,E-Zone'
			$s = $temp2					
			Add-Content -Path $tempfile -Value $s				
		}
		Import-Csv $tempFile 
		del $tempFile	
	 }
	 else
	 {			
		Return  $Result
	 }
 }
 else
 {
	Return $Result
 }
 
} ##  End-of Reset-3parCage

##########################################################################
######################### FUNCTION New-3parAOConfiguration ###############
##########################################################################
Function New-3parAOConfiguration()
{
<#
  .SYNOPSIS
   New-3parAOConfiguration - Create an Adaptive Optimization configuration.

  .DESCRIPTION
   Note : This cmdlet (New-3parAOConfiguration) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (New-AOConfiguration) 
  
   The New-3parAOConfiguration command creates an Adaptive Optimization configuration.

  .EXAMPLE

  .PARAMETER T0cpg
   Specifies the Tier 0 CPG for this AO config.

  .PARAMETER T1cpg
   Specifies the Tier 1 CPG for this AO config.

  .PARAMETER T2cpg
   Specifies the Tier 2 CPG for this AO config.

  .PARAMETER Mode
   Specifies the optimization bias for the AO config and can
   be one of the following:
	   Performance: Move more regions towards higher performance tier.
	   Balanced:    Balanced between higher performance and lower cost.
	   Cost:        Move more regions towards lower cost tier.
   The default is Balanced.

  .PARAMETER T0min
	Specifies the minimum space utilization of the tier CPG for AO to
	maintain when optimizing regions between tiers. The size can be
	specified in MB (default) or GB (using g or G) or TB (using t or T).
	Setting a minimum to 0 (default) indicates that no minimum space
	utilization will be enforced.

  .PARAMETER T1min
	Specifies the minimum space utilization of the tier CPG for AO to
	maintain when optimizing regions between tiers. The size can be
	specified in MB (default) or GB (using g or G) or TB (using t or T).
	Setting a minimum to 0 (default) indicates that no minimum space
	utilization will be enforced.

  .PARAMETER T2min
	Specifies the minimum space utilization of the tier CPG for AO to
	maintain when optimizing regions between tiers. The size can be
	specified in MB (default) or GB (using g or G) or TB (using t or T).
	Setting a minimum to 0 (default) indicates that no minimum space
	utilization will be enforced.

  .PARAMETER T0max
  	Specifies the maximum space utilization of the tier CPG. AO will
	move regions into and out of the CPG based on their relative access
	rate history, but will not exceed this maximum size in the CPG.
	The size can be specified in MB (default) or GB (using g or G) or
	TB (using t or T). Setting a max to 0 (default) indicates that AO will
	use other indicators to decide the maximum CPG space utilization:
	either the CPG sdgl, sdgw, or maximum possible growth size.


  .PARAMETER T1max
  	Specifies the maximum space utilization of the tier CPG. AO will
	move regions into and out of the CPG based on their relative access
	rate history, but will not exceed this maximum size in the CPG.
	The size can be specified in MB (default) or GB (using g or G) or
	TB (using t or T). Setting a max to 0 (default) indicates that AO will
	use other indicators to decide the maximum CPG space utilization:
	either the CPG sdgl, sdgw, or maximum possible growth size.


  .PARAMETER T2max
	Specifies the maximum space utilization of the tier CPG. AO will
	move regions into and out of the CPG based on their relative access
	rate history, but will not exceed this maximum size in the CPG.
	The size can be specified in MB (default) or GB (using g or G) or
	TB (using t or T). Setting a max to 0 (default) indicates that AO will
	use other indicators to decide the maximum CPG space utilization:
	either the CPG sdgl, sdgw, or maximum possible growth size.

	
  .PARAMETER AOConfigurationName
	 Specifies an AO configuration name up to 31 characters in length.
	
  .Notes
    NAME: New-3parAOConfiguration
    LASTEDIT 29-05-2019 11:03:58
    KEYWORDS: New-3parAOConfiguration
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$T0cpg,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$T1cpg,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$T2cpg,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Mode,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$T0min,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$T1min,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$T2min,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$T0max,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$T1max,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$T2max,

	[Parameter(Position=10, Mandatory=$True)]
	[System.String]
	$AOConfigurationName,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In New-3parAOConfiguration - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting New-3parAOConfiguration since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting New-3parAOConfiguration since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " createaocfg "

 if($T0cpg)
 {
	$Cmd += " -t0cpg $T0cpg "
 }

 if($T1cpg)
 {
	$Cmd += " -t1cpg $T1cpg "
 }

 if($T2cpg)
 {
	$Cmd += " -t2cpg $T2cpg "
 }

 if($Mode)
 {
  $Cmd += " -mode $Mode "
 }

 if($T0min)
 {
	$Cmd += " -t0min $T0min "
 }

 if($T1min)
 {
	$Cmd += " -t1min $T1min "
 }

 if($T2min)
 {
	$Cmd += " -t2min $T2min "
 }

 if($T0max)
 {
	$Cmd += " -t0max $T0max "
 }

 if($T1max)
 {
	$Cmd += " -t1max $T1max "
 }

 if($T2max)
 {
	$Cmd += " -t2max $T2max "
 }

 if($AOConfigurationName)
 {
	$Cmd += " $AOConfigurationName "
 }
 

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : New-3parAOConfiguration command -->" INFO: 
 Return $Result
} ##  End-of New-3parAOConfiguration

##########################################################################
######################### FUNCTION Remove-3parAOConfiguration ############
##########################################################################
Function Remove-3parAOConfiguration()
{
<#
  .SYNOPSIS
   Remove-3parAOConfiguration - Remove an Adaptive Optimization configuration.

  .DESCRIPTION
   Note : This cmdlet (Remove-3parAOConfiguration) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-AOConfiguration) instead.
   
   The Remove-3parAOConfiguration command removes specified Adaptive Optimization
   configurations from the system.

  .EXAMPLE

  .PARAMETER Pattern
   Specifies that specified patterns are treated as glob-style patterns and
   that all AO configurations matching the specified pattern are removed.
  
  .PARAMETER AOConfigurationName
   Specifies the name of the AO configuration to be removed
   
  .Notes
    NAME: Remove-3parAOConfiguration
    LASTEDIT 29-05-2019 11:14:25
    KEYWORDS: Remove-3parAOConfiguration
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Pattern,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$AOConfigurationName,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parAOConfiguration - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parAOConfiguration since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parAOConfiguration since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " removeaocfg -f "

 if($Pattern)
 {
	$Cmd += " -pat $Pattern "
	if($AOConfigurationName)
	{
		Return "Either Pattern or AOConfigurationName."
	}
 }

 if($AOConfigurationName)
 {
	$Cmd += " $AOConfigurationName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Remove-3parAOConfiguration command -->" INFO: 
 
 Return $Result
} ##  End-of Remove-3parAOConfiguration

##########################################################################
######################### FUNCTION Update-3parAOConfiguration ############
##########################################################################
Function Update-3parAOConfiguration()
{
<#
  .SYNOPSIS
   Update-3parAOConfiguration - Update an Adaptive Optimization configuration.

  .DESCRIPTION
   Note : This cmdlet (Update-3parAOConfiguration) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-AOConfiguration) instead.
   
   Update-3parAOConfiguration - Update an Adaptive Optimization configuration.

  .EXAMPLE

  .PARAMETER T0cpg
   Specifies the Tier 0 CPG for this AO config.

  .PARAMETER T1cpg
   Specifies the Tier 1 CPG for this AO config.

  .PARAMETER T2cpg
   Specifies the Tier 2 CPG for this AO config.

  .PARAMETER Mode
   Specifies the optimization bias for the AO config and can
   be one of the following:
	   Performance: Move more regions towards higher performance tier.
	   Balanced:    Balanced between higher performance and lower cost.
	   Cost:        Move more regions towards lower cost tier.

  .PARAMETER T0min
   Specifies the minimum space utilization of the tier CPG for AO to
   maintain when optimizing regions between tiers. The size can be
   specified in MB (default) or GB (using g or G) or TB (using t or T).
   Setting a minimum to 0 (default) indicates that no minimum space
   utilization will be enforced.

  .PARAMETER T1min
   Specifies the minimum space utilization of the tier CPG for AO to
   maintain when optimizing regions between tiers. The size can be
   specified in MB (default) or GB (using g or G) or TB (using t or T).
   Setting a minimum to 0 (default) indicates that no minimum space
   utilization will be enforced.

  .PARAMETER T2min
   Specifies the minimum space utilization of the tier CPG for AO to
   maintain when optimizing regions between tiers. The size can be
   specified in MB (default) or GB (using g or G) or TB (using t or T).
   Setting a minimum to 0 (default) indicates that no minimum space
   utilization will be enforced.

  .PARAMETER T0max
   Specifies the maximum space utilization of the tier CPG. AO will
   move regions into and out of the CPG based on their relative access
   rate history, but will not exceed this maximum size in the CPG.
   The size can be specified in MB (default) or GB (using g or G) or
   TB (using t or T). Setting a max to 0 (default) indicates that AO will
   use other indicators to decide the maximum CPG space utilization:
   either the CPG sdgl, sdgw, or maximum possible growth size.

  .PARAMETER T1max
   Specifies the maximum space utilization of the tier CPG. AO will
   move regions into and out of the CPG based on their relative access
   rate history, but will not exceed this maximum size in the CPG.
   The size can be specified in MB (default) or GB (using g or G) or
   TB (using t or T). Setting a max to 0 (default) indicates that AO will
   use other indicators to decide the maximum CPG space utilization:
   either the CPG sdgl, sdgw, or maximum possible growth size.

  .PARAMETER T2max
   Specifies the maximum space utilization of the tier CPG. AO will
   move regions into and out of the CPG based on their relative access
   rate history, but will not exceed this maximum size in the CPG.
   The size can be specified in MB (default) or GB (using g or G) or
   TB (using t or T). Setting a max to 0 (default) indicates that AO will
   use other indicators to decide the maximum CPG space utilization:
   either the CPG sdgl, sdgw, or maximum possible growth size.

  .PARAMETER NewName
   Specifies a new name for the AO configuration of up to 31 characters in
   length.

  .PARAMETER AOConfigurationName
   
  .Notes
    NAME: Update-3parAOConfiguration
    LASTEDIT 29-05-2019 11:28:32
    KEYWORDS: Update-3parAOConfiguration
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$T0cpg,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$T1cpg,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$T2cpg,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Mode,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$T0min,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$T1min,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$T2min,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$T0max,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$T1max,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$T2max,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$NewName,
	
	[Parameter(Position=11, Mandatory=$True)]
	[System.String]
	$AOConfigurationName,

	[Parameter(Position=12, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parAOConfiguration. - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parAOConfiguration. since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parAOConfiguration. since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setaocfg "

 if($T0cpg)
 {
	$Cmd += " -t0cpg $T0cpg "
 }

 if($T1cpg)
 {
	$Cmd += " -t1cpg $T1cpg "
 }

 if($T2cpg)
 {
	$Cmd += " -t2cpg $T2cpg "
 }

 if($Mode)
 {
	$Cmd += " -mode $Mode "
 }

 if($T0min)
 {
	$Cmd += " -t0min $T0min "
 }

 if($T1min)
 {
	$Cmd += " -t1min $T1min "
 }

 if($T2min)
 {
	$Cmd += " -t2min $T2min "
 }

 if($T0max)
 {
	$Cmd += " -t0max $T0max "
 }

 if($T1max)
 {
	$Cmd += " -t1max $T1max "
 }

 if($T2max)
 {
	$Cmd += " -t2max $T2max "
 }

 if($NewName)
 {
	$Cmd += " -name $NewName "
 }
 
 if($AOConfigurationName)
 {
	$Cmd += " $AOConfigurationName "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Update-3parAOConfiguration. command -->" INFO: 
 Return $Result
} ##  End-of Update-3parAOConfiguration.

##########################################################################
######################### FUNCTION Get-3parAOConfigurations ##############
##########################################################################
Function Get-3parAOConfigurations()
{
<#
  .SYNOPSIS   
   Get-3parAOConfigurations - Show Adaptive Optimization configurations.

  .DESCRIPTION
   Note : This cmdlet (Get-3parAOConfigurations) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-AOConfigurations) instead.
   
   The Get-3parAOConfigurations command shows Adaptive Optimization (AO) configurations in
   the system.   

  .EXAMPLE

  .PARAMETER Domain
   Shows only AO configurations that are in domains with names matching
   one or more of the <domain_name_or_pattern> argument. This option
   does not allow listing objects within a domain of which the user is
   not a member. Patterns are glob-style (shell-style) patterns (see
   help on sub,globpat)

  .PARAMETER AOConfigurationName
   
  .Notes
    NAME: Get-3parAOConfigurations
    LASTEDIT 29-05-2019 15:03:14
    KEYWORDS: Get-3parAOConfigurations
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Domain,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$AOConfigurationName,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parAOConfigurations - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parAOConfigurations since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parAOConfigurations since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showaocfg "

 if($Domain)
 {
	$Cmd += " -domain $Domain "
 }
 
 if($AOConfigurationName)
 {
	$Cmd += " $AOConfigurationName "
 }
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Get-3parAOConfigurations command -->" INFO:
 
 if($Result.count -gt 1)
 { 
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count -2  
	$oneTimeOnly = "True"
	foreach ($s in  $Result[1..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")		
		$s= [regex]::Replace($s,"-","")		
		$s= $s.Trim()		
		
		if($oneTimeOnly -eq "True")
		{				
			$sTemp1=$s				
			$sTemp = $sTemp1.Split(',')							
			$sTemp[2] = "T0(CPG)"
			$sTemp[3] = "T1(CPG)"
			$sTemp[4] = "T2(CPG)"
			$sTemp[5] = "T0Min(MB)"
			$sTemp[6] = "T1Min(MB)"
			$sTemp[7] = "T2Min(MB)"
			$sTemp[8] = "T0Max(MB)"
			$sTemp[9] = "T1Max(MB)"
			$sTemp[10] = "T2Max(MB)"
			$sTemp[11] = "T0Warn(MB)"
			$sTemp[12] = "T1Warn(MB)"
			$sTemp[13] = "T2Warn(MB)"
			$sTemp[14] = "T0Limit(MB)"
			$sTemp[15] = "T1Limit(MB)"
			$sTemp[16] = "T2Limit(MB)"
			$newTemp= [regex]::Replace($sTemp,"^ ","")			
			$newTemp= [regex]::Replace($sTemp," ",",")				
			$newTemp= $newTemp.Trim()
			$s=$newTemp			
		}
				
		Add-Content -Path $tempfile -Value $s
		$oneTimeOnly = "False"		
	}
	Import-Csv $tempFile 
	del $tempFile 
 }
 else
 {
	Return $Result
 }
} ##  End-of Get-3parAOConfigurations

##########################################################################
######################### FUNCTION Start-3parAO ##########################
##########################################################################
Function Start-3parAO()
{
<#
  .SYNOPSIS
   Start-3parAO - Start execution of an Adaptive Optimization configuration.

  .DESCRIPTION
   Note : This cmdlet (Start-3parAO) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-AO) instead.
   
   The Start-3parAO command starts execution of an Adaptive Optimization (AO)
   configuration using data region level performance data collected for the
   specified number of hours.

  .EXAMPLE
	Start-3parAO -Btsecs 3h -AocfgName prodaocfg
	Start execution of AO config prodaocfg using data for the past 3 hours:

  .EXAMPLE	
	Start-3parAO -Btsecs 12h -Etsecs 3h -Maxrunh 6 -AocfgName prodaocfg
	Start execution of AO config prodaocfg using data from 12 hours ago until
	3 hours ago, allowing up to 6 hours to complete:
	
  .EXAMPLE
	Start-3parAO -Btsecs 3h -Vv "set:dbvvset" -AocfgName prodaocfg
	Start execution of AO for the vvset dbvvset in AOCFG prodaocfg using
    data for the past 3 hours:	
	
  .PARAMETER Btsecs
    Select the begin time in seconds for the analysis period.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the analysis begins 12 hours ago.

  .PARAMETER Etsecs
	Select the end time in seconds for the analysis period.
	The value can be specified as either
	- The absolute epoch time (for example 1351263600).
	- The absolute time as a text string in one of the following formats:
		- Full time string including time zone: "2012-10-26 11:00:00 PDT"
		- Full time string excluding time zone: "2012-10-26 11:00:00"
		- Date string: "2012-10-26" or 2012-10-26
		- Time string: "11:00:00" or 11:00:00
	- A negative number indicating the number of seconds before the
	  current time. Instead of a number representing seconds, <secs> can
	  be specified with a suffix of m, h or d to represent time in minutes
	  (e.g. -30m), hours (e.g. -1.5h) or days (e.g. -7d).
	If it is not specified then the analysis ends with the most recent
	sample.

  .PARAMETER Compact
   Specify if and how CPGs should be compacted. Choices for <mode> are
   auto     Automatically select the compactcpg mode (default).
	   This will free up the most space but can potentially take
	   longer because it may cause additional region moves to
	   increase consolidation.  This is the default mode. In this
	   mode, trimonly is run first to trim LDs without performing
	   region moves, and then the full compactcpg is run if space
	   is still needed.
   trimonly Only run compactcpg with the -trimonly option. This will
	   t perform any region moves during compactcpg.
   no       Do not run compactcpg.  This option may be used if
	compactcpg is run or scheduled separately.

  .PARAMETER Dryrun
   Do not execute the region moves, only show which moves would be done.

  .PARAMETER Maxrunh
	Select the approximate maximum run time in hours (default is 6 hours).
	The number should be between 1 and 24 hours.
	The command will attempt to limit the amount of data to be moved so
	the command can complete by the specified number of hours.  If the
	time runs beyond the specified hours, the command will abort at an
	appropriate time.

  .PARAMETER Min_iops
	Do not execute the region moves if the average IOPS during the
	measurement interval is less than <min_iops>.  If the -vv option is not
	specified, the IOPS are for all the LDs in the AOCFG.
	If the -vv option is specified, the IOPS are for all the VLUNs that
	include matching VVs.
	If min_iops is not specified, the default value is 50.

  .PARAMETER Mode
	Override the optimization bias of the AO config, for instance to
	control AO differently for different VVs. Can be one of the
	following:
	Performance: Move more regions towards higher performance tier.
	Balanced:    Balanced between higher performance and lower cost.
	Cost:        Move more regions towards lower cost tier.

  .PARAMETER Vv
	Limit the analysis and data movement to VVs with names that match one
	or more of the specified names or glob-style patterns. VV set names
	must be prefixed by "set:".  Note that snapshot VVs will not be
	considered since only base VVs have region space. Each VV's
	user CPG must be part of the specified AOCFG in order to be
	optimized. Snapshots in a VV's tree will not be optimized.

  .PARAMETER T0min
	Specifies the minimum space utilization of the tier CPG for AO to
	maintain when optimizing regions between tiers. The size can be
	specified in MB (default) or GB (using g or G) or TB (using t or T).
	Setting a minimum to 0 (default) indicates that no minimum space
	utilization will be enforced.   

  .PARAMETER T1min
	Specifies the minimum space utilization of the tier CPG for AO to
	maintain when optimizing regions between tiers. The size can be
	specified in MB (default) or GB (using g or G) or TB (using t or T).
	Setting a minimum to 0 (default) indicates that no minimum space
	utilization will be enforced.   

  .PARAMETER T2min
	Specifies the minimum space utilization of the tier CPG for AO to
	maintain when optimizing regions between tiers. The size can be
	specified in MB (default) or GB (using g or G) or TB (using t or T).
	Setting a minimum to 0 (default) indicates that no minimum space
	utilization will be enforced.

  .PARAMETER T0max
	Specifies the maximum space utilization of the tier CPG. AO will
	move regions into and out of the CPG based on their relative access
	rate history, but will not exceed this maximum size in the CPG.
	The size can be specified in MB (default) or GB (using g or G) or
	TB (using t or T). Setting a max to 0 (default) indicates that AO will
	use other indicators to decide the maximum CPG space utilization:
	either the CPG sdgl, sdgw, or maximum possible growth size.   

  .PARAMETER T1max
	Specifies the maximum space utilization of the tier CPG. AO will
	move regions into and out of the CPG based on their relative access
	rate history, but will not exceed this maximum size in the CPG.
	The size can be specified in MB (default) or GB (using g or G) or
	TB (using t or T). Setting a max to 0 (default) indicates that AO will
	use other indicators to decide the maximum CPG space utilization:
	either the CPG sdgl, sdgw, or maximum possible growth size.   

  .PARAMETER T2max
	Specifies the maximum space utilization of the tier CPG. AO will
	move regions into and out of the CPG based on their relative access
	rate history, but will not exceed this maximum size in the CPG.
	The size can be specified in MB (default) or GB (using g or G) or
	TB (using t or T). Setting a max to 0 (default) indicates that AO will
	use other indicators to decide the maximum CPG space utilization:
	either the CPG sdgl, sdgw, or maximum possible growth size.

  .PARAMETER AocfgName
	The AO configuration name, using up to 31 characters.
	
  .Notes
    NAME: Start-3parAO
    LASTEDIT 17-06-2019 09:42:29
    KEYWORDS: Start-3parAO
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Btsecs,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Etsecs,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Compact,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Dryrun,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Maxrunh,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Min_iops,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Mode,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Vv,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$T0min,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$T1min,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$T2min,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$T0max,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$T1max,

	[Parameter(Position=13, Mandatory=$false)]
	[System.String]
	$T2max,

	[Parameter(Position=14, Mandatory=$false)]
	[System.String]
	$AocfgName,

	[Parameter(Position=15, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Start-3parAO - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Start-3parAO since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Start-3parAO since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " startao "

 if($Btsecs)
 {
	$Cmd += " -btsecs $Btsecs "
 }

 if($Etsecs)
 {
	$Cmd += " -etsecs $Etsecs "
 }

 if($Compact)
 {
	$Cmd += " -compact $Compact "
 }

 if($Dryrun)
 {
	$Cmd += " -dryrun "
 }

 if($Maxrunh)
 {
	$Cmd += " -maxrunh $Maxrunh "
 }

 if($Min_iops)
 {
	$Cmd += " -min_iops $Min_iops "
 }

 if($Mode)
 {
	$Cmd += " -mode $Mode "
 }

 if($Vv)
 {
	$Cmd += " -vv $Vv "
 }

 if($T0min)
 {
	$Cmd += " -t0min $T0min "
 }

 if($T1min)
 {
	$Cmd += " -t1min $T1min "
 }

 if($T2min)
 {
	$Cmd += " -t2min $T2min "
 }

 if($T0max)
 {
	$Cmd += " -t0max $T0max "
 }

 if($T1max)
 {
	$Cmd += " -t1max $T1max "
 }

 if($T2max)
 {
	$Cmd += " -t2max $T2max "
 }

 if($AocfgName)
 {
	$Cmd += " $AocfgName "
 }
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Start-3parAO command -->" INFO: 
 
 Return $Result
} ##  End-of Start-3parAO

##########################################################################
######################### FUNCTION Switch-3parPD #########################
##########################################################################
Function Switch-3parPD()
{
<#
  .SYNOPSIS
   Switch-3parPD - Spin up or down a physical disk (PD).

  .DESCRIPTION
   Note : This cmdlet (Switch-3parPD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Switch-PD) instead.
  
   The Switch-3parPD command spins a PD up or down. This command is used when
   replacing a PD in a drive magazine.

  .EXAMPLE
	The following example instigates the spin up of a PD identified by its
	WWN of 2000000087002078:
	Switch-3parPD -Spinup -WWN 2000000087002078
  
  .PARAMETER Spinup
	Specifies that the PD is to spin up. If this subcommand is not used,
	then the spindown subcommand must be used.
  
  .PARAMETER Spindown
	Specifies that the PD is to spin down. If this subcommand is not used,
	then the spinup subcommand must be used.

  .PARAMETER Ovrd
   Specifies that the operation is forced, even if the PD is in use.

   
  .PARAMETER WWN
	Specifies the World Wide Name of the PD. This specifier can be repeated
	to identify multiple PDs.
   
  .Notes
    NAME: Switch-3parPD
    LASTEDIT 17-06-2019 11:54:15
    KEYWORDS: Switch-3parPD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Spinup,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Spindown,
 
	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Ovrd,	

	[Parameter(Position=3, Mandatory=$True)]
	[System.String]
	$WWN,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Switch-3parPD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Switch-3parPD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Switch-3parPD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " controlpd "

 if($Spinup)
 {
	$Cmd += " spinup "
 }
 elseif($Spindown)
 {
	$Cmd += " spindown "
 }
 else
 {
	Return "Select at least one from [ Spinup | Spindown ]"
 }

 if($Ovrd)
 {
	$Cmd += " -ovrd "
 }

 if($WWN)
 {
	$Cmd += " $WWN "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Switch-3parPD command -->" INFO: 
 
 Return $Result
} ##  End-of Switch-3parPD

##########################################################################
######################### FUNCTION Remove-3parPD #########################
##########################################################################
Function Remove-3parPD()
{
<#
  .SYNOPSIS
   Remove-3parPD - Remove a physical disk (PD) from system use.

  .DESCRIPTION
   Note : This cmdlet (Remove-3parPD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-PD) instead.
  
   The Remove-3parPD command removes PD definitions from system use.

  .EXAMPLE
	The following example removes a PD with ID 1:
	Remove-3parPD -PDID 1
   
  .PARAMETER PDID
	Specifies the PD(s), identified by integers, to be removed from system use.

  .Notes
    NAME: Remove-3parPD
    LASTEDIT 17-06-2019 12:05:34
    KEYWORDS: Remove-3parPD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$True)]
	[System.String]
	$PDID,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parPD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parPD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parPD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " dismisspd "

 if($PDID)
 {
	$Cmd += " $PDID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Remove-3parPD command -->" INFO: 
 
 Return $Result
} ##  End-of Remove-3parPD

##########################################################################
######################### FUNCTION Find-3parNode #########################
##########################################################################
Function Find-3parNode()
{
<#
  .SYNOPSIS
   Find-3parNode - Locate a node by blinking its LEDs.

  .DESCRIPTION
   Note : This cmdlet (Find-3parNode) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Find-Node) instead.
  
   The Find-3parNode command helps locate a particular node or its components by
   illuminating LEDs on the node.

  .EXAMPLE

  .PARAMETER T
   Specifies the number of seconds to illuminate the LEDs. For HPE 3PAR 7000 and
   HPE 3PAR 8000 storage systems, the default time to illuminate the LEDs is 15
   minutes with a maximum time of one hour. For STR (Safe to Remove) systems,
   the default time is one hour with a maximum time of one week. For all
   other systems, the default time is 60 seconds with a maximum time of
   255 seconds. Issuing "Find-3parNode -t 0 <nodeid>" will turn off LEDs
   immediately.

  .PARAMETER Ps
   Only the service LED for the specified power supply will blink.
   Accepted values for <psid> are 0 and 1.

  .PARAMETER Pci
   Only the service LED corresponding to the PCI card in the specified slot
   will blink. Accepted values for <slot> are 0 through 8.

  .PARAMETER Fan
   Only the service LED on the specified node fan module will blink.
   Accepted values for <fanid> are 0 and 1 for HPE 3PAR 10000 systems.
   Accepted values for <fanid> are 0, 1 and 2 for HPE 3PAR 20000 systems.

  .PARAMETER Drive
   Only the service LED corresponding to the node's internal drive will
   blink.

  .PARAMETER Bat
   Only the service LED on the battery backup unit will blink.

  .PARAMETER NodeID
	Indicates which node the locatenode operation will act on. Accepted
	values are 0 through 7.

   
  .Notes
    NAME: Find-3parNode
    LASTEDIT 17-06-2019 13:06:24
    KEYWORDS: Find-3parNode
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$T,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Ps,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Pci,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Fan,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Drive,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Bat,

	[Parameter(Position=6, Mandatory=$True)]
	[System.String]
	$NodeID,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Find-3parNode - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Find-3parNode since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Find-3parNode since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " locatenode "

 if($T)
 {
	$Cmd += " -t $T "
 }

 if($Ps)
 {
	$Cmd += " -ps $Ps "
 }

 if($Pci)
 {
	$Cmd += " -pci $Pci "
 }

 if($Fan)
 {
	$Cmd += " -fan $Fan "
 }

 if($Drive)
 {
	$Cmd += " -drive "
 }

 if($Bat)
 {
	$Cmd += " -bat "
 }

 if($NodeID)
 {
	$Cmd += " $NodeID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Find-3parNode command -->" INFO: 
 
 Return $Result
} ##  End-of Find-3parNode

##########################################################################
######################### FUNCTION Find-3parSystem #######################
##########################################################################
Function Find-3parSystem()
{
<#
  .SYNOPSIS
    Locate a system by illuminating or blinking its LEDs.

  .DESCRIPTION
    Note : This cmdlet (Find-3parSystem) is deprecated and will be removed in a 
	subsequent release of PowerShell Toolkit. Consider using the cmdlet (Find-System) instead.
  
    The Find-3parSystem command helps locate a storage system by illuminating the
    blue UID LEDs or by alternating the node status LEDs amber and green on all
    nodes of the storage system. By default, the LEDs in all connected cages
    will illuminate blue or will oscillate green and amber, depending on the
    system or cage model.
	
  .PARAMETER T
	Specifies the number of seconds to illuminate or blink the LEDs.
	default may vary depending on 3PAR system model. For example, the
	default time for HPE 3PAR 7000 and HPE 3PAR 8000 storage systems is 15
	minutes, with a maximum time of one hour. The default time for 9000 and
	20000 systems is 60 minutes, with a maximum of 604,800 seconds (one
	week).
  
  .PARAMETER NodeList
	Specifies a comma-separated list of nodes on which to illuminate
	or blink LEDs. The default is all nodes.
	
  .PARAMETER NoCage
	Specifies that LEDs on the drive cages should not illuminate
	or blink. The default is to illuminate or blink LEDs for all cages in the
	system.
  
  .EXAMPLE
	In the following example, a storage system is identified by illuminating
	or blinking the LEDs on all drive cages in the system for 90 seconds.
	Find-3parSystem -T 90

  .Notes
    NAME: Find-3parSystem
    LASTEDIT 17-06-2019 14:25:06
    KEYWORDS: Find-3parSystem
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
	param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$T,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$NodeList,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$NoCage,
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Find-3parSystem - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Find-3parSystem since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Find-3parSystem since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " locatesys "

 if($T)
 {
	$Cmd += " -t $T "
 }

 if($NodeList)
 {
	$Cmd += " -nodes $NodeList "
 }

 if($NoCage)
 {
	$Cmd += " -nocage "
 }
 
 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Find-3parSystem command -->" INFO: 
 
 Return $Result
} ##  End-of Find-3parSystem

##########################################################################
######################### FUNCTION Set-3parBattery #######################
##########################################################################
Function Set-3parBattery()
{
<#
  .SYNOPSIS
   Set-3parBattery - set a battery's serial number, expiration date, reset test
   logs or reset recharge time.

  .DESCRIPTION
   Note : This cmdlet (Set-3parBattery) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Battery) instead.
  
   The Set-3parBattery command may be used to set battery information such as
   the battery's expiration date, its recharging time, and its serial number.
   This information gives the system administrator a record or log of the
   battery age and battery charge status.

  .EXAMPLE
	The following example resets the battery test log and the recharging time
	for a newly installed battery on node 2, power supply 1, and battery 0, with
	an expiration date of July 4, 2006:
	
	Set-3parBattery -X " 07/04/2006" -Node_ID 2 -Powersupply_ID 1 -Battery_ID 0	

  .PARAMETER S
   Specifies the serial number of the battery using a limit of 31
   alphanumeric characters. This option is not supported on HPE 3PAR
   10000 and 20000 systems.

  .PARAMETER X
   Specifies the expiration date of the battery (mm/dd/yyyy). The
   expiration date cannot extend beyond 2037.

  .PARAMETER L
   Specifies that the battery test log is reset and all previous test log
   entries are cleared.

  .PARAMETER R
   Specifies that the battery recharge time is reset and that 10 hours of
   charging time are required for the battery to be fully charged.
   This option is deprecated.
   
  .PARAMETER Node_ID
	Specifies the node number where the battery is installed. Node_ID is
	an integer from 0 through 7.

  .PARAMETER Powersupply_ID
	Specifies the power supply number on the node using either 0 (left
	side from the rear of the node) or 1 (right side from the rear of
	the node).

  .PARAMETER Battery_ID
	Specifies the battery number on the power supply where 0 is the first
	battery.

  .Notes
    NAME: Set-3parBattery
    LASTEDIT 17-06-2019 14:38:24
    KEYWORDS: Set-3parBattery
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$S,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$X,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$L,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$R,

	[Parameter(Position=4, Mandatory=$True)]
	[System.String]
	$Node_ID,

	[Parameter(Position=5, Mandatory=$True)]
	[System.String]
	$Powersupply_ID,

	[Parameter(Position=6, Mandatory=$True)]
	[System.String]
	$Battery_ID,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parBattery - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
  #check if connection object contents are null/empty
  $Validate1 = Test-ConnectionObject $SANConnection
  if($Validate1 -eq "Failed")
  {
    #check if global connection object contents are null/empty
    $Validate2 = Test-ConnectionObject $global:SANConnection
    if($Validate2 -eq "Failed")
    {
        Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
        Write-DebugLog "Stop: Exiting Set-3parBattery since SAN connection object values are null/empty" $Debug 
        Return "FAILURE : Exiting Set-3parBattery since SAN connection object values are null/empty"
    }
  }
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setbattery "

 if($S)
 {
	$Cmd += " -s $S "
 }

 if($X)
 {
	$Cmd += " -x $X "
 }

 if($L)
 {
	$Cmd += " -l "
 }

 if($R)
 {
	$Cmd += " -r "
 }

 if($Node_ID)
 {
	$Cmd += " $Node_ID "
 }

 if($Powersupply_ID)
 {
	$Cmd += " $Powersupply_ID "
 }

 if($Battery_ID)
 {
	$Cmd += " $Battery_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parBattery command -->" INFO: 
 
 Return $Result
} ##  End-of Set-3parBattery

##########################################################################
######################### FUNCTION Set-3parNodesDate ##########################
##########################################################################
Function Set-3parNodesDate()
{
<#
  .SYNOPSIS
   Set-3parNodesDate - Sets date and time information.

  .DESCRIPTION
   Note : This cmdlet (Set-3parNodesDate) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-NodesDate) instead.
  
   The Set-3parNodesDate command allows you to set the system time and date on all nodes.

  .EXAMPLE
	The following example displays the timezones with the -tzlist option:
	Set-3parNodesDate -Tzlist
	
  .EXAMPLE
	The following example narrows down the list to the required timezone of Etc:
	Set-3parNodesDate -Tzlist -TzGroup Etc
	
  .EXAMPLE
	The following example shows the timezone being set:
	Set-3parNodesDate -Tzlist -TzGroup "Etc/GMT"

  .PARAMETER Tzlist
   Displays a timezone within a group, if a group is specified. If a group
   is not specified, displays a list of valid groups.
   
  .PARAMETER TzGroup
   Displays a timezone within a group, if a group is specified. it alwase use with -Tzlist.
   
  .Notes
    NAME: Set-3parNodesDate
    LASTEDIT 18-06-2019 12:14:38
    KEYWORDS: Set-3parNodesDate
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Tzlist,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$TzGroup,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parNodesDate - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parNodesDate since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parNodesDate since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setdate "

 if($Tzlist)
 {
	$Cmd += " -tzlist "
	if($TzGroup)
	 {
		$Cmd += " $TzGroup "
	 }
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parNodesDate command -->" INFO: 
 
 Return $Result
} ##  End-of Set-3parNodesDate

##########################################################################
######################### FUNCTION Set-3parNodeProperties ################
##########################################################################
Function Set-3parNodeProperties()
{
<#
  .SYNOPSIS
   Set-3parNodeProperties - set the properties of the node components.

  .DESCRIPTION
   Note : This cmdlet (Set-3parNodeProperties) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-NodeProperties) instead.
  
   The Set-3parNodeProperties command sets properties of the node components such as serial
   number of the power supply.

  .EXAMPLE
   Set-3parNodeProperties -PS_ID 1 -S xxx -Node_ID 1

  .PARAMETER S
   Specify the serial number. It is up to 8 characters in length.

  .PARAMETER PS_ID
   Specifies the power supply ID.

  .PARAMETER Node_ID
   Specifies the node ID.
   
  .Notes
    NAME: Set-3parNodeProperties
    LASTEDIT 18-06-2019 12:38:21
    KEYWORDS: Set-3parNodeProperties
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param( 
	[Parameter(Position=0, Mandatory=$True)]
	[System.String]
	$PS_ID,
	
	[Parameter(Position=1, Mandatory=$True)]
	[System.String]
	$S,
	
	[Parameter(Position=2, Mandatory=$True)]
	[System.String]
	$Node_ID,	

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parNodeProperties - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parNodeProperties since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parNodeProperties since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

 $Cmd = " setnode ps "
 
 if($PS_ID)
 {
	$Cmd += " $PS_ID "
 }

 if($S)
 {
	$Cmd += " -s $S "
 } 

 if($Node_ID)
 {
	$Cmd += " $Node_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parNodeProperties command -->" INFO:
 
 Return $Result
} ##  End-of Set-3parNodeProperties

##########################################################################
######################### FUNCTION Set-3parSysMgr ########################
##########################################################################
Function Set-3parSysMgr()
{
<#
  .SYNOPSIS
   Set-3parSysMgr - Set the system manager startup state.

  .DESCRIPTION
   Note : This cmdlet (Set-3parSysMgr) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-SysMgr) instead.
  
   The Set-3parSysMgr command sets the system manager startup state.

  .EXAMPLE

  .PARAMETER Wipe
	Requests that the specified system be started in the new system state.
	Warning: This option will result in the loss of data and configuration info.

  .PARAMETER Tocgen
	Specifies that the system is to be started with the specified table
	of contents generation number.

  .PARAMETER Force_iderecovery
	Specifies that the system starts the recovery process from the IDE disk
	even if all virtual volumes have not been started.

  .PARAMETER Force_idewipe
	Specifies that the system wipes the IDE power fail partition. The system
	is shutdown and restarted, during which time all logical disks and
	virtual volumes are checked.

  .PARAMETER Export_vluns
	If the AutoExportAfterReboot option has been set to no, after a power
	failure or uncontrolled shutdown vluns will not be automatically
	exported, and host ports will be in a suspended state. This command
	will reexport the luns and enable the host ports after this happens.

  .PARAMETER System_name
	Specifies the name of the system to be started, using up to 31
	characters.

  .PARAMETER Toc_gen_number
	Specifies the table of contents generation number for the system to
	start with.

	
  .Notes
    NAME: Set-3parSysMgr
    LASTEDIT 18-06-2019 13:39:25
    KEYWORDS: Set-3parSysMgr
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Wipe,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Tocgen,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Force_iderecovery,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Force_idewipe,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Export_vluns,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$System_name,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Toc_gen_number,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parSysMgr - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parSysMgr since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parSysMgr since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setsysmgr -f "

 if($Wipe)
 {
	$Cmd += " wipe "
	if($System_name)
	{
		$Cmd += " $System_name "
	}
	else
	{
		Return "System_name is require with -Wipe option."
	}
 }

 if($Tocgen)
 {
	$Cmd += " tocgen "
	if($Toc_gen_number)
	{
		$Cmd += " $Toc_gen_number "
	} 
 }
 
 if($Force_iderecovery)
 {
	$Cmd += " force_iderecovery "
 } 
 
 if($Force_idewipe)
 {
	$Cmd += " force_idewipe "
 }
 
 if($Export_vluns)
 {
	$Cmd += " export_vluns "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parSysMgr command -->" INFO: 
 Return $Result
} ##  End-of Set-3parSysMgr

##########################################################################
######################### FUNCTION Show-3parBattery ######################
##########################################################################
Function Show-3parBattery()
{
<#
  .SYNOPSIS
   Show-3parBattery - Show battery status information.

  .DESCRIPTION
   Note : This cmdlet (Show-3parBattery) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-Battery) instead.
  
   Displays battery status information such as serial number, expiration
   date and battery life, which could be helpful in determining battery
   maintenance schedules.

  .EXAMPLE

  .PARAMETER Listcols
   List the columns available to be shown with the -showcols option
   described below .

  .PARAMETER Showcols
   Explicitly select the columns to be shown using a comma-separated list
   of column names.  For this option, the full column names are shown in
   the header.

  .PARAMETER D
   Specifies that detailed battery information, including battery test
   information, serial numbers, and expiration dates, is displayed.

  .PARAMETER Log
   Show battery test log information. This option is not supported on
   HPE 3PAR 7000 nor on HPE 3PAR 8000 series systems.

  .PARAMETER I
   Show battery inventory information.

  .PARAMETER State
   Show detailed battery state information.

  .PARAMETER S
   This is the same as -state.
   This option is deprecated and will be removed in a future release.

  .PARAMETER Svc
   Displays inventory information with HPE serial number, spare part etc.
   This option must be used with -i option and it is not supported on
   HPE 3PAR 10000 systems.
   
  .PARAMETER Node_ID
	Displays the battery information for the specified node ID(s). This
	specifier is not required. Node_ID is an integer from 0 through 7.

  .Notes
    NAME: Show-3parBattery
    LASTEDIT 18-06-2019 14:18:36
    KEYWORDS: Show-3parBattery
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Listcols,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Showcols,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Log,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$I,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$State,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Svc,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Node_ID,

	[Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parBattery - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parBattery since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parBattery since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showbattery "

 if($Listcols)
 {
	$Cmd += " -listcols "
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	return $Result
 }

 if($Showcols)
 {
	$Cmd += " -showcols $Showcols "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Log)
 {
	$Cmd += " -log "
 }

 if($I)
 {
	$Cmd += " -i "
 }

 if($State)
 {
	$Cmd += " -state "
 }

 if($Svc)
 {
	$Cmd += " -svc "
 }

 if($Node_ID)
 {
  $Cmd += " $Node_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parBattery command -->" INFO: 

 if($Result.count -gt 1)
 {			
	if($D)
	{	
		Return  $Result	
	}
	else
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count   
		
		foreach ($S in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")		
			$s= [regex]::Replace($s," +",",")			
			$s= [regex]::Replace($s,"-","")			
			$s= $s.Trim()
			
			if($Log)
			{
				$temp1 = $s -replace 'Time','Date,Time,Zone'			
				$s = $temp1
			}
			
			Add-Content -Path $tempfile -Value $s				
		}
		Import-Csv $tempFile 
		del $tempFile
	}
 }
 else
 {			
	Return  $Result
 }
 
} ##  End-of Show-3parBattery

##########################################################################
######################### FUNCTION Show-3parEEPROMLogInfo ################
##########################################################################
Function Show-3parEEPROMLogInfo()
{
<#
  .SYNOPSIS
   Show-3parEEPROMLogInfo - Show node EEPROM information.

  .DESCRIPTION
   Note : This cmdlet (Show-3parEEPROMLogInfo) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-EEProm) instead.
  
   The Show-3parEEPROMLogInfo command displays node EEPROM log information.

  .EXAMPLE
	The following example displays the EEPROM log for all nodes:
	Show-3parEEPROMLogInfo
	
  .EXAMPLE
	Show-3parEEPROMLogInfo -Node_ID 0
	
  .EXAMPLE
	Show-3parEEPROMLogInfo -Dead 
	
  .EXAMPLE
	Show-3parEEPROMLogInfo -Dead -Node_ID 0

  .PARAMETER Dead
   Specifies that an EEPROM log for a node that has not started or
   successfully joined the cluster be displayed. If this option is used, it
   must be followed by a non empty list of nodes.
   
  .PARAMETER Node_ID
	Specifies the node ID for which EEPROM log information is retrieved.
	Multiple node IDs are separated with a single space (0 1 2). If no
	specifiers are used, the EEPROM log for all nodes is displayed.
		
  .Notes
    NAME: Show-3parEEPROMLogInfo
    LASTEDIT 19-06-2019 12:14:25
    KEYWORDS: Show-3parEEPROMLogInfo
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Dead,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Node_ID,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parEEPROMLogInfo - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parEEPROMLogInfo since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parEEPROMLogInfo since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showeeprom "

 if($Dead)
 {
	$Cmd += " -dead "
 }
 
 if($Node_ID)
 {
  $Cmd += " $Node_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parEEPROMLogInfo command -->" INFO: 
 
 Return $Result
} ##  End-of Show-3parEEPROMLogInfo

##########################################################################
######################### FUNCTION Show-3parFirmwaredb ###################
##########################################################################
Function Show-3parFirmwaredb()
{
<#
  .SYNOPSIS
   Show-3parFirmwaredb - Show database of current firmware levels.

  .DESCRIPTION
   Note : This cmdlet (Show-3parFirmwaredb) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-Firmwaredb) instead.
  
   The Show-3parFirmwaredb command displays the current database of firmware levels
   for possible upgrade. If issued without any options, the firmware for all
   vendors is displayed.

  .EXAMPLE
   Show-3parFirmwaredb 
   
  .EXAMPLE
   Show-3parFirmwaredb -VendorName xxx
   
  .EXAMPLE
   Show-3parFirmwaredb -All
   
  .EXAMPLE
   Show-3parFirmwaredb -L

  .PARAMETER VendorName
   Specifies that the firmware vendor from the SCSI database file is
   displayed.

  .PARAMETER L
   Reloads the SCSI database file into the system.

  .PARAMETER All
   Specifies current and past firmware entries are displayed. If not
   specified, only current entries are displayed.

  .Notes
    NAME: Show-3parFirmwaredb
    LASTEDIT 21-06-2019 10:33:37
    KEYWORDS: Show-3parFirmwaredb
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$VendorName,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$L,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$All,
	
	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parFirmwaredb - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parFirmwaredb since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parFirmwaredb since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showfirmwaredb "

 if($VendorName)
 {
	$Cmd += " -n $VendorName "
 }

 if($L)
 {
	$Cmd += " -l "
 }

 if($All)
 {
	$Cmd += " -all "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parFirmwaredb command -->" INFO:
 
 Return $Result
} ##  End-of Show-3parFirmwaredb

##########################################################################
######################### FUNCTION Show-3parNetworkDetail ################
##########################################################################
Function Show-3parNetworkDetail()
{
<#
  .SYNOPSIS
   Show-3parNetworkDetail - Show the network configuration and status

  .DESCRIPTION
   Note : This cmdlet (Show-3parNetworkDetail) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-NetworkDetail) instead.
  
   The Show-3parNetworkDetail command displays the configuration and status of the
   administration network interfaces, including the configured gateway and
   network time protocol (NTP) server.

  .EXAMPLE
   The following example displays the status of the system administration
   network interfaces:
   Show-3parNetworkDetail -D

  .PARAMETER D
   Show detailed information.

  .Notes
    NAME: Show-3parNetworkDetail
    LASTEDIT 21-06-2019 10:39:53
    KEYWORDS: Show-3parNetworkDetail
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parNetworkDetail - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parNetworkDetail since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parNetworkDetail since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " shownet "

 if($D)
 {
	$Cmd += " -d "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parNetworkDetail command -->" INFO: 
 
 Return $Result
} ##  End-of Show-3parNetworkDetail


##########################################################################
#################### FUNCTION Show-3parNodeProperties ####################
##########################################################################
Function Show-3parNodeProperties()
{
<#
  .SYNOPSIS
   Show-3parNodeProperties - Show node and its component information.

  .DESCRIPTION
   Note : This cmdlet (Show-3parNodeProperties) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-NodeProperties) instead.
  
   The Show-3parNodeProperties command displays an overview of the node-specific properties
   and its component information. Various command options can be used to
   display the properties of PCI cards, CPUs, Physical Memory, IDE drives,
   and Power Supplies.

  .EXAMPLE
	The following example displays the operating environment status for all
	nodes in the system:
	
	Show-3parNodeProperties
	
  .EXAMPLE
	The following examples display detailed information (-d option) for the
	nodes including their components in a table format. The shownode -d command
	can be used to display the tail information of the nodes including their
	components in name and value pairs.

	Show-3parNodeProperties - Mem
	Show-3parNodeProperties - Mem -Node_ID 1	
    
   The following options are for node summary and inventory information:

  .PARAMETER Listcols
   List the columns available to be shown with the -showcols option
   described below (see 'clihelp -col Show-3parNodeProperties' for help on each column).
   By default (if none of the information selection options below are
   specified) the following columns are shown:
   Node Name State Master InCluster LED Control_Mem Data_Mem Available_Cache
   To display columns pertaining to a specific node component use
   the -listcols option in conjunction with one of the following
   options: -pci, -cpu, -mem, -drive, -fan, -ps, -mcu, -uptime.

  .PARAMETER Showcols
	Explicitly select the columns to be shown using a comma-separated list
	of column names.  For this option, the full column names are shown in
	the header.
	Run 'shownode -listcols' to list Node component columns.
	Run 'shownode -listcols <node_component>' to list columns associated
	with a specific <node_component>.

	<node_component> can be one of the following options: -pci, -cpu, -mem,
	-drive, -fan, -ps, -mcu, -uptime.

	If a specific node component option is not provided, then -showcols expects
	Node columns as input.

	If a column (Node or specific node component) does not match either the Node
	columns list or a specific node component columns list, then
	'shownode -showcols <cols>' request is denied.

	If an invalid column is provided with -showcols, the request is denied.

	The -showcols option can also be used in conjunction with a list of node IDs.

	Run 'clihelp -col shownode' for a description of each column.

  .PARAMETER I
   Shows node inventory information in table format.

  .PARAMETER D
   Shows node and its component information in table format.
   
   The following options are for node component information. These options
   cannot be used together with options, -i and -d:

  .PARAMETER VerboseD
   Displays detailed information in verbose format. It can be used together
   with the following component options.

  .PARAMETER Fan
   Displays the node fan information.

  .PARAMETER Pci
   Displays PCI card information

  .PARAMETER Cpu
   Displays CPU information

  .PARAMETER Mem
   Displays physical memory information.

  .PARAMETER Drive
   Displays the disk drive information.

  .PARAMETER Ps
   Displays power supply information.

  .PARAMETER Mcu
   Displays MicroController Unit information.

  .PARAMETER State
   Displays the detailed state information for node or power supply (-ps).
   This is the same as -s.

  .PARAMETER S
   Displays the detailed state information for node or power supply (-ps).
   This option is deprecated and will be removed in a subsequent release.

  .PARAMETER Uptime
   Show the amount of time each node has been running since the last shutdown.

  .PARAMETER Svc
   Displays inventory information with HPE serial number, spare part etc.
   This option must be used with -i option and it is not supported on
   HPE 3PAR 10000 systems
   
  .PARAMETER Node_ID
	Displays the node information for the specified node ID(s). This
	specifier is not required. Node_ID is an integer from 0 through 7.

  .Notes
    NAME: Show-3parNodeProperties
    LASTEDIT 21-06-2019 10:46:09
    KEYWORDS: Show-3parNodeProperties
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Listcols,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Showcols,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$I,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$VerboseD,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Fan,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Pci,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$Cpu,

	[Parameter(Position=9, Mandatory=$false)]
	[switch]
	$Mem,

	[Parameter(Position=10, Mandatory=$false)]
	[switch]
	$Drive,

	[Parameter(Position=11, Mandatory=$false)]
	[switch]
	$Ps,

	[Parameter(Position=12, Mandatory=$false)]
	[switch]
	$Mcu,

	[Parameter(Position=13, Mandatory=$false)]
	[switch]
	$State,

	[Parameter(Position=15, Mandatory=$false)]
	[switch]
	$Uptime,

	[Parameter(Position=16, Mandatory=$false)]
	[switch]
	$Svc,

	[Parameter(Position=17, Mandatory=$false)]
	[System.String]
	$Node_ID,

	[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parNodeProperties - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parNodeProperties since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parNodeProperties since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " shownode "

 if($Listcols)
 {
	$Cmd += " -listcols "
	$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
	return $Result
 }

 if($Showcols)
 {
	$Cmd += " -showcols $Showcols "
 }

 if($I)
 {
	$Cmd += " -i "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($VerboseD)
 {
	$Cmd += " -verbose "
 }

 if($Fan)
 {
	$Cmd += " -fan "
 }

 if($Pci)
 {
	$Cmd += " -pci "
 }

 if($Cpu)
 {
	$Cmd += " -cpu "
 }

 if($Mem)
 {
	$Cmd += " -mem "
 }

 if($Drive)
 {
	$Cmd += " -drive "
 }

 if($Ps)
 {
	$Cmd += " -ps "
 }

 if($Mcu)
 {
	$Cmd += " -mcu "
 }

 if($State)
 {
	$Cmd += " -state "
 }

 if($Uptime)
 {
	$Cmd += " -uptime "
 }

 if($Svc)
 {
	$Cmd += " -svc "
 }

 if($Node_ID)
 {
	$Cmd += " $Node_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parNodeProperties command -->" INFO: 
 if($Result.count -gt 1)
 {	
	if($I -Or $D -Or $VerboseD)
	{
		Return  $Result
	}
	else
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count
		$FirstCount = 0
		$oneTimeOnly = "True"
		
		if($Cmd -eq " shownode " -Or $Node_ID)
		{
			$FirstCount = 1
		}
		if($Node_ID -and $Showcols)
		{
			$FirstCount = 0
		}
		if($Showcols -or $Fan -or $Pci -or $Cpu -Or $Drive -Or $Mem -Or $Mcu -Or $Ps -Or $State -Or $Uptime -Or $Svc)
		{
			$FirstCount = 0
		}
		foreach ($S in  $Result[$FirstCount..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")		
			$s= [regex]::Replace($s," +",",")			
			$s= [regex]::Replace($s,"-","")			
			$s= $s.Trim()
			
			if($Cmd -eq " shownode "  -Or $Node_ID)
			{
				if($Showcols -or $Fan -or $Pci -or $Cpu -Or $Drive -Or $Mem -Or $Mcu -Or $Ps -Or $State -Or $Uptime -Or $Svc)
				{
				}
				else
				{
					if($oneTimeOnly -eq "True")
					{				
						$sTemp1=$s				
						$sTemp = $sTemp1.Split(',')							
						$sTemp[6] = "Control_Mem(MB)"
						$sTemp[7] = "Data_Mem(MB)"
						$sTemp[8] = "Cache_Available(%)"			
						$newTemp= [regex]::Replace($sTemp,"^ ","")			
						$newTemp= [regex]::Replace($sTemp," ",",")				
						$newTemp= $newTemp.Trim()
						$s=$newTemp			
					}
				}
			}
			Add-Content -Path $tempfile -Value $s
			$oneTimeOnly = "False"				
		}
		Import-Csv $tempFile 
		del $tempFile
	}	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parNodeProperties

##########################################################################
################ FUNCTION Show-3parNodeEnvironmentStatus #################
##########################################################################
Function Show-3parNodeEnvironmentStatus()
{
<#
  .SYNOPSIS
   Show-3parNodeEnvironmentStatus - Show node environmental status (voltages, temperatures).

  .DESCRIPTION
   Note : This cmdlet (Show-3parNodeEnvironmentStatus) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-NodeEnvironmentStatus) instead.
  
   The Show-3parNodeEnvironmentStatus command displays the node operating environment status,
   including voltages and temperatures.

  .EXAMPLE
	The following example displays the operating environment status for all nodes
	in the system:

	Show-3parNodeEnvironmentStatus

  .PARAMETER Node_ID
   Specifies the ID of the node whose environment status is displayed.
   Multiple node IDs can be specified as a series of integers separated by
   a space (1 2 3). If no option is used, then the environment status of
   all nodes is displayed.

  .Notes
    NAME: Show-3parNodeEnvironmentStatus
    LASTEDIT 24-06-2019 14:24:41
    KEYWORDS: Show-3parNodeEnvironmentStatus
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Node_ID,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parNodeEnvironmentStatus - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parNodeEnvironmentStatus since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parNodeEnvironmentStatus since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " shownodeenv "

 if($Node_ID)
 {
	$Cmd += " -n $Node_ID "
 } 

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parNodeEnvironmentStatus command -->" INFO: 
 
 Return $Result
} ##  End-of Show-3parNodeEnvironmentStatus

##########################################################################
######################## FUNCTION Show-3parPortdev #######################
##########################################################################
Function Show-3parPortdev()
{
<#
  .SYNOPSIS
   Show-3parPortdev - Show detailed information about devices on a port.

  .DESCRIPTION
   Note : This cmdlet (Show-3parPortdev) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-Portdev) instead.
  
   The Show-3parPortdev command displays detailed information about devices
   on a specified port.

  .EXAMPLE
  
  .PARAMETER Loop
	Specifies that information is returned for arbitrated loop devices
	that are attached to the specified port. This subcommand is only
	for use with Fibre Channel arbitrated loop ports.
	
  .PARAMETER All
	Specifies that information for all devices attached to the specified
	port is returned.
	
  .PARAMETER NS
	Specifies that information for the switch name server database is
	returned. This subcommand is only for use with fabric-attached
	topologies.
	
  .PARAMETER Fcf
	Specifies that information for all Fibre Channel over Ethernet
	forwarders (FCFs) known to the specified port is returned. This
	subcommand is for use only with Fibre Channel over Ethernet (FCoE)
	ports.
	
  .PARAMETER Sas
	Specifies that information for all devices in the SAS topology
	attached to the specified port is returned.  This subcommand is
	only for use with SAS ports.
	
  .PARAMETER Fcswitch
	Specifies that a list of all switches in the Fibre Channel fabric
	is returned.  This subcommand is only for use with fabric-attached
	Fibre Channel ports.
	
  .PARAMETER Fcfabric
	Specifies that a description of the Fibre Channel fabric is
	returned.  This subcommand is only for use with fabric-attached
	Fibre Channel ports.
	
  .PARAMETER Findport
	Searches the Fibre Channel fabric attached to the specified
	port for information on the supplied WWN.  Supplying the term "this"
	in place of a WWN indicates that the port WWN of the specified HPE 3PAR
	Storage System host port should be used.  This subcommand is only for
	use with fabric-attached Fibre Channel ports.
	
  .PARAMETER Tzone
	Without the <node:slot:port>, this command will return a list of all
	the current target-driven zones for any port. If the <node:slot:port> is
	provided, then detailed information about the target-driven zone for
	this port will be provided. This command is only used with
	fabric-attached Fibre Channel ports.
	
  .PARAMETER UNS
	Specifies that information for all initiators from the switch unzoned
	name server database is returned. This subcommand is only for use with
	fabric-attached topologies.
	
  .PARAMETER Lldp
	Specifies available Link Layer Discovery Protocol information for each
	iSCSI port physically connected is returned. If the <node:slot:port>
	is provided, then only information for this port will be displayed.
	This subcommand is only used with iSCSI QLogic 83XX series ports.
	
  .PARAMETER Dcbx
	Specifies available Data Center Bridging Exchange Protocol information
	for each iSCSI port physically connected is returned. If the
	<node:slot:port> is provided, then only information for this port will
	be displayed. This subcommand is only used with iSCSI QLogic 83XX
	series ports.

  .PARAMETER Pel
   Includes the SAS Phy Error Log (PEL) data for each phy in the SAS
   topology.  This option is only valid when using the sas subcommand.

  .PARAMETER D
   Includes detailed initiator information: HBA Manufacturer, HBA Model,
   HBA Firmware Version, HBA OS Name/Version, the HBA port's supported
   and current speeds, HBA port's OS device name, hostname, alias name(s),
   and whether the Smart SAN QoS and Security features are supported. When
   used with the tzone or uns subcommand.
   When used with the lldp or dcbx subcommand, this option will return
   relevant detailed information on the LLDP and DCBX information received
   from the peer device. This option is only valid when using either the
   tzone, uns, lldp or dcbx subcommand.

  .PARAMETER App
   Includes detailed information provided from the DCBX Application
   Protocol TLV configured on the peer device.

  .PARAMETER Pfc
   Includes detailed information from the DCBX Priority Flow Control TLV
   configured on the peer device.

  .PARAMETER Pg
   Includes detailed information from the DCBX Priority Groups TLV
   configured on the peer device.

   .PARAMETER NSP
	Specifies the port for which information about devices on that port are
	displayed.

	  node
		Specifies the node.
	  slot
		Specifies the PCI bus slot in the specified node.
	  port
		Specifies the Fibre Channel port number of the PCI card in the
		specified PCI bus slot.

   .PARAMETER WWN
    Specifies the Fibre Channel worldwide port name of an attached port.
   
  .Notes
    NAME: Show-3parPortdev
    LASTEDIT 25-06-2019 13:39:02
    KEYWORDS: Show-3parPortdev
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Loop,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$All,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$NS,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$FCF,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$SAS,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Fcswitch,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Fcfabric,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Findport,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$Tzone,

	[Parameter(Position=9, Mandatory=$false)]
	[switch]
	$UNS,

	[Parameter(Position=10, Mandatory=$false)]
	[switch]
	$Lldp,

	[Parameter(Position=11, Mandatory=$false)]
	[switch]
	$Dcbx,
	
	[Parameter(Position=12, Mandatory=$false)]
	[switch]
	$PEL,

	[Parameter(Position=13, Mandatory=$false)]
	[switch]
	$Detail,
	
	[Parameter(Position=14, Mandatory=$false)]
	[switch]
	$App,

	
	[Parameter(Position=15, Mandatory=$false)]
	[switch]
	$PFC,

	
	[Parameter(Position=16, Mandatory=$false)]
	[switch]
	$PG,
	
	[Parameter(Position=17, Mandatory=$false)]
	[System.String]
	$NSP,
	
	[Parameter(Position=18, Mandatory=$false)]
	[System.String]
	$WWN,

	[Parameter(Position=19, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parPortdev - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parPortdev since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parPortdev since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showportdev "
		
 if($Loop)
 {
 	$Cmd += " loop "
 }
 elseif($All)
 {
 	$Cmd += " all "
 }
 elseif($NS)
 {
 	$Cmd += " ns "
 }
 elseif($FCF)
 {
 	$Cmd += " fcf "
 }
 elseif($SAS)
 {
 	$Cmd += " sas "
 }
 elseif($Fcswitch)
 {
 	$Cmd += " fcswitch "
 }
 elseif($Fcfabric)
 {
 	$Cmd += " fcfabric "
 }
 elseif($Findport)
 {
 	$Cmd += " findprort "
 	if($WWN)
 	{
 		$Cmd += " $WWN "
 	}
 	else
 	{
 		Return "WWN name required with Findprort.."
 	}
 }
 elseif($Tzone)
 {
 	$Cmd += " tzone "
 }
 elseif($UNS)
 {
 	$Cmd += " uns "
 }
 elseif($Lldp)
 {
 	$Cmd += " lldp "
 }
 elseif($Dcbx)
 {
 	$Cmd += " dcbx "
 }
 else
 {
 	Return "Select at list one sub command..."
 }
 
 if($PEL)
 {
 	$Cmd += " -pel "
 }
 if($Detail)
 {
 	$Cmd += " -d "
 }
 if($App)
 {
 	$Cmd += " -app "
 }
 if($PFC)
 {
 	$Cmd += " -pfc "
 }
 if($PG)
 {
 	$Cmd += " -pg "
 }
 if($NSP)
 {
 	$Cmd += " $NSP "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parPortdev command -->" INFO: 
 
 Return $Result
} ##  End-of Show-3parPortdev

##########################################################################
################### FUNCTION Show-3parSysStateInfo #######################
##########################################################################
Function Show-3parSysStateInfo()
{
<#
  .SYNOPSIS
   Show-3parSysStateInfo - Show system manager startup state.

  .DESCRIPTION
   Note : This cmdlet (Show-3parSysStateInfo) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-SysMgr) instead.
  
   The Show-3parSysStateInfo displays startup state information about the system manager.

  .EXAMPLE

  .PARAMETER D
   Shows additional detailed information if available.

  .PARAMETER L
   Shows field service diagnostics for System Manager specific Config Locks
   and MCALLs, and system-wide ioctl system calls.

  .Notes
    NAME: Show-3parSysStateInfo
    LASTEDIT 28-06-2019 10:07:21
    KEYWORDS: Show-3parSysStateInfo
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$L,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parSysStateInfo - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parSysStateInfo since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parSysStateInfo since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showsysmgr "

 if($D)
 {
	$Cmd += " -d "
 }

 if($L)
 {
	$Cmd += " -l "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parSysStateInfo command -->" INFO:
 
 Return $Result
} ##  End-of Show-3parSysStateInfo

##########################################################################
############### FUNCTION Show-3parUnrecognizedTargetsInfo ###############
##########################################################################
Function Show-3parUnrecognizedTargetsInfo()
{
<#
  .SYNOPSIS
   Show-3parUnrecognizedTargetsInfo - Show information about unrecognized targets.

  .DESCRIPTION
   Note : This cmdlet (Show-3parUnrecognizedTargetsInfo ) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-UnrecognizedTargetsInfo) instead.
  
   The Show-3parUnrecognizedTargetsInfo command displays information about unrecognized targets.

  .EXAMPLE

  .PARAMETER Lun
   Displays the exported Logical Unit Numbers (LUNs) from the unknown
   targets. Use the "all" specifier to display the exported LUNs from all
   of the unknown targets.

  .PARAMETER Inq
   Display SCSI inquiry page information.

  .PARAMETER Mode
   Display SCSI mode page information.

  .PARAMETER Page
   Specify the SCSI page number for the inquiry and mode information.
   <num> is a hex number. For SCSI inquiry information, the valid <num>
   is 0, 80, 83, and c0. For SCSI mode information, the valid <num> is 3
   and 4. This option needs to be used together with -inq or -mode. If
   this option is not specified, the default <num> is 0.

  .PARAMETER D
   Display the detail information of SCSI inquiry or mode page information.

  .PARAMETER Force
   Specifies that the rescan is forced. If this option is not used,
   the rescan will be suppressed if the peer ports have already
   been rescanned within the last 10 seconds.

  .PARAMETER VerboseE
   Display any errors during rescan over the peer ports.

  .PARAMETER Rescan
   Rescan the peer ports to find the unknown targets.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
		Sort in increasing order (default).
	   dec
		Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .PARAMETER Node_WWN
   Indicates the World Wide Name (WWN) of the node.

  .PARAMETER LUN_WWN
   Indicates the World Wide Name (WWN) of a LUN exported from an unknown target.
   
  .Notes
    NAME: Show-3parUnrecognizedTargetsInfo
    LASTEDIT 28-06-2019 10:25:56
    KEYWORDS: Show-3parUnrecognizedTargetsInfo
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Lun,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Inq,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Mode,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Page,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Force,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$VerboseE,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Rescan,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Node_WWN,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$LUN_WWN,

	[Parameter(Position=11, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parUnrecognizedTargetsInfo - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parUnrecognizedTargetsInfo since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parUnrecognizedTargetsInfo since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " showtarget "
	
 if($Lun)
 {
	$Cmd += " -lun "
 }

 if($Inq)
 { 
	$Cmd += " -inq "
 }

 if($Mode)
 {
	$Cmd += " -mode "
 }

 if($Page)
 {
	$Cmd += " -page $Page "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Force)
 {
	$Cmd += " -force "
 }

 if($VerboseE)
 {
	$Cmd += " -verbose "
 }

 if($Rescan)
 {
	$Cmd += " -rescan "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($Node_WWN)
 {
	$Cmd += " $Node_WWN "
 }

 if($LUN_WWN)
 {
	$Cmd += " $LUN_WWN "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parUnrecognizedTargetsInfo command -->" INFO: 
 Return $Result
} ##  End-of Show-3parUnrecognizedTargetsInfo

##########################################################################
############ FUNCTION Show-3parSystemResourcesSummary ####################
##########################################################################
Function Show-3parSystemResourcesSummary()
{
<#
  .SYNOPSIS
   Show-3parSystemResourcesSummary - Show system Table of Contents (TOC) summary.

  .DESCRIPTION
   Note : This cmdlet (Show-3parSystemResourcesSummary) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-SystemResourcesSummary) instead.
  
   The Show-3parSystemResourcesSummary command displays the system table of contents summary that
   provides a summary of the system's resources.

  .EXAMPLE
   None.

  .Notes
    NAME: Show-3parSystemResourcesSummary
    LASTEDIT 28-06-2019 11:04:05
    KEYWORDS: Show-3parSystemResourcesSummary
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )
Write-DebugLog "Start: In Show-3parSystemResourcesSummary - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parSystemResourcesSummary since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parSystemResourcesSummary since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " showtoc "

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parSystemResourcesSummary command -->" INFO: 
 
 Return $Result
} ##  End-of Show-3parSystemResourcesSummary

##########################################################################
################## FUNCTION Show-3parGenerationNumber ####################
##########################################################################
Function Show-3parGenerationNumber()
{
<#
  .SYNOPSIS
   Show-3parGenerationNumber - Shows system Table of Contents (TOC) generation number.

  .DESCRIPTION
   Note : This cmdlet (Show-3parGenerationNumber) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-TOCGen) instead.
  
   The Show-3parGenerationNumber command displays the table of contents generation number.

  .EXAMPLE
   None.

  .Notes
    NAME: Show-3parGenerationNumber
    LASTEDIT 28-06-2019 11:49:25
    KEYWORDS: Show-3parGenerationNumber
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )
Write-DebugLog "Start: In Show-3parGenerationNumber - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parGenerationNumber since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parGenerationNumber since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " showtocgen "

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parGenerationNumber command -->" INFO: 
 
 Return $Result
} ##  End-of Show-3parGenerationNumber

##########################################################################
##################### FUNCTION Show-3parFCoEStatistics ###################
##########################################################################
Function Show-3parFCoEStatistics()
{
<#
  .SYNOPSIS
   Show-3parFCoEStatistics - Display FCoE statistics

  .DESCRIPTION
   Note : This cmdlet (Show-3parFCoEStatistics) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-FCOEStatistics) instead.
  
   The Show-3parFCoEStatistics command displays Fibre Channel over Ethernet statistics.

  .EXAMPLE

  .PARAMETER D
   Looping delay in seconds <secs>. The default is 2.

  .PARAMETER Iter
   The command stops after a user-defined <number> of iterations.

  .PARAMETER Nodes
   List of nodes for which the ports are included.

  .PARAMETER Slots
   List of PCI slots for which the ports are included.

  .PARAMETER Ports
   List of ports which are included. Lists are specified in a
   comma-separated manner such as: -ports 1,2 or -ports 1.

  .PARAMETER Counts
   Shows the counts. The default is to show counts/sec.

  .PARAMETER Fullcounts
   Shows the values for the full list of counters instead of the default
   packets and KBytes for the specified protocols. The values are shown in
   three columns:
	   Current - Counts since the last sample.
	   CmdStart - Counts since the start of the command.
	   Begin - Counts since the port was reset.

  .PARAMETER Prev
   Shows the differences from the previous sample.

  .PARAMETER Begin
   Shows the values from when the system was last initiated.

  .Notes
    NAME: Show-3parFCoEStatistics
    LASTEDIT 28-06-2019 12:01:08
    KEYWORDS: Show-3parFCoEStatistics
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$D,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Iter,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Nodes,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Slots,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Ports,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Counts,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Fullcounts,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$Prev,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$Begin,

	[Parameter(Position=9, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parFCoEStatistics - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parFCoEStatistics since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parFCoEStatistics since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " statfcoe "

 if($D)
 {
	$Cmd += " -d $D "
 }

 if($Iter)
 {
	$Cmd += " -iter $Iter "
 }

 if($Nodes)
 {
	$Cmd += " -nodes $Nodes "
 }

 if($Slots)
 {
	$Cmd += " -slots $Slots "
 }

 if($Ports)
 {
	$Cmd += " -ports $Ports "
 }

 if($Counts)
 {
	$Cmd += " -counts "
 }

 if($Fullcounts)
 {
	$Cmd += " -fullcounts "
 }

 if($Prev)
 {
	$Cmd += " -prev "
 }

 if($Begin)
 {
	$Cmd += " -begin "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parFCoEStatistics command -->" INFO:
 
 Return $Result
} ##  End-of Show-3parFCoEStatistics

##########################################################################
#########################  FUNCTION Find-3parLD  #########################
##########################################################################
Function Find-3parLD()
{
<#
  .SYNOPSIS
   Find-3parLD - Perform validity checks of data on logical disks (LD).

  .DESCRIPTION
   Note : This cmdlet (Find-3parLD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Find-LD) instead.
  
   The Find-3parLD command executes consistency checks of data on LDs
   in the event of an uncontrolled system shutdown and optionally repairs
   inconsistent LDs.

  .EXAMPLE

  .PARAMETER Y
   Specifies that if errors are found they are either modified so they are
   valid (-y) or left unmodified (-n). If not specified, errors are left
   unmodified (-n).
   
  .PARAMETER N
   Specifies that if errors are found they are either modified so they are
   valid (-y) or left unmodified (-n). If not specified, errors are left
   unmodified (-n).

  .PARAMETER Progress
   Poll sysmgr to get ldck report.

  .PARAMETER Recover
   Attempt to recover the chunklet specified by giving physical disk (<pdid>)
   and the chunklet's position on that disk (<pdch>). If this options is
   specified, -y must be specified as well.

  .PARAMETER Rs
   Check only the specified RAID set.
   
  .PARAMETER LD_Name
   Requests that the integrity of a specified LD is checked. This specifier can be repeated to execute validity checks on multiple LDs.

  .Notes
    NAME: Find-3parLD
    LASTEDIT 25-07-2019 11:41:43
    KEYWORDS: Find-3parLD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Y,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$N,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Progress,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Recover,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Rs,

	[Parameter(Position=5, Mandatory=$True)]
	[System.String]
	$LD_Name,

	[Parameter(Position=6, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Find-3parLD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Find-3parLD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Find-3parLD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " checkld "

 if($Y)
 {
	$Cmd += " -y "
 }
 
 if($N)
 {
	$Cmd += " -n "
 }

 if($Progress)
 {
	$Cmd += " -progress "
 }

 if($Recover)
 {
	$Cmd += " -recover $Recover "
 }

 if($Rs)
 {
	$Cmd += " -rs $Rs "
 }

 if($LD_Name)
 {
	$Cmd += " $LD_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Find-3parLD command -->" INFO: 
 
 Return $Result
} ##  End-of Find-3parLD
##########################################################################
######################## FUNCTION Compress-3parLD ########################
##########################################################################
Function Compress-3parLD()
{
<#
  .SYNOPSIS
   Compress-3parLD - Consolidate space in logical disks (LD).

  .DESCRIPTION
   Note : This cmdlet (Compress-3parLD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Compress-LD) instead.
  
   The ompress-3parLD command consolidates space on the LDs.

  .EXAMPLE

  .PARAMETER Pat
   Compacts the LDs that match any of the specified patterns.

  .PARAMETER Cons
   This option consolidates regions into the fewest possible LDs.
   When this option is not specified, the regions of each LD will be compacted
   within the same LD.

  .PARAMETER Waittask
   Waits for any created tasks to complete.

  .PARAMETER Taskname
   Specifies a name for the task. When not specified, a default name is
   chosen.

  .PARAMETER Dr
   Specifies that the operation is a dry run, and the tasks will not
   actually be performed.

  .PARAMETER Trimonly
   Only unused LD space is removed. Regions are not moved.

  .PARAMETER LD_Name
   Specifies the name of the LD to be compacted. Multiple LDs can be specified.
   
  .Notes
    NAME: Compress-3parLD
    LASTEDIT 25-07-2019 13:56:59
    KEYWORDS: Compress-3parLD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Pat,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Cons,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Waittask,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$Taskname,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Dr,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$Trimonly,

	[Parameter(Position=6, Mandatory=$True)]
	[System.String]
	$LD_Name,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Compress-3parLD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Compress-3parLD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Compress-3parLD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " compactld -f "

 if($Pat)
 {
	$Cmd += " -pat "
 }

 if($Cons)
 {
	$Cmd += " -cons "
 }

 if($Waittask)
 {
	$Cmd += " -waittask "
 }

 if($Taskname)
 {
	$Cmd += " -taskname $Taskname "
 }

 if($Dr)
 {
	$Cmd += " -dr "
 }

 if($Trimonly)
 {
	$Cmd += " -trimonly "
 }

 if($LD_Name)
 {
  $Cmd += " $LD_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Compress-3parLD command -->" INFO: 

 Return $Result
} ##  End-of Compress-3parLD
##########################################################################
######################### FUNCTION Set-3parVVSpace #######################
##########################################################################
Function Set-3parVVSpace()
{
<#
  .SYNOPSIS
   Set-3parVVSpace - Free SA and SD space from a VV if they are not in use.

  .DESCRIPTION
   Note : This cmdlet (Set-3parVVSpace) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-VvSpace) instead.
  
   The Set-3parVVSpace command frees snapshot administration and snapshot data spaces
   from a Virtual Volume (VV) if they are not in use.

  .EXAMPLE
   Set-3parVVSpace -VV_Name xxx

  .PARAMETER Pat
   Remove the snapshot administration and snapshot data spaces from all the
   virtual volumes that match any of the specified glob-style patterns.

  .PARAMETER VV_Name
   Specifies the virtual volume name, using up to 31 characters.
   
  .Notes
    NAME: Set-3parVVSpace
    LASTEDIT 29-07-2019 10:38:45
    KEYWORDS: Set-3parVVSpace
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false)]
	 [switch]
	 $Pat,

	 [Parameter(Position=1, Mandatory=$True)]
	 [System.String]
	 $VV_Name,

	 [Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parVVSpace - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	  #check if connection object contents are null/empty
	  $Validate1 = Test-ConnectionObject $SANConnection
	  if($Validate1 -eq "Failed")
	  {
			#check if global connection object contents are null/empty
			$Validate2 = Test-ConnectionObject $global:SANConnection
			if($Validate2 -eq "Failed")
			{
				Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
				Write-DebugLog "Stop: Exiting Set-3parVVSpace since SAN connection object values are null/empty" $Debug 
				Return "FAILURE : Exiting Set-3parVVSpace since SAN connection object values are null/empty"
			}
	  }
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " freespace -f "

 if($Pat)
 {
	$Cmd += " -pat "
 }
 
 if($VV_Name)
 {
	$Cmd += " $VV_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parVVSpace command -->" INFO: 
 Return $Result
} ##  End-of Set-3parVVSpace

##########################################################################
######################### FUNCTION Remove-3parLD #########################
##########################################################################
Function Remove-3parLD()
{
<#
  .SYNOPSIS
   Remove-3parLD - Remove logical disks (LD).

  .DESCRIPTION
   Note : This cmdlet (Remove-3parLD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-LD) instead.
  
   The Remove-3parLD command removes a specified LD from the system service group.

  .EXAMPLE
   Remove-3parLD -LD_Name xxx

  .PARAMETER Pat
   Specifies glob-style patterns. All LDs matching the specified
   pattern are removed. By default, confirmation is required to proceed
   with the command unless the -f option is specified. This option must be
   used if the pattern specifier is used.

  .PARAMETER Dr
   Specifies that the operation is a dry run and no LDs are removed.

  .PARAMETER LD_Name
   Specifies the LD name, using up to 31 characters. Multiple LDs can be specified.

  .PARAMETER Rmsys
   Specifies that system resource LDs such as logging LDs and preserved
   data LDs are removed.

  .PARAMETER Unused
   Specifies the command to remove non-system LDs.
   This option cannot be used with the  -rmsys option.

  .Notes
    NAME: Remove-3parLD
    LASTEDIT 29-07-2019 10:44:03
    KEYWORDS: Remove-3parLD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$false)]
	 [switch]
	 $Pat,

	 [Parameter(Position=1, Mandatory=$false)]
	 [switch]
	 $Dr,

	 [Parameter(Position=2, Mandatory=$false)]
	 [switch]
	 $Rmsys,

	 [Parameter(Position=3, Mandatory=$false)]
	 [switch]
	 $Unused,

	 [Parameter(Position=4, Mandatory=$True)]
	 [System.String]
	 $LD_Name,

	 [Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parLD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parLD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parLD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " removeld -f "

 if($Pat)
 {
	$Cmd += " -pat "
 }

 if($Dr)
 {
	$Cmd += " -dr "
 }

 if($Rmsys)
 {
	$Cmd += " -rmsys "
 }

 if($Unused)
 {
	$Cmd += " -unused "
 }

 if($LD_Name)
 {
  $Cmd += " $LD_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Remove-3parLD command -->" INFO:
 
 Return $Result
} ##  End-of Remove-3parLD

##########################################################################
################# FUNCTION Remove-3parVv_Ld_Cpg_Templates ################
##########################################################################
Function Remove-3parVv_Ld_Cpg_Templates()
{
<#
  .SYNOPSIS
   Remove-3parVv_Ld_Cpg_Templates - Remove one or more templates from the system

  .DESCRIPTION
   Note : This cmdlet (Remove-3parVv_Ld_Cpg_Templates) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Remove-Vv_Ld_Cpg_Templates) instead.
  
   The Remove-3parVv_Ld_Cpg_Templates command removes one or more virtual volume (VV),
   logical disk (LD), and common provisioning group (CPG) templates.

  .EXAMPLE
   Remove-3parVv_Ld_Cpg_Templates -Template_Name xxx

  .PARAMETER Template_Name
   Specifies the name of the template to be deleted, using up to 31
   characters. This specifier can be repeated to remove multiple templates
	
  .PARAMETER Pat
   The specified patterns are treated as glob-style patterns and that all
   templates matching the specified pattern are removed. By default,
   confirmation is required to proceed with the command unless the -f
   option is specified. This option must be used if the pattern specifier
   is used.

  .Notes
    NAME: Remove-3parVv_Ld_Cpg_Templates
    LASTEDIT 29-07-2019 10:50:32
    KEYWORDS: Remove-3parVv_Ld_Cpg_Templates
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Template_Name,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Pat,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Remove-3parVv_Ld_Cpg_Templates - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Remove-3parVv_Ld_Cpg_Templates since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Remove-3parVv_Ld_Cpg_Templates since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " removetemplate -f "

 if($Pat)
 {
	$Cmd += " -pat "
 }

 if($Template_Name)
 {
	$Cmd += " $Template_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Remove-3parVv_Ld_Cpg_Templates command -->" INFO: 
 
 Return $Result
} ##  End-of Remove-3parVv_Ld_Cpg_Templates

##########################################################################
####################### FUNCTION Set-3parTemplate ########################
##########################################################################
Function Set-3parTemplate()
{
<#
  .SYNOPSIS
   Set-3parTemplate - Add, modify or remove template properties

  .DESCRIPTION
   Note : This cmdlet (Set-3parTemplate) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Template) instead.
  
   The Set-3parTemplate command modifies the properties of existing templates.

  .EXAMPLE
	In the following example, template vvtemp1 is modified to support the
	availability of data should a drive magazine fail (mag) and to use the
	the stale_ss policy:

	Set-3parTemplat -Option_Value " -ha mag -pol stale_ss v" -Template_Name vtemp1

  .EXAMPLE 
	In the following example, the -nrw and -ha mag options are added to the
	template template1, and the -t option is removed:

	Set-3parTemplat -Option_Value "-nrw -ha mag -remove -t" -Template_Name template1
   
  .PARAMETER Option_Value
	Indicates the specified options and their values (if any) are added to
	an existing template. The specified option replaces the existing option
	in the template. For valid options, refer to createtemplate command.

  .PARAMETER Template_Name
	Specifies the name of the template to be modified, using up to 31 characters.

  .PARAMETER Remove
   Indicates that the option(s) that follow -remove are removed from the
   existing template. When specifying an option for removal, do not specify
   the option's value. For valid options, refer to createtemplate command.

  .Notes
    NAME: Set-3parTemplate
    LASTEDIT 29-07-2019 11:15:22
    KEYWORDS: Set-3parTemplate
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param( 
	[Parameter(Position=0, Mandatory=$True)]
	[System.String]
	$Option_Value,

	[Parameter(Position=1, Mandatory=$True)]
	[System.String]
	$Template_Name,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Remove,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parTemplate - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parTemplate since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parTemplate since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " settemplate -f "

 if($Remove)
 {
	$Cmd += " -remove $Remove "
 }

 if($Option_Value)
 {
	$Cmd += " $Option_Value "
 }

 if($Template_Name)
 {
  $Cmd += " $Template_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parTemplate command -->" INFO:
 
 Return $Result
} ##  End-of Set-3parTemplate

##########################################################################
################## FUNCTION Update-3parVvProperties ######################
##########################################################################
Function Update-3parVvProperties()
{
<#
  .SYNOPSIS
   Update-3parVvProperties - Change the properties associated with a virtual volume.

  .DESCRIPTION
   Note : This cmdlet (Update-3parVvProperties) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-VvProperties) instead.
  
   The Update-3parVvProperties command changes the properties associated with a virtual volume. Use
   the Update-3parVvProperties to modify volume names, volume policies, allocation warning and
   limit levels, and the volume's controlling common provisioning group (CPG).

  .EXAMPLE  
	The following example sets the policy of virtual volume vv1 to no_stale_ss.
	Update-3parVvProperties -Pol "no_stale_ss" -Vvname vv1

  .EXAMPLE
	Use the command to change the name:
	cli% setvv -name newtest test

  .EXAMPLE
	The following example modifies the WWN of virtual volume vv1
	Update-3parVvProperties -Wwn "50002AC0001A0024" -Vvname vv1

  .EXAMPLE
	The following example modifies the udid value for virtual volume vv1.
	Update-3parVvProperties -Udid "1715" -Vvname vv1
  
  .PARAMETER Vvname  
	Specifies the virtual volume name or all virtual volumes that match the
	pattern specified, using up to 31 characters. The patterns are glob-
	style patterns (see help on sub, globpat). Valid characters include
	alphanumeric characters, periods, dashes, and underscores.

  .PARAMETER Name
   Specifies that the name of the virtual volume be changed to a new name (
   as indicated by the <new_name> specifier) that uses up to 31 characters.

  .PARAMETER Wwn
   Specifies that the WWN of the virtual volume be changed to a new WWN as
   indicated by the <new_wwn> specifier. If <new_wwn> is set to "auto", the
   system will automatically choose the WWN based on the system serial
   number, the volume ID, and the wrap counter. This option is not allowed
   for the admitted volume before it is imported, or while the import process
   is taking place.
   
   Only one of the following three options can be specified:

  .PARAMETER Udid
   Specifies the user defined identifier for VVs for OpenVMS hosts. Udid
   value should be between 0 to 65535 and can be identical for several VVs.

  .PARAMETER Clrrsv
   Specifies that all reservation keys (i.e. registrations) and all
   persistent reservations on the virtual volume are cleared.

  .PARAMETER Clralua
   Restores ALUA state of the virtual volume to ACTIVE/OPTIMIZED state.
   In ACTIVE/OPTIMIZED state hosts will have complete access to the volume.

  .PARAMETER Exp
   Specifies the relative time from the current time that volume will
   expire. <time> is a positive integer value and in the range of
   1 minute - 1825 days. Time can be specified in days, hours, or
   minutes.  Use "d" or "D" for days, "h" or "H" for hours, or "m" or "M"
   for minutes following the entered time value.
   To remove the expiration time for the volume, enter 0 for <time>.

  .PARAMETER Comment
   Specifies any additional information up to 511 characters for the
   volume. Use -comment "" to remove the comments.

  .PARAMETER Retain
   Specifies the amount of time, relative to the current time, that the
   volume will be retained. <time> is a positive integer value and in the
   range of 1 minute - 1825 days. Time can be specified in days, hours, or
   minutes.  Use "d" or "D" for days, "h" or "H" for hours, or "m" or "M"
   for minutes following the entered time value.
   Note: If the volume is not in any domain, then its retention time
   cannot exceed the value of the system's VVRetentionTimeMax. The default
   value for the system's VVRetentionTimeMax is 14 days. If the volume
   belongs to a domain, then its retention time cannot exceed the value of
   the domain's VVRetentionTimeMax, if set. The retention time cannot be
   removed or reduced once it is set. If the volume has its retention time
   set, it cannot be removed within its retention time. If both expiration
   time and retention time are specified, then the retention time cannot
   be longer than the expiration time.
   This option requires the HPE 3PAR Virtual Lock license. Contact your
   local service provider for more information.

  .PARAMETER Pol
   Specifies the following policies that the created virtual volume follows.
   
  .PARAMETER Snp_cpg
   Specifies that the volume snapshot space is to be provisioned from the
   specified CPG. If no snp_cpg is currently defined, or no snapshots exist
   for the volume, the snp_cpg may be set to any CPG.

  .PARAMETER Snp_aw
   Enables a snapshot space allocation warning. A warning alert is
   generated when the reserved snapshot space of the VV
   exceeds the indicated percentage of the VV size.

  .PARAMETER Snp_al
   Sets a snapshot space allocation limit. The snapshot space of the
   VV is prevented from growing beyond the indicated
   percentage of the virtual volume size.
  
  The following options can only be used on thinly provisioned volumes:

  .PARAMETER Usr_aw
   This option enables user space allocation warning. Generates a warning
   alert when the user data space of the TPVV exceeds the specified
   percentage of the virtual volume size.

  .PARAMETER Usr_al
   Indicates the user space allocation limit. The user space of the TPVV
   is prevented from growing beyond the indicated percentage of the virtual
   volume size. After this limit is reached, any new writes to the virtual
   volume will fail.

  .PARAMETER Spt
   Defines the virtual volume geometry sectors per track value that is
   reported to the hosts through the SCSI mode pages. The valid range is
   between 4 to 8192 and the default value is 304.

  .PARAMETER Hpc
   Allows you to define the virtual volume geometry heads per cylinder
   value that is reported to the hosts though the SCSI mode pages. The
   valid range is between 1 to 255 and the default value is 8.

  .Notes
    NAME: Update-3parVvProperties
    LASTEDIT 29-07-2019 11:30:24
    KEYWORDS: Update-3parVvProperties
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Name,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Wwn,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Udid,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Clrrsv,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Clralua,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Exp,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Comment,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Retain,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Pol,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Snp_cpg,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Snp_aw,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$Snp_al,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$Usr_aw,

	[Parameter(Position=13, Mandatory=$false)]
	[System.String]
	$Usr_al,

	[Parameter(Position=14, Mandatory=$false)]
	[System.String]
	$Spt,

	[Parameter(Position=15, Mandatory=$false)]
	[System.String]
	$Hpc,

	[Parameter(Position=16, Mandatory=$True)]
	[System.String]
	$Vvname,

	[Parameter(Position=17, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parVvProperties - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parVvProperties since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parVvProperties since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " setvv -f "

 if($Name)
 {
	$Cmd += " -name $Name "
 }

 if($Wwn)
 {
	$Cmd += " -wwn $Wwn "
 }

 if($Udid)
 {
	$Cmd += " -udid $Udid "
 }

 if($Clrrsv)
 {
	$Cmd += " -clrrsv "
 }

 if($Clralua)
 {
	$Cmd += " -clralua "
 }

 if($Exp)
 {
	$Cmd += " -exp $Exp "
 }

 if($Comment)
 {
	$Cmd += " -comment $Comment "
 }

 if($Retain)
 {
	$Cmd += " -retain $Retain "
 }

 if($Pol)
 {
	$Cmd += " -pol $Pol "
 }

 if($Snp_cpg)
 {
	$Cmd += " -snp_cpg $Snp_cpg "
 }

 if($Snp_aw)
 {
	$Cmd += " -snp_aw $Snp_aw "
 }

 if($Snp_al)
 {
	$Cmd += " -snp_al $Snp_al "
 }

 if($Usr_aw)
 {
	$Cmd += " -usr_aw $Usr_aw "
 }

 if($Usr_al)
 {
	$Cmd += " -usr_al $Usr_al "
 }

 if($Spt)
 {
	$Cmd += " -spt $Spt "
 }

 if($Hpc)
 {
	$Cmd += " -hpc $Hpc "
 }

 if($Pol)
 {
	$Cmd += " -pol $Pol "
 }

 if($Vvname)
 {
  $Cmd += " $Vvname "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Update-3parVvProperties command -->" INFO:
 
 Return $Result
} ##  End-of Update-3parVvProperties

##########################################################################
################### FUNCTION Update-3parVvSetProperties ##################
##########################################################################
Function Update-3parVvSetProperties()
{
<#
  .SYNOPSIS
   Update-3parVvSetProperties - set parameters for a Virtual Volume set

  .DESCRIPTION
   Note : This cmdlet (Update-3parVvSetProperties) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-VvSetProperties) instead.
  
   The Update-3parVvSetProperties command sets the parameters and modifies the properties of
   a Virtual Volume(VV) set.

  .EXAMPLE
   Update-3parVvSetProperties
  
  .PARAMETER Setname
   Specifies the name of the vv set to modify.

  .PARAMETER Comment
   Specifies any comment or additional information for the set. The
   comment can be up to 255 characters long. Unprintable characters are
   not allowed.

  .PARAMETER Name
   Specifies a new name for the VV set using up to 27 characters.

  .Notes
    NAME: Update-3parVvSetProperties
    LASTEDIT 29-07-2019 15:34:37
    KEYWORDS: Update-3parVvSetProperties
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Comment,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Name,

	[Parameter(Position=2, Mandatory=$True)]
	[System.String]
	$Setname,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parVvSetProperties - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parVvSetProperties since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parVvSetProperties since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " setvvset "

 if($Comment)
 {
	$Cmd += " -comment $Comment "
 }

 if($Name)
 {
	$Cmd += " -name $Name "
 }

 if($Setname)
 {
	$Cmd += " Setname "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Update-3parVvSetProperties command -->" INFO: 
 
 Return $Result
} ##  End-of Update-3parVvSetProperties


##########################################################################
######################### FUNCTION Get-3parLD ############################
##########################################################################
Function Get-3parLD()
{
<#
  .SYNOPSIS
   Get-3parLD - Show information about logical disks (LDs) in the system.

  .DESCRIPTION
   Note : This cmdlet (Get-3parLD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-LD) instead.
  
   The Get-3parLD command displays configuration information about the system's
   LDs.

  .EXAMPLE

  .PARAMETER Cpg
   Requests that only LDs in common provisioning groups (CPGs) that match
   the specified CPG names or patterns be displayed. Multiple CPG names or
   patterns can be repeated using a comma-separated list .

  .PARAMETER Vv
   Requests that only LDs mapped to virtual volumes that match and of the
   specified names or patterns be displayed. Multiple volume names or
   patterns can be repeated using a comma-separated list .

  .PARAMETER Domain
   Only shows LDs that are in domains with names that match any of the
   names or specified patterns. Multiple domain names or patterns can be
   repeated using a comma separated list .

  .PARAMETER Degraded
   Only shows LDs with degraded availability.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
	   Sort in increasing order (default).
	   dec
	   Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .PARAMETER D
   Requests that more detailed layout information is displayed.

  .PARAMETER Ck
   Requests that checkld information is displayed.

  .PARAMETER P
   Requests that policy information about the LD is displayed.

  .PARAMETER State
   Requests that the detailed state information is displayed.
   This is the same as s.

  .Notes
    NAME: Get-3parLD
    LASTEDIT 30-07-2019 13:04:38
    KEYWORDS: Get-3parLD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Cpg,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Vv,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Domain,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Degraded,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=5, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$Ck,

	[Parameter(Position=7, Mandatory=$false)]
	[switch]
	$P,

	[Parameter(Position=8, Mandatory=$false)]
	[switch]
	$State,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$LD_Name,

	[Parameter(Position=10, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parLD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parLD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parLD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showld "

 if($Cpg)
 {
	$Cmd += " -cpg $Cpg "
 }

 if($Vv)
 {
	$Cmd += " -vv $Vv "
 }

 if($Domain)
 {
	$Cmd += " -domain $Domain "
 }

 if($Degraded)
 {
	$Cmd += " -degraded "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 if($Ck)
 {
	$Cmd += " -ck "
 }

 if($P)
 {
	$Cmd += " -p "
 }

 if($State)
 {
	$Cmd += " -state "
 }

 if($LD_Name)
 {
  $Cmd += " $LD_Name "
 }

$Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Get-3parLD command -->" INFO: 

 if($Result.count -gt 1)
 {			
	if($Cpg)
	{	
		Return  $Result	
	}
	else
	{
		$tempFile = [IO.Path]::GetTempFileName()
		$LastItem = $Result.Count - 3   
		
		foreach ($S in  $Result[0..$LastItem] )
		{
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")
			$s= [regex]::Replace($s,"^ ","")			
			$s= [regex]::Replace($s,"^ ","")		
			$s= [regex]::Replace($s," +",",")			
			$s= [regex]::Replace($s,"-","")			
			$s= $s.Trim()			
			
			Add-Content -Path $tempfile -Value $s				
		}
		Import-Csv $tempFile 
		del $tempFile
	}
 }
 else
 {			
	Return  $Result
 }
 
} ##  End-of Get-3parLD

##########################################################################
####################### FUNCTION Get-3parLDChunklet ######################
##########################################################################
Function Get-3parLDChunklet()
{
<#
  .SYNOPSIS
   Get-3parLDChunklet - Show chunklet mapping for a logical disk.

  .DESCRIPTION
   Note : This cmdlet (Get-3parLDChunklet) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-LDChunklet) instead.
  
   The Get-3parLDChunklet command displays configuration information about the chunklet
   mapping for one logical disk (LD).

  .EXAMPLE

  .PARAMETER Degraded
   Shows only the chunklets in sets that cause the logical disk
   availability to be degraded. For example, if the logical disk normally
   has cage level availability, but one set has two chunklets in the same
   cage, then the chunklets in that set are shown. This option cannot be
   specified with option -lformat or -linfo.

  .PARAMETER Lformat
   Shows the logical disk's row and set layout on the physical disk, where
   the line format <form> is one of:
   row - One line per logical disk row.
   set - One line per logical disk set.

  .PARAMETER Linfo
   Specifies the information shown for each logical disk chunklet, where
   <info> can be one of:
   pdpos - Shows the physical disk position (default).
   pdid  - Shows the physical disk ID.
   pdch  - Shows the physical disk chunklet.
   If multiple <info> fields are specified, each corresponding field will
   be shown separately by a dash (-).

  .Notes
    NAME: Get-3parLDChunklet
    LASTEDIT 30-07-2019 14:45:58
    KEYWORDS: Get-3parLDChunklet
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Degraded,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$Lformat,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Linfo,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$LD_Name,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parLDChunklet - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parLDChunklet since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parLDChunklet since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showldch "

 if($Degraded)
 {
	$Cmd += " -degraded "
 }

 if($Lformat)
 {
	$Cmd += " -lformat $Lformat "
 }

 if($Linfo)
 {
	$Cmd += " -linfo $Linfo "
 }

 if($LD_Name)
 {
	$Cmd += " $LD_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Get-3parLDChunklet command -->" INFO: 
 
 if($Result.count -gt 1)
 {	
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count - 3 
	$FristCount = 0
	if($Lformat -Or $Linfo)
	{
		$FristCount = 1
	}
	
	foreach ($S in  $Result[$FristCount..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Get-3parLDChunklet

##########################################################################
################### FUNCTION Show-3parLdMappingToVvs #####################
##########################################################################
Function Show-3parLdMappingToVvs()
{
<#
  .SYNOPSIS
   Show-3parLdMappingToVvs - Show mapping from a logical disk to virtual volumes.

  .DESCRIPTION
   Note : This cmdlet (Show-3parLdMappingToVvs) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-LdMappingToVvs) instead.
  
   The Show-3parLdMappingToVvs command displays the mapping from a logical (LD) disk to
   virtual volumes (VVs).

  .EXAMPLE
	The following example displays the region of logical disk v0.usr.0 that is used for a virtual volume:
	Show-3parLdMappingToVvs -LD_Name v0.usr.0
   
  .PARAMETER LD_Name
   Specifies the logical disk name.
   
  .Notes
    NAME: Show-3parLdMappingToVvs
    LASTEDIT 01-08-2019 10:24:36
    KEYWORDS: Show-3parLdMappingToVvs
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$True)]
	[System.String]
	$LD_Name,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parLdMappingToVvs - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parLdMappingToVvs since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parLdMappingToVvs since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showldmap "

 if($LD_Name)
 {
	$Cmd += " $LD_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parLdMappingToVvs command -->" INFO: 
 if($Result.count -gt 1)
 {	
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count  
		
	foreach ($S in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parLdMappingToVvs

##########################################################################
##################### FUNCTION Show-3parVvMappedToPD #####################
##########################################################################
Function Show-3parVvMappedToPD()
{
<#
  .SYNOPSIS
   Show-3parVvMappedToPD - Show which virtual volumes are mapped to a physical disk (or a chunklet in that physical disk).

  .DESCRIPTION
   Note : This cmdlet (Show-3parVvMappedToPD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-VvMappedToPD) instead.
  
   The Show-3parVvMappedToPD command displays the virtual volumes that are mapped to a
   particular physical disk.

  .EXAMPLE
   Show-3parVvMappedToPD -PD_ID 4

  .EXAMPLE
   Show-3parVvMappedToPD -Sum -PD_ID 4
  
  .EXAMPLE
   Show-3parVvMappedToPD -P -Nd 1 -PD_ID 4
  
  .PARAMETER PD_ID
   Specifies the physical disk ID using an integer. This specifier is not
	required if -p option is used, otherwise it must be used at least once
	on the command line.
  
  .PARAMETER Sum
   Shows number of chunklets used by virtual volumes for different
   space types for each physical disk.

  .PARAMETER P
   Specifies a pattern to select <PD_ID> disks.
   
   The following arguments can be specified as patterns for this option:
   An item is specified as an integer, a comma-separated list of integers,
   or a range of integers specified from low to high.

  .PARAMETER Nd
   Specifies one or more nodes. Nodes are identified by one or more
   integers (item). Multiple nodes are separated with a single comma
   (e.g. 1,2,3). A range of nodes is separated with a hyphen (e.g. 0-
   7). The primary path of the disks must be on the specified node(s).

  .PARAMETER St
   Specifies one or more PCI slots. Slots are identified by one or more
   integers (item). Multiple slots are separated with a single comma
   (e.g. 1,2,3). A range of slots is separated with a hyphen (e.g. 0-
   7). The primary path of the disks must be on the specified PCI
   slot(s).

  .PARAMETER Pt
   Specifies one or more ports. Ports are identified by one or more
   integers (item). Multiple ports are separated with a single comma
   (e.g. 1,2,3). A range of ports is separated with a hyphen (e.g. 0-
   4). The primary path of the disks must be on the specified port(s).

  .PARAMETER Cg
   Specifies one or more drive cages. Drive cages are identified by one
   or more integers (item). Multiple drive cages are separated with a
   single comma (e.g. 1,2,3). A range of drive cages is separated with
   a hyphen (e.g. 0-3). The specified drive cage(s) must contain disks.

  .PARAMETER Mg
   Specifies one or more drive magazines. The "1." or "0." displayed
   in the CagePos column of showpd output indicating the side of the
   cage is omitted when using the -mg option. Drive magazines are
   identified by one or more integers (item). Multiple drive magazines
   are separated with a single comma (e.g. 1,2,3). A range of drive
   magazines is separated with a hyphen(e.g. 0-7). The specified drive
   magazine(s) must contain disks.

  .PARAMETER Pn
   Specifies one or more disk positions within a drive magazine. Disk
   positions are identified by one or more integers (item). Multiple
   disk positions are separated with a single comma(e.g. 1,2,3). A
   range of disk positions is separated with a hyphen(e.g. 0-3). The
   specified position(s) must contain disks.

  .PARAMETER Dk
   Specifies one or more physical disks. Disks are identified by one or
   more integers(item). Multiple disks are separated with a single
   comma (e.g. 1,2,3). A range of disks is separated with a hyphen(e.g.
   0-3).  Disks must match the specified ID(s).

  .PARAMETER Tc_gt
   Specifies that physical disks with total chunklets greater than the
   number specified be selected.

  .PARAMETER Tc_lt
   Specifies that physical disks with total chunklets less than the
   number specified be selected.

  .PARAMETER Fc_gt
   Specifies that physical disks with free chunklets greater than the
   number specified be selected.

  .PARAMETER Fc_lt
   Specifies that physical disks with free chunklets less than the
   number specified be selected.

  .PARAMETER Devid
   Specifies that physical disks identified by their models be
   selected. Models can be specified in a comma-separated list.
   Models can be displayed by issuing the "showpd -i" command.

  .PARAMETER Devtype
   Specifies that physical disks must have the specified device type
   (FC for Fast Class, NL for Nearline, SSD for Solid State Drive)
   to be used. Device types can be displayed by issuing the "showpd"
   command.

  .PARAMETER Rpm
   Drives must be of the specified relative performance metric, as
   shown in the "RPM" column of the "showpd" command.
   The number does not represent a rotational speed for the drives
   without spinning media (SSD). It is meant as a rough estimation of
   the performance difference between the drive and the other drives
   in the system.  For FC and NL drives, the number corresponds to
   both a performance measure and actual rotational speed. For SSD
   drives, the number is to be treated as a relative performance
   benchmark that takes into account I/O's per second, bandwidth and
   access time.
   Disks that satisfy all of the specified characteristics are used.
   For example -p -fc_gt 60 -fc_lt 230 -nd 2 specifies all the disks that
   have greater than 60 and less than 230 free chunklets and that are
   connected to node 2 through their primary path.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
	   Sort in increasing order (default).
	   dec
	   Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Show-3parVvMappedToPD
    LASTEDIT 01-08-2019 10:41:55
    KEYWORDS: Show-3parVvMappedToPD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Sum,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$P,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Nd,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$St,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Pt,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Cg,

	[Parameter(Position=6, Mandatory=$false)]
	[System.String]
	$Mg,

	[Parameter(Position=7, Mandatory=$false)]
	[System.String]
	$Pn,

	[Parameter(Position=8, Mandatory=$false)]
	[System.String]
	$Dk,

	[Parameter(Position=9, Mandatory=$false)]
	[System.String]
	$Tc_gt,

	[Parameter(Position=10, Mandatory=$false)]
	[System.String]
	$Tc_lt,

	[Parameter(Position=11, Mandatory=$false)]
	[System.String]
	$Fc_gt,

	[Parameter(Position=12, Mandatory=$false)]
	[System.String]
	$Fc_lt,

	[Parameter(Position=13, Mandatory=$false)]
	[System.String]
	$Devid,

	[Parameter(Position=14, Mandatory=$false)]
	[System.String]
	$Devtype,

	[Parameter(Position=15, Mandatory=$false)]
	[System.String]
	$Rpm,

	[Parameter(Position=16, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=17, Mandatory=$false)]
	[System.String]
	$PD_ID,

	[Parameter(Position=18, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parVvMappedToPD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parVvMappedToPD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parVvMappedToPD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showpdvv "

 if($Sum)
 {
	$Cmd += " -sum "
 }

 if($P)
 {
	$Cmd += " -p "
 }

 if($Nd)
 {
	$Cmd += " -nd $Nd "
 }

 if($St)
 {
	$Cmd += " -st $St "
 }

 if($Pt)
 {
	$Cmd += " -pt $Pt "
 }

 if($Cg)
 {
	$Cmd += " -cg $Cg "
 }

 if($Mg)
 {
	$Cmd += " -mg $Mg "
 }

 if($Pn)
 {
	$Cmd += " -pn $Pn "
 }

 if($Dk)
 {
	$Cmd += " -dk $Dk "
 }

 if($Tc_gt)
 {
	$Cmd += " -tc_gt $Tc_gt "
 }

 if($Tc_lt)
 {
	$Cmd += " -tc_lt $Tc_lt "
 }

 if($Fc_gt)
 {
	$Cmd += " -fc_gt $Fc_gt "
 }

 if($Fc_lt)
 {
	$Cmd += " -fc_lt $Fc_lt "
 }

 if($Devid)
 {
	$Cmd += " -devid $Devid "
 }

 if($Devtype)
 {
	$Cmd += " -devtype $Devtype "
 }

 if($Rpm)
 {
	$Cmd += " -rpm $Rpm "
 }

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }
 
 if($PD_ID)
 {
  $Cmd += " PD_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parVvMappedToPD command -->" INFO: 
 if($Result.count -gt 1)
 {
	if($Result -match "SYNTAX" )
	{
		Return $Result
	}
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count
		
	foreach ($S in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parVvMappedToPD

##########################################################################
######################### FUNCTION Show-3parRSV ##########################
##########################################################################
Function Show-3parRSV()
{
<#
  .SYNOPSIS
   Show-3parRSV - Show information about scsi reservations of virtual volumes (VVs).

  .DESCRIPTION
   Note : This cmdlet (Show-3parRSV) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-RSV) instead.
  
   The Show-3parRSV command displays SCSI reservation and registration information
   for Virtual Logical Unit Numbers (VLUNs) bound for a specified port.

  .EXAMPLE
  
  .PARAMETER VV_Name
   Specifies the virtual volume name, using up to 31 characters.
   
  .PARAMETER SCSI3
   Specifies that either SCSI-3 persistent reservation or SCSI-2
   reservation information is displayed. If this option is not specified,
   information about both scsi2 and scsi3 reservations will be shown.
   
  .PARAMETER SCSI2
   Specifies that either SCSI-3 persistent reservation or SCSI-2
   reservation information is displayed. If this option is not specified,
   information about both scsi2 and scsi3 reservations will be shown.

  .PARAMETER Host
   Displays reservation and registration information only for virtual
   volumes that are visible to the specified host.

  .Notes
  .Notes
    NAME: Show-3parRSV
    LASTEDIT 01-08-2019 10:59:24
    KEYWORDS: Show-3parRSV
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$SCSI3,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$SCSI2,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Host,
	
	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$VV_Name,

	[Parameter(Position=4, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parRSV - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parRSV since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parRSV since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
   write-debuglog "$plinkresult"
   Return $plinkresult
 }

	$Cmd = " showrsv "

 if($SCSI3)
 {
	$Cmd += " -l scsi3 "
 }
 
  if($SCSI2)
 {
	$Cmd += " -l scsi2 "
 }

 if($Host)
 {
	$Cmd += " -host $Host "
 }
 
 if($VV_Name)
 {
	$Cmd += " $VV_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parRSV command -->" INFO: 
 if($Result.count -gt 1)
 {	
	if($Result -match "SYNTAX" )
	{
		Return $Result
	}
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count
		
	foreach ($S in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parRSV

##########################################################################
####################### FUNCTION Show-3parTemplate #######################
##########################################################################
Function Show-3parTemplate()
{
<#
  .SYNOPSIS
   Show-3parTemplate - Show templates.

  .DESCRIPTION
   Note : This cmdlet (Show-3parTemplate) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-Template) instead.
  
   The Show-3parTemplate command displays existing templates that can be used for
   Virtual Volume (VV), Logical Disk (LD) Common Provisioning Group (CPG) creation.

  .EXAMPLE

  .PARAMETER T
   Specifies that the template type displayed is a VV, LD, or CPG template.

  .PARAMETER Fit
   Specifies that the properties of the template is displayed to fit within
   80 character lines.
   
  .PARAMETER Template_name_or_pattern
   Specifies the name of a template, using up to 31 characters or
    glob-style pattern for matching multiple template names. If not
    specified, all templates are displayed.

  .Notes
    NAME: Show-3parTemplate
    LASTEDIT 01-08-2019 11:16:53
    KEYWORDS: Show-3parTemplate
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$T,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Fit,

	[Parameter(Position=2, Mandatory=$false)]
	[System.String]
	$Template_name_or_pattern,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parTemplate - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parTemplate since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parTemplate since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showtemplate "

 if($T)
 {
	$Val = "vv","cpg" ,"ld"
	if($Val -eq $T.ToLower())
	{
		$Cmd += " -t $T "			
	}
	else
	{
		return " Illegal template type LDA, must be either vv,cpg or ld "
	}
 }

 if($Fit)
 {
	$Cmd += " -fit "
 }

 if($Template_name_or_pattern)
 {
	$Cmd += " $Template_name_or_pattern "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parTemplate command -->" INFO: 
 if($Result.count -gt 1)
 {	
	if($Result -match "SYNTAX" )
	{
		Return $Result
	}
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count
		
	foreach ($S in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parTemplate

##########################################################################
####################### FUNCTION Show-3parVvMapping ######################
##########################################################################
Function Show-3parVvMapping()
{
<#
  .SYNOPSIS
   Show-3parVvMapping - Show mapping from the virtual volume to logical disks.

  .DESCRIPTION
   Note : This cmdlet (Show-3parVvMapping) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-VvMapping) instead.
  
   The Show-3parVvMapping command displays information about how virtual volume regions
   are mapped to logical disks.

  .EXAMPLE
   None.
   
  .PARAMETER VV_Name
   The virtual volume name.

  .Notes
    NAME: Show-3parVvMapping
    LASTEDIT 01-08-2019 12:00:25
    KEYWORDS: Show-3parVvMapping
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$True)]
	[System.String]
	$VV_Name,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parVvMapping - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parVvMapping since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parVvMapping since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showvvmap "

 if($VV_Name)
 {
	$Cmd += " $VV_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parVvMapping command -->" INFO: 
 if($Result.count -gt 1)
 {	
	if($Result -match "SYNTAX" )
	{
		Return $Result
	}
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count
		
	foreach ($S in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parVvMapping

##########################################################################
###################### FUNCTION Show-3parVvpDistribution #################
##########################################################################
Function Show-3parVvpDistribution()
{
<#
  .SYNOPSIS
   Show-3parVvpDistribution - Show virtual volume distribution across physical disks.

  .DESCRIPTION
   Note : This cmdlet (Show-3parVvpDistribution) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Show-VvpDistribution) instead.
  
   The Show-3parVvpDistribution command displays virtual volume (VV) distribution across physical
   disks (PD).

  .EXAMPLE
  
  .PARAMETER VV_Name
	Specifies the virtual volume with the specified name (31 character
	maximum) or matches the glob-style pattern for which information is
	displayed. This specifier can be repeated to display configuration
	information about multiple virtual volumes. This specifier is not
	required. If not specified, configuration information for all virtual
	volumes in the system is displayed.

  .PARAMETER Sortcol
   Sorts command output based on column number (<col>). Columns are
   numbered from left to right, beginning with 0. At least one column must
   be specified. In addition, the direction of sorting (<dir>) can be
   specified as follows:
	   inc
	   Sort in increasing order (default).
	   dec
	   Sort in decreasing order.
   Multiple columns can be specified and separated by a colon (:). Rows
   with the same information in them as earlier columns will be sorted
   by values in later columns.

  .Notes
    NAME: Show-3parVvpDistribution
    LASTEDIT 01-08-2019 12:05:34
    KEYWORDS: Show-3parVvpDistribution
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$Sortcol,

	[Parameter(Position=1, Mandatory=$false)]
	[System.String]
	$VV_Name,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Show-3parVvpDistribution - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Show-3parVvpDistribution since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Show-3parVvpDistribution since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showvvpd "

 if($Sortcol)
 {
	$Cmd += " -sortcol $Sortcol "
 }


 if($VV_Name)
 {
  $Cmd += " $VV_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Show-3parVvpDistribution command -->" INFO: 
 if($Result.count -gt 1)
 {	
	if($Result -match "SYNTAX" )
	{
		Return $Result
	}
	$tempFile = [IO.Path]::GetTempFileName()
	$LastItem = $Result.Count
		
	foreach ($S in  $Result[0..$LastItem] )
	{
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")
		$s= [regex]::Replace($s,"^ ","")			
		$s= [regex]::Replace($s,"^ ","")		
		$s= [regex]::Replace($s," +",",")			
		#$s= [regex]::Replace($s,"-","")			
		$s= $s.Trim()			
		
		Add-Content -Path $tempfile -Value $s				
	}
	Import-Csv $tempFile 
	del $tempFile	
 }
 else
 {			
	Return  $Result
 }
} ##  End-of Show-3parVvpDistribution

##########################################################################
########################## FUNCTION Start-3parLD #########################
##########################################################################
Function Start-3parLD()
{
<#
  .SYNOPSIS
   Start-3parLD - Start a logical disk (LD).  

  .DESCRIPTION
   Note : This cmdlet (Start-3parLD) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-LD) instead.
  
   The Start-3parLD command starts data services on a LD that has not yet been
   started.

  .EXAMPLE
   Start-3parLD -LD_Name xxx

  .PARAMETER LD_Name
   Specifies the LD name, using up to 31 characters.

  .PARAMETER Ovrd
   Specifies that the LD is forced to start, even if some underlying
   data is missing.

  .Notes
    NAME: Start-3parLD
    LASTEDIT 29-07-2019 15:45:13
    KEYWORDS: Start-3parLD
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Ovrd,

	[Parameter(Position=1, Mandatory=$True)]
	[System.String]
	$LD_Name,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Start-3parLD - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Start-3parLD since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Start-3parLD since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " startld "

 if($Ovrd)
 {
	$Cmd += " -ovrd "
 }

 if($LD_Name)
 {
	$Cmd += " $LD_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Start-3parLD command -->" INFO: 
 
 Return $Result
} ##  End-of Start-3parLD

##########################################################################
######################### FUNCTION Start-3parVv ##########################
##########################################################################
Function Start-3parVv()
{
<#
  .SYNOPSIS
   Start-3parVv - Start a virtual volume.

  .DESCRIPTION
   Note : This cmdlet (Start-3parVv) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Start-Vv) instead.
  
   The Start-3parVv command starts data services on a Virtual Volume (VV) that has
   not yet been started.

  .EXAMPLE
   Start-3parVv

  .PARAMETER VV_Name
   Specifies the VV name, using up to 31 characters.
   
  .PARAMETER Ovrd
   Specifies that the logical disk is forced to start, even if some
   underlying data is missing.

  .Notes
    NAME: Start-3parVv
    LASTEDIT 29-07-2019 15:49:06
    KEYWORDS: Start-3parVv
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Ovrd,

	[Parameter(Position=1, Mandatory=$True)]
	[System.String]
	$VV_Name,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Start-3parVv - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Start-3parVv since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Start-3parVv since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " startvv "

 if($Ovrd)
 {
	$Cmd += " -ovrd "
 }

 if($VV_Name)
 {
	$Cmd += " $VV_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Start-3parVv command -->" INFO: 
 
 Return $Result
} ##  End-of Start-3parVv

##########################################################################
################### FUNCTION Update-3parSnapSpace ########################
##########################################################################
Function Update-3parSnapSpace()
{
<#
  .SYNOPSIS
   Update-3parSnapSpace - Update the snapshot space usage accounting.

  .DESCRIPTION
   Note : This cmdlet (Update-3parSnapSpace) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-SnapSpace) instead.
  
   The Update-3parSnapSpace command starts a non-cancelable task to update the
   snapshot space usage accounting. The snapshot space usage displayed by
   "showvv -hist" is not necessarily the current usage and the SpaceCalcTime
   column will show when it was last calculated.  This command causes the
   system to start calculating current snapshot space usage.  If one or more
   VV names or patterns are specified, only the specified VVs will be updated.
   If none are specified, all VVs will be updated.

  .EXAMPLE
   None.

  .Notes
    NAME: Update-3parSnapSpace
    LASTEDIT 29-07-2019 15:56:20
    KEYWORDS: Update-3parSnapSpace
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param( 
	[Parameter(Position=0, Mandatory=$false)]
	[System.String]
	$VV_Name,

	[Parameter(Position=1, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parSnapSpace - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parSnapSpace since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parSnapSpace since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " updatesnapspace "

 if($VV_Name)
 {
	$Cmd += " $VV_Name "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Update-3parSnapSpace command -->" INFO: 
 
 Return $Result
} ##  End-of Update-3parSnapSpace

##########################################################################
######################## FUNCTION Add-3parHardware #######################
##########################################################################
Function Add-3parHardware()
{
<#
  .SYNOPSIS
   Add-3parHardware - Admit new hardware into the system.

  .DESCRIPTION
   Note : This cmdlet (Add-3parHardware) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Add-Hardware) instead.
  
   The Add-3parHardware command admits new hardware into the system. If new disks
   are discovered on any two-node HPE StoreServ system, tunesys will be
   started automatically to redistribute existing volumes to use the new
   capacity. This facility can be disabled using either the -notune
   option or setting the AutoAdmitTune system parameter to "no". On
   systems with more than two nodes, tunesys must always be run manually
   after disk installation.

  .EXAMPLE

  .PARAMETER Checkonly
   Only performs passive checks; does not make any changes.

  .PARAMETER F
   If errors are encountered, the Add-3parHardware command ignores them and
   continues. The messages remain displayed.

  .PARAMETER Nopatch
   Suppresses the check for drive table update packages for new
   hardware enablement.

  .PARAMETER Tune
   Always run tunesys to rebalance the system after new disks are
   discovered.

  .PARAMETER Notune
   Do not automatically run tunesys to rebalance the system after new
   disks are discovered.

  .Notes
    NAME: Add-3parHardware
    LASTEDIT 06-08-2019 11:38:29
    KEYWORDS: Add-3parHardware
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Checkonly,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$F,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Nopatch,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Tune,

	[Parameter(Position=4, Mandatory=$false)]
	[switch]
	$Notune,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Add-3parHardware - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Add-3parHardware since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Add-3parHardware since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " admithw "

 if($Checkonly)
 {
	$Cmd += " -checkonly "
 }

 if($F)
 {
	$Cmd += " -f "
 }

 if($Nopatch)
 {
	$Cmd += " -nopatch "
 }

 if($Tune)
 {
	$Cmd += " -tune "
 }

 if($Notune)
 {
	$Cmd += " -notune "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Add-3parHardware command -->" INFO:
 
 Return $Result
} ##  End-of Add-3parHardware

##########################################################################
####################### FUNCTION Set-3parMagazines #######################
##########################################################################
Function Set-3parMagazines()
{
<#
  .SYNOPSIS
   Set-3parMagazines - Take magazines or disks on or off loop.

  .DESCRIPTION
   Note : This cmdlet (Set-3parMagazines) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-Magazines) instead.
  
   The Set-3parMagazines command takes drive magazines, or disk drives within a
   magazine, either on-loop or off-loop. Use this command when replacing a
   drive magazine or disk drive within a drive magazine.

  .EXAMPLE
	Set-3parMagazines -Offloop -Cage_name "xxx" -Magazine "xxx"
	
  .EXAMPLE
	Set-3parMagazines -Offloop -Port "Both" -Cage_name "xxx" -Magazine "xxx"
  
  .PARAMETER Offloop
	Specifies that the specified drive magazine or disk drive is either
	taken off-loop or brought back on-loop.

  .PARAMETER Onloop
	Specifies that the specified drive magazine or disk drive is either
	taken off-loop or brought back on-loop.
  
  .PARAMETER Cage_name
	Specifies the name of the drive cage. Drive cage information can be
	viewed by issuing the showcage command.
  
  .PARAMETER Magazine
	Specifies the drive magazine number within the drive cage. Valid formats
	are <drive_cage_number>.<drive_magazine> or <drive_magazine> (for
	example 1.3 or 3, respectively).
  
  .PARAMETER Disk
   Specifies that the operation is performed on the disk as determined by
   its position within the drive magazine. If not specified, the operation
   is performed on the entire drive magazine.

  .PARAMETER Port
   Specifies that the operation is performed on port A, port B, or both A
   and B. If not specified, the operation is performed on both ports A and
   B.

  .PARAMETER F
   Specifies that the command is forced. If this option is not used, the
   command requires confirmation before proceeding with its operation.

  .Notes
    NAME: Set-3parMagazines
    LASTEDIT 07-08-2019 10:17:44
    KEYWORDS: Set-3parMagazines
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param( 
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Offloop,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Onloop,

	[Parameter(Position=2, Mandatory=$True)]
	[System.String]
	$Cage_name,

	[Parameter(Position=3, Mandatory=$True)]
	[System.String]
	$Magazine,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$Disk,

	[Parameter(Position=5, Mandatory=$false)]
	[System.String]
	$Port,

	[Parameter(Position=6, Mandatory=$false)]
	[switch]
	$F,

	[Parameter(Position=7, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parMagazines - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parMagazines since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parMagazines since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " controlmag "

 if($Offloop)
 {
	$Cmd += " offloop "
 }
 Elseif($Onloop)
 {
	$Cmd += " onloop "
 }
 else
 {
	Return "Select at least one from [ Offloop | Onloop ] "
 }

 if($Disk)
 {
	$Cmd += " -disk $Disk "
 }
 if($Port)
 {
	$Val = "A","B" ,"BOTH"
	if($Val -eq $T.ToLower())
	{
		$Cmd += " -port $Port.ToLower "			
	}
	else
	{
		return " Illegal Port value, must be either A,B or Both "
	}
 }

 if($F)
 {
	$Cmd += " -f "
 }

 if($Cage_name)
 {
	$Cmd += " $Cage_name "
 }

 if($Magazine)
 {
	$Cmd += " $Magazine "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parMagazines command -->" INFO: 
 
 Return $Result
} ##  End-of Set-3parMagazines

##########################################################################
##################### FUNCTION Set-3parServiceNodes ######################
##########################################################################
Function Set-3parServiceNodes()
{
<#
  .SYNOPSIS
   Set-3parServiceNodes - Prepare a node for service.

  .DESCRIPTION
   Note : This cmdlet (Set-3parServiceNodes) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Set-ServiceNodes) instead.
  
   The Set-3parServiceNodes command informs the system that a certain component will
   be replaced, and will cause the system to indicate the physical location
   of that component.

  .EXAMPLE
	Set-3parServiceNodes -Start -Nodeid 0

  .EXAMPLE
	Set-3parServiceNodes -Start -Pci 3 -Nodeid 0
	
  .PARAMETER Start
	Specifies the start of service on a node. If shutting down the node
	is required to start the service, the command will prompt for
	confirmation before proceeding further.

  .PARAMETER Status
	Displays the state of any active servicenode operations.

  .PARAMETER End
	Specifies the end of service on a node. If the node was previously
	halted for the service, this command will boot the node.
  
  .PARAMETER Ps
   Specifies which power supply will be placed into servicing-mode.
   Accepted values for <psid> are 0 and 1. For HPE 3PAR 600 series
   systems, this option is not supported, use servicecage for servicing
   the Power Cooling Battery Module (PCBM).

  .PARAMETER Pci
   Only the service LED corresponding to the PCI card in the specified
   slot will be illuminated. Accepted values for <slot> are 3 through 5
   for HPE 3PAR 600 series systems.

  .PARAMETER Fan
   Specifies which node fan will be placed into servicing-mode.
   For HPE 3PAR 600 series systems, this option is not supported,
   use servicecage for servicing the Power Cooling Battery Module (PCBM).

  .PARAMETER Bat
   Specifies that the node's battery backup unit will be placed into
   servicing-mode. For HPE 3PAR 600 series systems, this option is not
   supported, use servicecage for servicing the Power Cooling Battery
   Module (PCBM).

  .Notes
    NAME: Set-3parServiceNodes
    LASTEDIT 07-08-2019 10:50:29
    KEYWORDS: Set-3parServiceNodes
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	 [Parameter(Position=0, Mandatory=$True)]
	 [System.String]
	 $Nodeid,
	 
	 [Parameter(Position=1, Mandatory=$false)]
	 [switch]
	 $Start,
	 
	 [Parameter(Position=2, Mandatory=$false)]
	 [switch]
	 $Status,
	 
	 [Parameter(Position=3, Mandatory=$false)]
	 [switch]
	 $End,
	 
	 [Parameter(Position=4, Mandatory=$false)]
	 [System.String]
	 $Ps,

	 [Parameter(Position=5, Mandatory=$false)]
	 [System.String]
	 $Pci,

	 [Parameter(Position=6, Mandatory=$false)]
	 [System.String]
	 $Fan,

	 [Parameter(Position=7, Mandatory=$false)]
	 [switch]
	 $Bat,

	 [Parameter(Position=8, Mandatory=$false, ValueFromPipeline=$true)]
	 $SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Set-3parServiceNodes - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Set-3parServiceNodes since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Set-3parServiceNodes since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " servicenode "

 if($Start)
 {
	$Cmd += " start "
 }
 Elseif($Status)
 {
	$Cmd += " status "
 }
 Elseif($End)
 {
	$Cmd += " end "
 }
 else
 {
	Return "Select at least one from [ Start | Status | End]"
 }
 
 if($Ps)
 {
	$Cmd += " -ps $Ps "
 }

 if($Pci)
 {
	$Cmd += " -pci $Pci "
 }

 if($Fan)
 {
	$Cmd += " -fan $Fan "
 }

 if($Bat)
 {
	$Cmd += " -bat "
 }

 if($Nodeid)
 {
	$Cmd += " Nodeid "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Set-3parServiceNodes command -->" INFO:
 
 Return $Result
} ##  End-of Set-3parServiceNodes

##########################################################################
##################### FUNCTION Get-3parSystemPatch #######################
##########################################################################
Function Get-3parSystemPatch()
{
<#
  .SYNOPSIS
   Get-3parSystemPatch - Show what patches have been applied to the system.

  .DESCRIPTION
   Note : This cmdlet (Get-3parSystemPatch) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Get-SystemPatch) instead.
  
   The Get-3parSystemPatch command displays patches applied to a system.

  .EXAMPLE
	Get-3parSystemPatc
	
  .EXAMPLE
	Get-3parSystemPatc -Hist

  .PARAMETER Hist
   Provides an audit log of all patches and updates that have been applied to the system.

  .PARAMETER D
   When used with the -hist option, shows detailed history information including
   the username who installed each package. If -d is used with a patch specification,
   it shows detailed patch information. Otherwise it shows detailed information on the
   currently installed patches.

  .Notes
    NAME: Get-3parSystemPatch
    LASTEDIT 07-08-2019 11:03:49
    KEYWORDS: Get-3parSystemPatch
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Hist,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$D,

	[Parameter(Position=2, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Get-3parSystemPatch - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Get-3parSystemPatch since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Get-3parSystemPatch since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " showpatch "

 if($Hist)
 {
	$Cmd += " -hist "
 }

 if($D)
 {
	$Cmd += " -d "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Get-3parSystemPatch command -->" INFO: 
 
 Return $Result
} ##  End-of Get-3parSystemPatch

##########################################################################
##################### FUNCTION Reset-3parSystemNode ######################
##########################################################################
Function Reset-3parSystemNode()
{
<#
  .SYNOPSIS
   Reset-3parSystemNode - Halts or reboots a system node.

  .DESCRIPTION
   Note : This cmdlet (Reset-3parSystemNode) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Reset-SystemNode) instead.
  
   The Reset-3parSystemNode command shuts down a system node.

  .EXAMPLE
   Reset-3parSystemNode -Halt -Node_ID 0.
   
  .PARAMETER Node_ID
	Specifies the node, identified by its ID, to be shut down.
   
  .PARAMETER Halt
	Specifies that the nodes are halted after shutdown.
	
  .PARAMETER Reboot
	Specifies that the nodes are restarted after shutdown.
	
  .PARAMETER Check
	Checks if multipathing is correctly configured so that it is
	safe to halt or reboot the specified node. An error will be
	generated if the loss of the specified node would interrupt
	connectivity to the volume and cause I/O disruption.
	
  .PARAMETER Restart
	Specifies that the storage services should be restarted.
   
  .Notes
    NAME: Reset-3parSystemNode
    LASTEDIT 07-08-2019 11:10:25
    KEYWORDS: Reset-3parSystemNode
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Halt,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Reboot,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Check,

	[Parameter(Position=3, Mandatory=$false)]
	[switch]
	$Restart,

	[Parameter(Position=4, Mandatory=$True)]
	[System.String]
	$Node_ID,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Reset-3parSystemNode - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Reset-3parSystemNode since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Reset-3parSystemNode since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " shutdownnode "

 if($Halt)
 {
	$Cmd += " halt "
 }
 Elseif($Reboot)
 {
	$Cmd += " reboot "
 }
 Elseif($Check)
 {
	$Cmd += " check "
 }
 Elseif($Restart)
 {
	$Cmd += " restart "
 }
 else
 {
	Return "Select at least one from [ Halt | Reboot | Check | Restart]"
 }
 
 if($Node_ID)
 {
	$Cmd += " Node_ID "
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Reset-3parSystemNode command -->" INFO: 
 
 Return $Result
} ##  End-of Reset-3parSystemNode

##########################################################################
######################## FUNCTION Stop-3parSystem ########################
##########################################################################
Function Stop-3parSystem()
{
<#
  .SYNOPSIS
   Stop-3parSystem - Halts or reboots the entire system.

  .DESCRIPTION
   Note : This cmdlet (Stop-3parSystem) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Reset-System) instead.
  
   The Stop-3parSystem command shuts down an entire system.

  .EXAMPLE
   Stop-3parSystem -Halt.
   
  .PARAMETER Halt
	Specifies that the system should be halted after shutdown. If this
	subcommand is not specified, the reboot or restart subcommand must be used.
	
  .PARAMETER Reboot
	Specifies that the system should be restarted after shutdown. If
	this subcommand is not given, the halt or restart subcommand must be used.
	
  .PARAMETER Restart
	Specifies that the storage services should be restarted. If
	this subcommand is not given, the halt or reboot subcommand must be used.
    
  .Notes
    NAME: Stop-3parSystem
    LASTEDIT 07-08-2019 11:21:04
    KEYWORDS: Stop-3parSystem
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$Halt,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Reboot,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$Restart,

	[Parameter(Position=3, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Stop-3parSystem - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Stop-3parSystem since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Stop-3parSystem since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

	$Cmd = " shutdownsys "

 if($Halt)
 {
	$Cmd += " halt "
 }
 Elseif($Reboot)
 {
	$Cmd += " reboot "
 }
 Elseif($Restart)
 {
	$Cmd += " restart "
 }
 else
 {
	Return "Select at least one from [Halt | Reboot | Restart ]"
 }

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Stop-3parSystem command -->" INFO:
 
 Return $Result
} ##  End-of Stop-3parSystem

##########################################################################
###################### FUNCTION Update-3parPdFirmware ####################
##########################################################################
Function Update-3parPdFirmware()
{
<#
  .SYNOPSIS
   Update-3parPdFirmware - Upgrade physical disk firmware.

  .DESCRIPTION
   Note : This cmdlet (Update-3parPdFirmware) is deprecated and will be removed in a 
   subsequent release of PowerShell Toolkit. Consider using the cmdlet (Update-PdFirmware) instead.
  
   The Update-3parPdFirmware command upgrades the physical disk firmware.

  .EXAMPLE

  .PARAMETER F
   Upgrades the physical disk firmware without requiring confirmation.

  .PARAMETER Skiptest
   Skips the 10 second diagnostic test normally completed after each
   physical disk upgrade.

  .PARAMETER A
   Specifies that all physical disks with valid IDs and whose firmware
   is not current are upgraded. If this option is not specified, then
   either the -w option or PD_ID specifier must be issued on the command
   line.

  .PARAMETER W
   Specifies that the firmware of either one or more physical disks,
   identified by their WWNs, is upgraded. If this option is not specified,
   then either the -a option or PD_ID specifier must be issued on the
   command line.

  .PARAMETER PD_ID
	Specifies that the firmware of either one or more physical disks
	identified by their IDs (PD_ID) is upgraded. If this specifier is not
	used, then the -a or -w option must be issued on the command line.
   
  .Notes
    NAME: Update-3parPdFirmware
    LASTEDIT 19-08-2019 10:39:11
    KEYWORDS: Update-3parPdFirmware
  
  .Link
    Http://www.hpe.com

 #Requires PS -Version 3.0
#>
[CmdletBinding()]
 param(
	[Parameter(Position=0, Mandatory=$false)]
	[switch]
	$F,

	[Parameter(Position=1, Mandatory=$false)]
	[switch]
	$Skiptest,

	[Parameter(Position=2, Mandatory=$false)]
	[switch]
	$A,

	[Parameter(Position=3, Mandatory=$false)]
	[System.String]
	$W,

	[Parameter(Position=4, Mandatory=$false)]
	[System.String]
	$PD_ID,

	[Parameter(Position=5, Mandatory=$false, ValueFromPipeline=$true)]
	$SANConnection = $global:SANConnection
 )

 Write-DebugLog "Start: In Update-3parPdFirmware - validating input values" $Debug 
 #check if connection object contents are null/empty
 if(!$SANConnection)
 {
	#check if connection object contents are null/empty
	$Validate1 = Test-ConnectionObject $SANConnection
	if($Validate1 -eq "Failed")
	{
		#check if global connection object contents are null/empty
		$Validate2 = Test-ConnectionObject $global:SANConnection
		if($Validate2 -eq "Failed")
		{
			Write-DebugLog "Connection object is null/empty or Connection object UserName,password,IPAaddress are null/empty. Create a valid connection object using New-SANConnection" " ERR: "
			Write-DebugLog "Stop: Exiting Update-3parPdFirmware since SAN connection object values are null/empty" $Debug 
			Return "FAILURE : Exiting Update-3parPdFirmware since SAN connection object values are null/empty"
		}
	}
 }

 $plinkresult = Test-PARCli -SANConnection $SANConnection
 if($plinkresult -match "FAILURE :")
 {
	write-debuglog "$plinkresult"
	Return $plinkresult
 }

 $Cmd = " upgradepd "
 
 if($F)
 {
	$Cmd += " -f "
 } 
 if($Skiptest)
 {
	$Cmd += " -skiptest "
 } 
 if($A)
 {
	$Cmd += " -a "
 } 
 if($W)
 {
	$Cmd += " -w $W "
 } 
 if($PD_ID)
 {
	$Cmd += " $PD_ID "
 } 

 $Result = Invoke-3parCLICmd -Connection $SANConnection -cmds  $Cmd
 Write-DebugLog "Executing function : Update-3parPdFirmware command -->" INFO:
 
 Return $Result
} ##  End-of Update-3parPdFirmware

 Export-ModuleMember Get-ConnectedSession , Stop-3parWsapi , Start-3parWsapi , Get-3parWsapi , 
 Get-3parWsapiSession , Set-3PARWsapi , Remove-3PARWsapiSession , Show-3parVLun , Invoke-3parCLICmd ,
 Set-3parPoshSshConnectionPasswordFile , Set-3parPoshSshConnectionUsingPasswordFile , New-3ParPoshSshConnection ,
 Ping-3parRCIPPorts , Get-3ParVVolSC , Set-3ParVVolSC , Show-3ParVVolvm , Add-3parRcopytarget ,
 Add-3parRcopyVV , Test-3parRcopyLink , Sync-Recover3ParDRRcopyGroup , Disable-3ParRcopylink ,
 Disable-3ParRcopytarget , Disable-3ParRcopyVV , Show-3ParRcopyTransport , Approve-3parRCopyLink ,
 Get-3parSystemInformation ,Show-3parSRStatIscsi , Show-3pariSCSISessionStatistics , Show-3pariSCSIStatistics ,
 Show-3parSRSTATISCSISession ,  Start-3parFSNDMP , Stop-3parFSNDMP , Show-3parPortARP , Show-3parPortISNS ,
 Show-3parISCSISession , Close-3PARConnection , Set-3parRCopyTargetWitness , Test-3parVV , Add-3parVV , New-3parFed,
 Join-3parFed, Set-3parFed , Remove-3parFed , Show-3parFed, Show-3parPeer , Import-3parVV , Compress-3parVV ,
 Get-3parHistRCopyVV , New-3parRCopyGroupCPG , Set-3parRCopyTarget, Remove-3parRCopyVVFromGroup , Remove-3parRCopyTarget ,
 Remove-3parRCopyGroup , Set-3parRCopyGroupPeriod , Remove-3parRCopyTargetFromGroup , Set-3parRCopyGroupPol ,
 Set-3parRCopyTargetPol , Set-3parRCopyTargetName , Start-3parRCopyGroup ,Start-3parRcopy, Get-3parRCopy , Get-3parStatRCopy ,
 Stop-3parRCopy , Stop-3parRCopyGroup , Sync-3parRCopy , New-3parRCopyGroup , New-3parRCopyTarget , Get-3parstatPD ,
 Get-3parStatVlun , Get-3parStatVV , Get-3parStatRCVV , Get-3parStatPort , Get-3parStatChunklet , Get-3parStatLink ,
 Get-3parStatLD , Get-3parStatCPU , Get-3parHistChunklet , Get-3parHistVV , Get-3parHistVLUN , Get-3parStatCMP ,
 Get-3parHistPort , Get-3parHistLD , Get-3parHistPD , Test-3parPD , Set-3parstatch  , Set-3parStatpdch ,
 Approve-3parPD , Get-3parPD , Get-3parCage , Set-3parCage , Set-3parPD , Find-3parCage , Get-3parHostPorts ,
 Get-3parFCPorts , Get-3parFCPortsToCSV , Set-3parFCPorts,  New-3parCLIConnection , Set-3parHostPorts , New-3parCPG ,
 New-3parVVSet , New-3parVV,New-3parVLUN , Get-3parVLUN , Remove-3parVLUN , Get-3parVV , Remove-3parVV ,
 New-3parHost , Set-3parHost , New-3parHostSet , Get-3parHost , Remove-3parHost , Get-3parHostSet , Get-3parVVSet ,
 Get-3parCPG , Remove-3parHostSet , Remove-3parVVSet , Remove-3parCPG , Get-3parCmdList , Get-3parVersion , Get-3parTask ,
 New-3parVVCopy , New-3parGroupVVCopy , Set-3parVV , Push-3parVVCopy , New-3parSnapVolume , Push-3parSnapVolume, New-3parGroupSnapVolume ,
 Push-3parGroupSnapVolume , Get-3parVvList , Get-3parSystem , Get-3parSpare , Remove-3parSpare , Get-3parSpace , New-3parSpare , Push-3parChunklet ,
 Push-3parChunkletToSpare , Push-3parPdToSpare , Push-3parPd , Push-3parRelocPD , Get-3parSR , Start-3parSR , Stop-3parSR , Get-3parSRStatCPU ,
 Get-3parSRHistLd , Get-3parSRHistPD , Get-3parSRHistPort , Get-3parSRHistVLUN ,  Get-3parSRAlertCrit , Set-3parSRAlertCrit , Get-3parSRStatCMP ,
 Get-3parSRStatCache , Get-3parSRStatLD , Get-3parSRStatPD , Get-3parSRStatPort , Get-3parSRStatVLUN , Get-3parSRCPGSpace , Get-3parSRLDSpace ,
 Get-3parSRPDSpace , Get-3parSRVVSpace , Get-3parSRAOMoves , Set-3parPassword , Get-3parUserConnection , New-3parSRAlertCrit , Remove-3parSRAlertCrit ,
 Update-3parVV , Set-3parDomain , Get-3parDomain , Get-3parDomainSet , Move-3parDomain , New-3parDomain , New-3parDomainSet , Remove-3parDomain ,
 Remove-3parDomainSet , Update-3parDomain , Update-3parDomainSet , New-3parFlashCache , Set-3parFlashCache , Remove-3parFlashCache , Get-3parHealth ,
 Remove-3parAlerts , Set-3parAlert , Get-3parAlert , Get-3parEventLog , Update-3parHostSet , Update-Compact3parCPG , Set-3parCPG , Optimize-3parPD ,
 Measure-3parSYS , Measure-3parUpgrade , New-3parCert , Import-3parCert , Remove-3parCert , Get-3parCert , Get-3parEncryption , Optimize-3parLD ,
 Optimize-3parNodech , Get-3parSRrgiodensity , Get-3parSRStatfsav , Get-3parSRStatfsblock , Get-3parSRStatfscpu , Get-3parSRStatfsfpg , Get-3parSRStatfsmem ,
 Get-3parSRStatfsnet , Get-3parSRStatfsnfs , Get-3parSRStatfssmb , Get-3parSRStatfssnapshot , Get-3parSRStatlink , Get-3parSRStatqos , Get-3parSRStatrcvv ,
 Resize-3parVV , New-3parMaint , Set-3parServiceCage , Search-3parServiceNode , Set-3parMaint , Get-3parInventory , Get-3parMaint ,
 Get-3parNode , Get-3parTarget , Start-3parNodeRescue , Reset-3parCage , New-3parAOConfiguration , Remove-3parAOConfiguration , Update-3parAOConfiguration ,
 Get-3parAOConfigurations , Start-3parAO , Switch-3parPD , Remove-3parPD , Find-3parNode , Find-3parSystem , Set-3parBattery , Set-3parNodesDate , Set-3parNodeProperties , Set-3parSysMgr , Show-3parBattery , Show-3parEEPROMLogInfo , Show-3parFirmwaredb , Show-3parNetworkDetail , 
 Show-3parNodeProperties , Show-3parNodeEnvironmentStatus , Show-3parPortdev , Show-3parSysStateInfo , Show-3parUnrecognizedTargetsInfo , Show-3parSystemResourcesSummary , Show-3parGenerationNumber ,  Show-3parFCoEStatistics , Find-3parLD , Compress-3parLD , Set-3parVVSpace , Remove-3parLD , Remove-3parVv_Ld_Cpg_Templates , Set-3parTemplate , Update-3parVvProperties , Update-3parVvSetProperties , Get-3parLD , Get-3parLDChunklet , Show-3parLdMappingToVvs , Show-3parVvMappedToPD , Show-3parRSV , Show-3parTemplate , Show-3parVvMapping , Show-3parVvpDistribution , Start-3parLD , Start-3parVv , Update-3parSnapSpace , Add-3parHardware ,  Set-3parMagazines , Set-3parServiceNodes , Get-3parSystemPatch , Reset-3parSystemNode , Stop-3parSystem , Update-3parPdFirmware
 

# SIG # Begin signature block
# MIInTgYJKoZIhvcNAQcCoIInPzCCJzsCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCA2XqYUfxC3ZDOw
# gIHdWTu09hJ6/Ks1mS4ExehqwJ6cTqCCFikwggVMMIIDNKADAgECAhMzAAAANdjV
# WVsGcUErAAAAAAA1MA0GCSqGSIb3DQEBBQUAMH8xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKTAnBgNVBAMTIE1pY3Jvc29mdCBDb2RlIFZlcmlm
# aWNhdGlvbiBSb290MB4XDTEzMDgxNTIwMjYzMFoXDTIzMDgxNTIwMzYzMFowbzEL
# MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRU
# cnVzdCBFeHRlcm5hbCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0
# ZXJuYWwgQ0EgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3
# GjPm8gAELTngTlvtH7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrW
# lymUWoCwSXrbLpX9uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6s
# YapeFI+eh6FqUNzXmk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpP
# hNjfzp/haW+710LXa0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSo
# RcRdKn23tNbE7qzNE0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNC
# bxWyuHv77+ldU9U0WicCAwEAAaOB0DCBzTATBgNVHSUEDDAKBggrBgEFBQcDAzAS
# BgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBStvZh6NLQm9/rEJlTvA73gJMtU
# GjALBgNVHQ8EBAMCAYYwHwYDVR0jBBgwFoAUYvsKIVt/Q24R2glUUGv10pZx8Z4w
# VQYDVR0fBE4wTDBKoEigRoZEaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9j
# cmwvcHJvZHVjdHMvTWljcm9zb2Z0Q29kZVZlcmlmUm9vdC5jcmwwDQYJKoZIhvcN
# AQEFBQADggIBADYrovLhMx/kk/fyaYXGZA7Jm2Mv5HA3mP2U7HvP+KFCRvntak6N
# NGk2BVV6HrutjJlClgbpJagmhL7BvxapfKpbBLf90cD0Ar4o7fV3x5v+OvbowXvT
# gqv6FE7PK8/l1bVIQLGjj4OLrSslU6umNM7yQ/dPLOndHk5atrroOxCZJAC8UP14
# 9uUjqImUk/e3QTA3Sle35kTZyd+ZBapE/HSvgmTMB8sBtgnDLuPoMqe0n0F4x6GE
# NlRi8uwVCsjq0IT48eBr9FYSX5Xg/N23dpP+KUol6QQA8bQRDsmEntsXffUepY42
# KRk6bWxGS9ercCQojQWj2dUk8vig0TyCOdSogg5pOoEJ/Abwx1kzhDaTBkGRIywi
# pacBK1C0KK7bRrBZG4azm4foSU45C20U30wDMB4fX3Su9VtZA1PsmBbg0GI1dRtI
# uH0T5XpIuHdSpAeYJTsGm3pOam9Ehk8UTyd5Jz1Qc0FMnEE+3SkMc7HH+x92DBdl
# BOvSUBCSQUns5AZ9NhVEb4m/aX35TUDBOpi2oH4x0rWuyvtT1T9Qhs1ekzttXXya
# Pz/3qSVYhN0RSQCix8ieN913jm1xi+BbgTRdVLrM9ZNHiG3n71viKOSAG0DkDyrR
# fyMVZVqsmZRDP0ZVJtbE+oiV4pGaoy0Lhd6sjOD5Z3CfcXkCMfdhoinEMIIFYTCC
# BEmgAwIBAgIQJl6ULMWyOufq8fQJzRxR/TANBgkqhkiG9w0BAQsFADB8MQswCQYD
# VQQGEwJHQjEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdT
# YWxmb3JkMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxJDAiBgNVBAMTG1NlY3Rp
# Z28gUlNBIENvZGUgU2lnbmluZyBDQTAeFw0xOTA0MjYwMDAwMDBaFw0yMDA0MjUy
# MzU5NTlaMIHSMQswCQYDVQQGEwJVUzEOMAwGA1UEEQwFOTQzMDQxCzAJBgNVBAgM
# AkNBMRIwEAYDVQQHDAlQYWxvIEFsdG8xHDAaBgNVBAkMEzMwMDAgSGFub3ZlciBT
# dHJlZXQxKzApBgNVBAoMIkhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIENvbXBh
# bnkxGjAYBgNVBAsMEUhQIEN5YmVyIFNlY3VyaXR5MSswKQYDVQQDDCJIZXdsZXR0
# IFBhY2thcmQgRW50ZXJwcmlzZSBDb21wYW55MIIBIjANBgkqhkiG9w0BAQEFAAOC
# AQ8AMIIBCgKCAQEAvxp2KuPOGop6ObVmKZ17bhP+oPpH4ZdDHwiaCP2KKn1m13Wd
# 5YuMcYOmF6xxb7rK8vcFRRf72MWwPvI05bKGZ1hKilh4UQZ8IpDZ6PlVF6cOFRKv
# PVt3r1nzA3fpEptdNmK54HktcfQIlTBNa0gBAzuWD5nwXckfwTujfa9bxT3ZLfNV
# V6rA9oMmsIUCF5rKQBnlwYGP5ceFFW0KBfdDNOZSLI5/96AbWO7Kh7+lfFjYYYyp
# j9a/+BdgxeLAUAc3wwtspxPui0FPDpmFAFs3Mj/eLSBjlBwd+Gb1OzQvgE+fagoy
# Kh6MB8xO4dueEdwJBEyNqNQIatE+klCMAS3L/QIDAQABo4IBhjCCAYIwHwYDVR0j
# BBgwFoAUDuE6qFM6MdWKvsG7rWcaA4WtNA4wHQYDVR0OBBYEFPqXMYWJeByh5r0Z
# 7Cfmb6MYpSExMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQM
# MAoGCCsGAQUFBwMDMBEGCWCGSAGG+EIBAQQEAwIEEDBABgNVHSAEOTA3MDUGDCsG
# AQQBsjEBAgEDAjAlMCMGCCsGAQUFBwIBFhdodHRwczovL3NlY3RpZ28uY29tL0NQ
# UzBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vY3JsLnNlY3RpZ28uY29tL1NlY3Rp
# Z29SU0FDb2RlU2lnbmluZ0NBLmNybDBzBggrBgEFBQcBAQRnMGUwPgYIKwYBBQUH
# MAKGMmh0dHA6Ly9jcnQuc2VjdGlnby5jb20vU2VjdGlnb1JTQUNvZGVTaWduaW5n
# Q0EuY3J0MCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5zZWN0aWdvLmNvbTANBgkq
# hkiG9w0BAQsFAAOCAQEAfggdDqfErm1J/WVBlc2H1wSKATk/d/vgypGsrFU1uOqv
# 3qJrz9X51HMMh/7zn5J6pKonnj5Gn9unqYPbBjyEZTYPDPfmFZNC9zZC+vhxO0mV
# PCiV9wd1f1sJjF4GBcNi/eUbCSXsXeiDWxRs1ISFj5pDp+sefNEpyMx6ryObuZ/G
# 0m3TsvMwgFy/oRKB7rcL8tACN+K4lotiuFDYjy0+vB7VuorM0fmvs9BIAnatbCz7
# begsrw0tRhw9A3tB3fEtgEZAOHsK1vg+CqFnB1vbNX3XLHw4znn7+fYdjlL1ZRo+
# zoGO6MGPIrILnlQnsldwpwYYd619q1aVkMZ8GycvojCCBXcwggRfoAMCAQICEBPq
# KHBb9OztDDZjCYBhQzYwDQYJKoZIhvcNAQEMBQAwbzELMAkGA1UEBhMCU0UxFDAS
# BgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5hbCBU
# VFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9vdDAe
# Fw0wMDA1MzAxMDQ4MzhaFw0yMDA1MzAxMDQ4MzhaMIGIMQswCQYDVQQGEwJVUzET
# MBEGA1UECBMKTmV3IEplcnNleTEUMBIGA1UEBxMLSmVyc2V5IENpdHkxHjAcBgNV
# BAoTFVRoZSBVU0VSVFJVU1QgTmV0d29yazEuMCwGA1UEAxMlVVNFUlRydXN0IFJT
# QSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
# ADCCAgoCggIBAIASZRc2DsPbCLPQrFcNdu3NJ9NMrVCDYeKqIE0JLWQJ3M6Jn8w9
# qez2z8Hc8dOx1ns3KBErR9o5xrw6GbRfpr19naNjQrZ28qk7K5H44m/Q7BYgkAk+
# 4uh0yRi0kdRiZNt/owbxiBhqkCI8vP4T8IcUe/bkH47U5FHGEWdGCFHLhhRUP7wz
# /n5snP8WnRi9UY41pqdmyHJn2yFmsdSbeAPAUDrozPDcvJ5M/q8FljUfV1q3/875
# PbcstvZU3cjnEjpNrkyKt1yatLcgPcp/IjSufjtoZgFE5wFORlObM2D3lL5TN5Bz
# Q/Myw1Pv26r+dE5px2uMYJPexMcM3+EyrsyTO1F4lWeL7j1W/gzQaQ8bD/MlJmsz
# bfduR/pzQ+V+DqVmsSl8MoRjVYnEDcGTVDAZE6zTfTen6106bDVc20HXEtqpSQvf
# 2ICKCZNijrVmzyWIzYS4sT+kOQ/ZAp7rEkyVfPNrBaleFoPMuGfi6BOdzFuC00yz
# 7Vv/3uVzrCM7LQC/NVV0CUnYSVgaf5I25lGSDvMmfRxNF7zJ7EMm0L9BX0CpRET0
# medXh55QH1dUqD79dGMvsVBlCeZYQi5DGky08CVHWfoEHpPUJkZKUIGy3r54t/xn
# FeHJV4QeD2PW6WK61l9VLupcxigIBCU5uA4rqfJMlxwHPw1S9e3vL4IPAgMBAAGj
# gfQwgfEwHwYDVR0jBBgwFoAUrb2YejS0Jvf6xCZU7wO94CTLVBowHQYDVR0OBBYE
# FFN5v1qqK0rPVIDh2JvAnfKyA2bLMA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8E
# BTADAQH/MBEGA1UdIAQKMAgwBgYEVR0gADBEBgNVHR8EPTA7MDmgN6A1hjNodHRw
# Oi8vY3JsLnVzZXJ0cnVzdC5jb20vQWRkVHJ1c3RFeHRlcm5hbENBUm9vdC5jcmww
# NQYIKwYBBQUHAQEEKTAnMCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC51c2VydHJ1
# c3QuY29tMA0GCSqGSIb3DQEBDAUAA4IBAQCTZfY3g5UPXsOCHB/Wd+c8isCqCfDp
# Cybx4MJqdaHHecm5UmDIKRIO8K0D1gnEdt/lpoGVp0bagleplZLFto8DImwzd8F7
# MhduB85aFEE6BSQb9hQGO6glJA67zCp13blwQT980GM2IQcfRv9gpJHhZ7zeH34Z
# FMljZ5HqZwdrtI+LwG5DfcOhgGyyHrxThX3ckKGkvC3vRnJXNQW/u0a7bm03mbb/
# I5KRxm5A+I8pVupf1V8UU6zwT2Hq9yLMp1YL4rg0HybZexkFaD+6PNQ4BqLT5o8O
# 47RxbUBCxYS0QJUr9GWgSHn2HYFjlp1PdeD4fOSOqdHyrYqzjMchzcLvMIIF9TCC
# A92gAwIBAgIQHaJIMG+bJhjQguCWfTPTajANBgkqhkiG9w0BAQwFADCBiDELMAkG
# A1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBD
# aXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVT
# RVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTgxMTAyMDAw
# MDAwWhcNMzAxMjMxMjM1OTU5WjB8MQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl
# YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRgwFgYDVQQKEw9TZWN0
# aWdvIExpbWl0ZWQxJDAiBgNVBAMTG1NlY3RpZ28gUlNBIENvZGUgU2lnbmluZyBD
# QTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIYijTKFehifSfCWL2MI
# Hi3cfJ8Uz+MmtiVmKUCGVEZ0MWLFEO2yhyemmcuVMMBW9aR1xqkOUGKlUZEQauBL
# Yq798PgYrKf/7i4zIPoMGYmobHutAMNhodxpZW0fbieW15dRhqb0J+V8aouVHltg
# 1X7XFpKcAC9o95ftanK+ODtj3o+/bkxBXRIgCFnoOc2P0tbPBrRXBbZOoT5Xax+Y
# vMRi1hsLjcdmG0qfnYHEckC14l/vC0X/o84Xpi1VsLewvFRqnbyNVlPG8Lp5UEks
# 9wO5/i9lNfIi6iwHr0bZ+UYc3Ix8cSjz/qfGFN1VkW6KEQ3fBiSVfQ+noXw62oY1
# YdMCAwEAAaOCAWQwggFgMB8GA1UdIwQYMBaAFFN5v1qqK0rPVIDh2JvAnfKyA2bL
# MB0GA1UdDgQWBBQO4TqoUzox1Yq+wbutZxoDha00DjAOBgNVHQ8BAf8EBAMCAYYw
# EgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHSUEFjAUBggrBgEFBQcDAwYIKwYBBQUH
# AwgwEQYDVR0gBAowCDAGBgRVHSAAMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6Ly9j
# cmwudXNlcnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FDZXJ0aWZpY2F0aW9uQXV0aG9y
# aXR5LmNybDB2BggrBgEFBQcBAQRqMGgwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jcnQu
# dXNlcnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FBZGRUcnVzdENBLmNydDAlBggrBgEF
# BQcwAYYZaHR0cDovL29jc3AudXNlcnRydXN0LmNvbTANBgkqhkiG9w0BAQwFAAOC
# AgEATWNQ7Uc0SmGk295qKoyb8QAAHh1iezrXMsL2s+Bjs/thAIiaG20QBwRPvrjq
# iXgi6w9G7PNGXkBGiRL0C3danCpBOvzW9Ovn9xWVM8Ohgyi33i/klPeFM4MtSkBI
# v5rCT0qxjyT0s4E307dksKYjalloUkJf/wTr4XRleQj1qZPea3FAmZa6ePG5yOLD
# CBaxq2NayBWAbXReSnV+pbjDbLXP30p5h1zHQE1jNfYw08+1Cg4LBH+gS667o6XQ
# hACTPlNdNKUANWlsvp8gJRANGftQkGG+OY96jk32nw4e/gdREmaDJhlIlc5KycF/
# 8zoFm/lv34h/wCOe0h5DekUxwZxNqfBZslkZ6GqNKQQCd3xLS81wvjqyVVp4Pry7
# bwMQJXcVNIr5NsxDkuS6T/FikyglVyn7URnHoSVAaoRXxrKdsbwcCtp8Z359Luko
# TBh+xHsxQXGaSynsCz1XUNLK3f2eBVHlRHjdAd6xdZgNVCT98E7j4viDvXK6yz06
# 7vBeF5Jobchh+abxKgoLpbn0nu6YMgWFnuv5gynTxix9vTp3Los3QqBqgu07SqqU
# EKThDfgXxbZaeTMYkuO1dfih6Y4KJR7kHvGfWocj/5+kUZ77OYARzdu1xKeogG/l
# U9Tg46LC0lsa+jImLWpXcBw8pFguo/NbSwfcMlnzh6cabVgxghB7MIIQdwIBATCB
# kDB8MQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAw
# DgYDVQQHEwdTYWxmb3JkMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxJDAiBgNV
# BAMTG1NlY3RpZ28gUlNBIENvZGUgU2lnbmluZyBDQQIQJl6ULMWyOufq8fQJzRxR
# /TANBglghkgBZQMEAgEFAKB8MBAGCisGAQQBgjcCAQwxAjAAMBkGCSqGSIb3DQEJ
# AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8G
# CSqGSIb3DQEJBDEiBCDNeqIUNCT4y4AzxooHbcYBD3QvFnQ4oJv/pxtjJB+A4TAN
# BgkqhkiG9w0BAQEFAASCAQCaWofKidkG0Nfq6cXTt0HNm6KtaP7LNebWsPuqCuSE
# ByM7vx/3AbzEJs9qcQiTWqeCYAfu6Kej+Hys+apkuDlLIzv1JGl0Nhx19MPUoRjU
# HI8JI5IdU8O3VhugR/0tCSyJ9bwGx4VHhK+dChUY32Q2JcVoGBXTLobeBEGUBew9
# n9oBefVsjSmsQ8CawnsGC2EwqhNIPwaPSZsb01GpOA5DMKAHLyQaFXlT4f7R9oNd
# Le9UMBr3FLsk4h4RLYIjIFt9mXkR1Uc00CjrzR/K2VT9VlM64VKFwQd7qoPgpC8z
# Zbg0DxiQZb8+so92seQmVaoMiK3CLRvGjNuifH43eGW9oYIOPTCCDjkGCisGAQQB
# gjcDAwExgg4pMIIOJQYJKoZIhvcNAQcCoIIOFjCCDhICAQMxDTALBglghkgBZQME
# AgEwggEPBgsqhkiG9w0BCRABBKCB/wSB/DCB+QIBAQYLYIZIAYb4RQEHFwMwMTAN
# BglghkgBZQMEAgEFAAQgFER92aXGgiTFG9FGtMcVw0NiApYmimCaasL1lKZrlyUC
# FQCZ/1HARtniT0FHZQVheE8frNtToxgPMjAxOTA4MjIxMDUxNDBaMAMCAR6ggYak
# gYMwgYAxCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1hbnRlYyBDb3Jwb3JhdGlv
# bjEfMB0GA1UECxMWU3ltYW50ZWMgVHJ1c3QgTmV0d29yazExMC8GA1UEAxMoU3lt
# YW50ZWMgU0hBMjU2IFRpbWVTdGFtcGluZyBTaWduZXIgLSBHM6CCCoswggU4MIIE
# IKADAgECAhB7BbHUSWhRRPfJidKcGZ0SMA0GCSqGSIb3DQEBCwUAMIG9MQswCQYD
# VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
# aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJ
# bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWdu
# IFVuaXZlcnNhbCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTE2MDEx
# MjAwMDAwMFoXDTMxMDExMTIzNTk1OVowdzELMAkGA1UEBhMCVVMxHTAbBgNVBAoT
# FFN5bWFudGVjIENvcnBvcmF0aW9uMR8wHQYDVQQLExZTeW1hbnRlYyBUcnVzdCBO
# ZXR3b3JrMSgwJgYDVQQDEx9TeW1hbnRlYyBTSEEyNTYgVGltZVN0YW1waW5nIENB
# MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1mdWVVPnYxyXRqBoutV
# 87ABrTxxrDKPBWuGmicAMpdqTclkFEspu8LZKbku7GOz4c8/C1aQ+GIbfuumB+Le
# f15tQDjUkQbnQXx5HMvLrRu/2JWR8/DubPitljkuf8EnuHg5xYSl7e2vh47Ojcdt
# 6tKYtTofHjmdw/SaqPSE4cTRfHHGBim0P+SDDSbDewg+TfkKtzNJ/8o71PWym0vh
# iJka9cDpMxTW38eA25Hu/rySV3J39M2ozP4J9ZM3vpWIasXc9LFL1M7oCZFftYR5
# NYp4rBkyjyPBMkEbWQ6pPrHM+dYr77fY5NUdbRE6kvaTyZzjSO67Uw7UNpeGeMWh
# NwIDAQABo4IBdzCCAXMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8C
# AQAwZgYDVR0gBF8wXTBbBgtghkgBhvhFAQcXAzBMMCMGCCsGAQUFBwIBFhdodHRw
# czovL2Quc3ltY2IuY29tL2NwczAlBggrBgEFBQcCAjAZGhdodHRwczovL2Quc3lt
# Y2IuY29tL3JwYTAuBggrBgEFBQcBAQQiMCAwHgYIKwYBBQUHMAGGEmh0dHA6Ly9z
# LnN5bWNkLmNvbTA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vcy5zeW1jYi5jb20v
# dW5pdmVyc2FsLXJvb3QuY3JsMBMGA1UdJQQMMAoGCCsGAQUFBwMIMCgGA1UdEQQh
# MB+kHTAbMRkwFwYDVQQDExBUaW1lU3RhbXAtMjA0OC0zMB0GA1UdDgQWBBSvY9bK
# o06FcuCnvEHzKaI4f4B1YjAfBgNVHSMEGDAWgBS2d/ppSEefUxLVwuoHMnYH0ZcH
# GTANBgkqhkiG9w0BAQsFAAOCAQEAdeqwLdU0GVwyRf4O4dRPpnjBb9fq3dxP86HI
# gYj3p48V5kApreZd9KLZVmSEcTAq3R5hF2YgVgaYGY1dcfL4l7wJ/RyRR8ni6I0D
# +8yQL9YKbE4z7Na0k8hMkGNIOUAhxN3WbomYPLWYl+ipBrcJyY9TV0GQL+EeTU7c
# yhB4bEJu8LbF+GFcUvVO9muN90p6vvPN/QPX2fYDqA/jU/cKdezGdS6qZoUEmbf4
# Blfhxg726K/a7JsYH6q54zoAv86KlMsB257HOLsPUqvR45QDYApNoP4nbRQy/D+X
# QOG/mYnb5DkUvdrk08PqK1qzlVhVBH3HmuwjA42FKtL/rqlhgTCCBUswggQzoAMC
# AQICEHvU5a+6zAc/oQEjBCJBTRIwDQYJKoZIhvcNAQELBQAwdzELMAkGA1UEBhMC
# VVMxHTAbBgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMR8wHQYDVQQLExZTeW1h
# bnRlYyBUcnVzdCBOZXR3b3JrMSgwJgYDVQQDEx9TeW1hbnRlYyBTSEEyNTYgVGlt
# ZVN0YW1waW5nIENBMB4XDTE3MTIyMzAwMDAwMFoXDTI5MDMyMjIzNTk1OVowgYAx
# CzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1hbnRlYyBDb3Jwb3JhdGlvbjEfMB0G
# A1UECxMWU3ltYW50ZWMgVHJ1c3QgTmV0d29yazExMC8GA1UEAxMoU3ltYW50ZWMg
# U0hBMjU2IFRpbWVTdGFtcGluZyBTaWduZXIgLSBHMzCCASIwDQYJKoZIhvcNAQEB
# BQADggEPADCCAQoCggEBAK8Oiqr43L9pe1QXcUcJvY08gfh0FXdnkJz93k4Cnkt2
# 9uU2PmXVJCBtMPndHYPpPydKM05tForkjUCNIqq+pwsb0ge2PLUaJCj4G3JRPcgJ
# iCYIOvn6QyN1R3AMs19bjwgdckhXZU2vAjxA9/TdMjiTP+UspvNZI8uA3hNN+RDJ
# qgoYbFVhV9HxAizEtavybCPSnw0PGWythWJp/U6FwYpSMatb2Ml0UuNXbCK/VX9v
# ygarP0q3InZl7Ow28paVgSYs/buYqgE4068lQJsJU/ApV4VYXuqFSEEhh+XetNMm
# sntAU1h5jlIxBk2UA0XEzjwD7LcA8joixbRv5e+wipsCAwEAAaOCAccwggHDMAwG
# A1UdEwEB/wQCMAAwZgYDVR0gBF8wXTBbBgtghkgBhvhFAQcXAzBMMCMGCCsGAQUF
# BwIBFhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggrBgEFBQcCAjAZGhdodHRw
# czovL2Quc3ltY2IuY29tL3JwYTBABgNVHR8EOTA3MDWgM6Axhi9odHRwOi8vdHMt
# Y3JsLndzLnN5bWFudGVjLmNvbS9zaGEyNTYtdHNzLWNhLmNybDAWBgNVHSUBAf8E
# DDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwdwYIKwYBBQUHAQEEazBpMCoG
# CCsGAQUFBzABhh5odHRwOi8vdHMtb2NzcC53cy5zeW1hbnRlYy5jb20wOwYIKwYB
# BQUHMAKGL2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3NoYTI1Ni10c3Mt
# Y2EuY2VyMCgGA1UdEQQhMB+kHTAbMRkwFwYDVQQDExBUaW1lU3RhbXAtMjA0OC02
# MB0GA1UdDgQWBBSlEwGpn4XMG24WHl87Map5NgB7HTAfBgNVHSMEGDAWgBSvY9bK
# o06FcuCnvEHzKaI4f4B1YjANBgkqhkiG9w0BAQsFAAOCAQEARp6v8LiiX6KZSM+o
# J0shzbK5pnJwYy/jVSl7OUZO535lBliLvFeKkg0I2BC6NiT6Cnv7O9Niv0qUFeaC
# 24pUbf8o/mfPcT/mMwnZolkQ9B5K/mXM3tRr41IpdQBKK6XMy5voqU33tBdZkkHD
# tz+G5vbAf0Q8RlwXWuOkO9VpJtUhfeGAZ35irLdOLhWa5Zwjr1sR6nGpQfkNeTip
# oQ3PtLHaPpp6xyLFdM3fRwmGxPyRJbIblumFCOjd6nRgbmClVnoNyERY3Ob5SBSe
# 5b/eAL13sZgUchQk38cRLB8AP8NLFMZnHMweBqOQX1xUiz7jM1uCD8W3hgJOcZ/p
# ZkU/djGCAlowggJWAgEBMIGLMHcxCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
# bnRlYyBDb3Jwb3JhdGlvbjEfMB0GA1UECxMWU3ltYW50ZWMgVHJ1c3QgTmV0d29y
# azEoMCYGA1UEAxMfU3ltYW50ZWMgU0hBMjU2IFRpbWVTdGFtcGluZyBDQQIQe9Tl
# r7rMBz+hASMEIkFNEjALBglghkgBZQMEAgGggaQwGgYJKoZIhvcNAQkDMQ0GCyqG
# SIb3DQEJEAEEMBwGCSqGSIb3DQEJBTEPFw0xOTA4MjIxMDUxNDBaMC8GCSqGSIb3
# DQEJBDEiBCDlGx9+WB/q6kOFYwq3TuIvM3ef2aRBp/ZNgRLqCGr6TzA3BgsqhkiG
# 9w0BCRACLzEoMCYwJDAiBCDEdM52AH0COU4NpeTefBTGgPniggE8/vZT7123H99h
# +DALBgkqhkiG9w0BAQEEggEAjRho8W8lP3m6RBgtuYBM8YhBURJH7H+mP3KMWnl6
# kCSJvWTXY83DLUAGfNJ31c6xiuxmxHmmzkAYl/N0hywsZN0CeztN5bUgjQ0K8pq5
# b0SJhz+hQ5Eq7gXILQX7EHCgxZWRH5+aIpnXjr7FCRFDoXaRwv6O7fHG/Hf2Vu6U
# sRvPOtQL8G6gzYXIaIfAwrOlbjxk+2cYq6ZGBkPg8AwHaoaWyAY65Y9mIrh4NkS6
# qQsx5nNrTobgXxWLOUBtHrHn9PPXDtAqL+8hv7GhZTjXXvvB9junvtpFOmC9rMIe
# oaj+gbo3ktXzrNzVHKhyv0AUOej1nVLptlItx6mQzB56uQ==
# SIG # End signature block
